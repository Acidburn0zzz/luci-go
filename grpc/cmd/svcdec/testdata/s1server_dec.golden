// Code generated by svcdec; DO NOT EDIT

package test

import (
	"context"

	proto "github.com/golang/protobuf/proto"

	google_protobuf "go.chromium.org/luci/common/proto/google"
	sub "go.chromium.org/luci/grpc/internal/svctool/testdata/sub"
)

type DecoratedS1 struct {
	// Service is the service to decorate.
	Service S1Server
	// Prelude is called for each method before forwarding the call to Service.
	// If Prelude returns an error, then the call is skipped and the error is
	// processed via the Postlude (if one is defined), or it is returned directly.
	Prelude func(c context.Context, methodName string, req proto.Message) (context.Context, error)
	// Postlude is called for each method after Service has processed the call, or
	// after the Prelude has returned an error. This takes the the Service's
	// response proto (which may be nil) and/or any error. The decorated
	// service will return the response (possibly mutated) and error that Postlude
	// returns.
	Postlude func(c context.Context, methodName string, rsp proto.Message, err error) error
}

func (s *DecoratedS1) M(c context.Context, req *M1) (rsp *M2, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(c, "M", req)
		if err == nil {
			c = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.M(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "M", rsp, err)
	}
	return
}

type DecoratedS2 struct {
	// Service is the service to decorate.
	Service S2Server
	// Prelude is called for each method before forwarding the call to Service.
	// If Prelude returns an error, then the call is skipped and the error is
	// processed via the Postlude (if one is defined), or it is returned directly.
	Prelude func(c context.Context, methodName string, req proto.Message) (context.Context, error)
	// Postlude is called for each method after Service has processed the call, or
	// after the Prelude has returned an error. This takes the the Service's
	// response proto (which may be nil) and/or any error. The decorated
	// service will return the response (possibly mutated) and error that Postlude
	// returns.
	Postlude func(c context.Context, methodName string, rsp proto.Message, err error) error
}

func (s *DecoratedS2) Get(c context.Context, req *Void) (rsp *M1, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(c, "Get", req)
		if err == nil {
			c = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.Get(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "Get", rsp, err)
	}
	return
}

func (s *DecoratedS2) Set(c context.Context, req *M1) (rsp *Void, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(c, "Set", req)
		if err == nil {
			c = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.Set(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "Set", rsp, err)
	}
	return
}

func (s *DecoratedS2) Imp(c context.Context, req *sub.Sub) (rsp *google_protobuf.Empty, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(c, "Imp", req)
		if err == nil {
			c = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.Imp(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "Imp", rsp, err)
	}
	return
}
