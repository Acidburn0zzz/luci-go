// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/luci_notify/api/config/notify.proto

/*
Package config is a generated protocol buffer package.

It is generated from these files:
	go.chromium.org/luci/luci_notify/api/config/notify.proto
	go.chromium.org/luci/luci_notify/api/config/settings.proto

It has these top-level messages:
	ProjectConfig
	Notifier
	Notification
	Builder
	Settings
*/
package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ProjectConfig is a luci-notify configuration for a particular project.
type ProjectConfig struct {
	// Notifiers is a list of Notifiers which watch builders and send
	// notifications for this project.
	Notifiers []*Notifier `protobuf:"bytes,1,rep,name=notifiers" json:"notifiers,omitempty"`
}

func (m *ProjectConfig) Reset()                    { *m = ProjectConfig{} }
func (m *ProjectConfig) String() string            { return proto.CompactTextString(m) }
func (*ProjectConfig) ProtoMessage()               {}
func (*ProjectConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProjectConfig) GetNotifiers() []*Notifier {
	if m != nil {
		return m.Notifiers
	}
	return nil
}

// Notifier contains a set of notification configurations (which specify
// triggers to send notifications on) and a set of builders that will be
// watched for these triggers.
type Notifier struct {
	// Name is an identifier for the notifier which must be unique within a
	// project.
	//
	// Name must additionally match ^[a-z\-]+$, meaning it must only
	// use an alphabet of lowercase characters and hyphens.
	//
	// Required.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Notifications is a list of notification configurations.
	Notifications []*Notification `protobuf:"bytes,2,rep,name=notifications" json:"notifications,omitempty"`
	// Builders is a list of buildbucket builders this Notifier should watch.
	Builders []*Builder `protobuf:"bytes,3,rep,name=builders" json:"builders,omitempty"`
}

func (m *Notifier) Reset()                    { *m = Notifier{} }
func (m *Notifier) String() string            { return proto.CompactTextString(m) }
func (*Notifier) ProtoMessage()               {}
func (*Notifier) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Notifier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Notifier) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *Notifier) GetBuilders() []*Builder {
	if m != nil {
		return m.Builders
	}
	return nil
}

// Notification specifies the triggers to watch for and send
// notifications on. It also specifies email recipients.
type Notification struct {
	// OnSuccess specifies a trigger to notify recipients on each build success.
	//
	// Optional.
	OnSuccess bool `protobuf:"varint,1,opt,name=on_success,json=onSuccess" json:"on_success,omitempty"`
	// OnFailure specifies a trigger to notify recipients on each build failure.
	//
	// Optional.
	OnFailure bool `protobuf:"varint,2,opt,name=on_failure,json=onFailure" json:"on_failure,omitempty"`
	// OnChange specifies a trigger to notify recipients if the builder's
	// previous build had a different result than the most recent build.
	//
	// Optional.
	OnChange bool `protobuf:"varint,3,opt,name=on_change,json=onChange" json:"on_change,omitempty"`
	// Email is the set of email addresses to notify.
	//
	// Optional.
	Email *Notification_Email `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	// Refers to which project template name to use to format this email.
	// If not present, "default" will be used.
	//
	// Optional
	Template string `protobuf:"bytes,5,opt,name=template" json:"template,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Notification) GetOnSuccess() bool {
	if m != nil {
		return m.OnSuccess
	}
	return false
}

func (m *Notification) GetOnFailure() bool {
	if m != nil {
		return m.OnFailure
	}
	return false
}

func (m *Notification) GetOnChange() bool {
	if m != nil {
		return m.OnChange
	}
	return false
}

func (m *Notification) GetEmail() *Notification_Email {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *Notification) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

// EmailConfig is a message representing a set of mail recipients (email
// addresses).
type Notification_Email struct {
	// Recipients is a list of email addresses to notify.
	Recipients []string `protobuf:"bytes,1,rep,name=recipients" json:"recipients,omitempty"`
}

func (m *Notification_Email) Reset()                    { *m = Notification_Email{} }
func (m *Notification_Email) String() string            { return proto.CompactTextString(m) }
func (*Notification_Email) ProtoMessage()               {}
func (*Notification_Email) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *Notification_Email) GetRecipients() []string {
	if m != nil {
		return m.Recipients
	}
	return nil
}

// Builder references a buildbucket builder in the current project.
type Builder struct {
	// Bucket is the buildbucket bucket that the builder is a part of.
	//
	// Required.
	Bucket string `protobuf:"bytes,1,opt,name=bucket" json:"bucket,omitempty"`
	// Name is the name of the buildbucket builder.
	//
	// Required.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Builder) Reset()                    { *m = Builder{} }
func (m *Builder) String() string            { return proto.CompactTextString(m) }
func (*Builder) ProtoMessage()               {}
func (*Builder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Builder) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *Builder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*ProjectConfig)(nil), "config.ProjectConfig")
	proto.RegisterType((*Notifier)(nil), "config.Notifier")
	proto.RegisterType((*Notification)(nil), "config.Notification")
	proto.RegisterType((*Notification_Email)(nil), "config.Notification.Email")
	proto.RegisterType((*Builder)(nil), "config.Builder")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/luci_notify/api/config/notify.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xdd, 0x4a, 0x23, 0x31,
	0x14, 0xc7, 0x99, 0x7e, 0xed, 0xcc, 0xe9, 0x96, 0x5d, 0xc2, 0xb2, 0x84, 0x8a, 0x52, 0xe6, 0xc6,
	0x82, 0x90, 0x91, 0x8a, 0x20, 0xde, 0x08, 0x16, 0xbd, 0x14, 0x89, 0x0f, 0x50, 0xd2, 0x98, 0x4e,
	0xa3, 0x33, 0x39, 0x43, 0x26, 0x73, 0xe1, 0x13, 0xf8, 0x9a, 0x3e, 0x8a, 0x34, 0x99, 0x7e, 0x81,
	0x37, 0xc3, 0x9c, 0xdf, 0xff, 0x97, 0x43, 0x72, 0x0e, 0xdc, 0xe4, 0xc8, 0xe4, 0xda, 0x62, 0xa9,
	0x9b, 0x92, 0xa1, 0xcd, 0xb3, 0xa2, 0x91, 0xda, 0x7f, 0x16, 0x06, 0x9d, 0x5e, 0x7d, 0x64, 0xa2,
	0xd2, 0x99, 0x44, 0xb3, 0xd2, 0x79, 0x16, 0x08, 0xab, 0x2c, 0x3a, 0x24, 0x83, 0x00, 0xd3, 0x3b,
	0x18, 0x3d, 0x5b, 0x7c, 0x53, 0xd2, 0xcd, 0x3d, 0x20, 0x0c, 0x12, 0x2f, 0x6a, 0x65, 0x6b, 0x1a,
	0x4d, 0xba, 0xd3, 0xe1, 0xec, 0x2f, 0x0b, 0x32, 0x7b, 0x6a, 0x03, 0xbe, 0x57, 0xd2, 0xcf, 0x08,
	0xe2, 0x2d, 0x27, 0x04, 0x7a, 0x46, 0x94, 0x8a, 0x46, 0x93, 0x68, 0x9a, 0x70, 0xff, 0x4f, 0x6e,
	0x61, 0x14, 0x6c, 0x29, 0x9c, 0x46, 0x53, 0xd3, 0x8e, 0x6f, 0xfa, 0xef, 0xb8, 0x69, 0x08, 0xf9,
	0xb1, 0x4a, 0x2e, 0x20, 0x5e, 0x36, 0xba, 0x78, 0xdd, 0xdc, 0xa5, 0xeb, 0x8f, 0xfd, 0xd9, 0x1e,
	0xbb, 0x0f, 0x9c, 0xef, 0x84, 0xf4, 0x2b, 0x82, 0xdf, 0x87, 0xcd, 0xc8, 0x29, 0x00, 0x9a, 0x45,
	0xdd, 0x48, 0xa9, 0xea, 0xda, 0xdf, 0x29, 0xe6, 0x09, 0x9a, 0x97, 0x00, 0xda, 0x78, 0x25, 0x74,
	0xd1, 0x58, 0x45, 0x3b, 0xdb, 0xf8, 0x31, 0x00, 0x72, 0x02, 0x09, 0x9a, 0x85, 0x5c, 0x0b, 0x93,
	0x2b, 0xda, 0xf5, 0x69, 0x8c, 0x66, 0xee, 0x6b, 0x72, 0x09, 0x7d, 0x55, 0x0a, 0x5d, 0xd0, 0xde,
	0x24, 0x9a, 0x0e, 0x67, 0xe3, 0x9f, 0x1e, 0xc3, 0x1e, 0x36, 0x06, 0x0f, 0x22, 0x19, 0x43, 0xec,
	0x54, 0x59, 0x15, 0xc2, 0x29, 0xda, 0xf7, 0xe3, 0xd9, 0xd5, 0xe3, 0x73, 0xe8, 0x7b, 0x97, 0x9c,
	0x01, 0x58, 0x25, 0x75, 0xa5, 0x95, 0x71, 0x61, 0xfa, 0x09, 0x3f, 0x20, 0xe9, 0x35, 0xfc, 0x6a,
	0xdf, 0x4d, 0xfe, 0xc3, 0x60, 0xd9, 0xc8, 0x77, 0xe5, 0xda, 0x61, 0xb7, 0xd5, 0x6e, 0x05, 0x9d,
	0xfd, 0x0a, 0x96, 0x03, 0xbf, 0xf3, 0xab, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x62, 0xde, 0x5d,
	0xbb, 0x2f, 0x02, 0x00, 0x00,
}
