// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/cq/api/config/v1/cq_legacy.proto

package legacy_config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// DEPRECATED. See v2 API cq.proto instead.
//
// This message describes a Commit Queue configuration. The config file cq.cfg
// should be stored in the config directory located on the branch that this CQ
// should commit to.
type Config struct {
	// Required. Version of the config format.
	Version *int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// DEPRECATED. DO NOT USE.
	CqName *string `protobuf:"bytes,2,opt,name=cq_name,json=cqName" json:"cq_name,omitempty"`
	// List of verifiers that verify if the CL is ready to be committed.
	Verifiers *Verifiers `protobuf:"bytes,3,opt,name=verifiers" json:"verifiers,omitempty"`
	// URL of the CQ status app to push updates to.
	CqStatusUrl *string `protobuf:"bytes,4,opt,name=cq_status_url,json=cqStatusUrl" json:"cq_status_url,omitempty"`
	// Delay between commit bursts in seconds. Default value is 480.
	CommitBurstDelay *int32 `protobuf:"varint,6,opt,name=commit_burst_delay,json=commitBurstDelay" json:"commit_burst_delay,omitempty"`
	// Maximum number of commits done sequentially, before waiting for
	// commit_burst_delay. Default value is 4.
	MaxCommitBurst *int32 `protobuf:"varint,7,opt,name=max_commit_burst,json=maxCommitBurst" json:"max_commit_burst,omitempty"`
	// DEPRECATED. NO LONGER SUPPORTED.
	InProduction *bool `protobuf:"varint,8,opt,name=in_production,json=inProduction" json:"in_production,omitempty"`
	// Configuration options for Gerrit code review.
	Gerrit *Gerrit `protobuf:"bytes,15,opt,name=gerrit" json:"gerrit,omitempty"`
	// Required. Must be on a Gerrit at Google *.googlesource.com host.
	GitRepoUrl *string `protobuf:"bytes,10,opt,name=git_repo_url,json=gitRepoUrl" json:"git_repo_url,omitempty"`
	// If present, the CQ will refrain from processing any commits whose start
	// time is >= this time.
	//
	// This is an UTC RFC3339 (stiptime(tm)) string representing the time.
	// For example, "2017-12-23T15:47:58Z" and Z is required.
	DrainingStartTime    *string  `protobuf:"bytes,13,opt,name=draining_start_time,json=drainingStartTime" json:"draining_start_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd4f4c435722d01, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *Config) GetCqName() string {
	if m != nil && m.CqName != nil {
		return *m.CqName
	}
	return ""
}

func (m *Config) GetVerifiers() *Verifiers {
	if m != nil {
		return m.Verifiers
	}
	return nil
}

func (m *Config) GetCqStatusUrl() string {
	if m != nil && m.CqStatusUrl != nil {
		return *m.CqStatusUrl
	}
	return ""
}

func (m *Config) GetCommitBurstDelay() int32 {
	if m != nil && m.CommitBurstDelay != nil {
		return *m.CommitBurstDelay
	}
	return 0
}

func (m *Config) GetMaxCommitBurst() int32 {
	if m != nil && m.MaxCommitBurst != nil {
		return *m.MaxCommitBurst
	}
	return 0
}

func (m *Config) GetInProduction() bool {
	if m != nil && m.InProduction != nil {
		return *m.InProduction
	}
	return false
}

func (m *Config) GetGerrit() *Gerrit {
	if m != nil {
		return m.Gerrit
	}
	return nil
}

func (m *Config) GetGitRepoUrl() string {
	if m != nil && m.GitRepoUrl != nil {
		return *m.GitRepoUrl
	}
	return ""
}

func (m *Config) GetDrainingStartTime() string {
	if m != nil && m.DrainingStartTime != nil {
		return *m.DrainingStartTime
	}
	return ""
}

// Gerrit requires the git_repo_url must be specified on the Gerrit instance,
// and CQ will deduce Gerrit url from it.
// Also, gerrit_cq_ability verifier must be defined in case of Gerrit.
//
// For example, if https://chromium.googlesource.com/infra/infra.git is your
// repo url provided in `git_repo_url` above, then
// https://chromium-review.googlesource.com/#/admin/projects/infra/infra should
// show general properties of your project.
//
// Also,
// https://chromium-review.googlesource.com/#/admin/projects/infra/infra,access
// should show ACLs for refs in your project, but you may need to be admin to
// see it. This will come handy to enable and customize the CQ-related workflows
// for your project.
type Gerrit struct {
	// DEPRECATED. DO NOT USE.
	CqVerifiedLabel *string `protobuf:"bytes,1,opt,name=cq_verified_label,json=cqVerifiedLabel" json:"cq_verified_label,omitempty"`
	// DEPRECATED. DO NOT USE.
	DryRunSetsCqVerifiedLabel *bool    `protobuf:"varint,2,opt,name=dry_run_sets_cq_verified_label,json=dryRunSetsCqVerifiedLabel" json:"dry_run_sets_cq_verified_label,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *Gerrit) Reset()         { *m = Gerrit{} }
func (m *Gerrit) String() string { return proto.CompactTextString(m) }
func (*Gerrit) ProtoMessage()    {}
func (*Gerrit) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd4f4c435722d01, []int{1}
}

func (m *Gerrit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Gerrit.Unmarshal(m, b)
}
func (m *Gerrit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Gerrit.Marshal(b, m, deterministic)
}
func (m *Gerrit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gerrit.Merge(m, src)
}
func (m *Gerrit) XXX_Size() int {
	return xxx_messageInfo_Gerrit.Size(m)
}
func (m *Gerrit) XXX_DiscardUnknown() {
	xxx_messageInfo_Gerrit.DiscardUnknown(m)
}

var xxx_messageInfo_Gerrit proto.InternalMessageInfo

func (m *Gerrit) GetCqVerifiedLabel() string {
	if m != nil && m.CqVerifiedLabel != nil {
		return *m.CqVerifiedLabel
	}
	return ""
}

func (m *Gerrit) GetDryRunSetsCqVerifiedLabel() bool {
	if m != nil && m.DryRunSetsCqVerifiedLabel != nil {
		return *m.DryRunSetsCqVerifiedLabel
	}
	return false
}

// Verifiers are various types of checks that a Commit Queue performs on a CL.
// All verifiers must pass in order for a CL to be landed. Configuration file
// describes types of verifiers that should be applied to each CL and their
// parameters.
type Verifiers struct {
	// GerritCQAbilityVerifier ensures that a user who triggered
	// this CQ attempt has actually rights to do so based on 3 factors:
	//  * membership of the user in committers & dryrunners group,
	//  * the state of CL/patchset on which CQ is triggered,
	//  * relationship of the user to the CL.
	// This verifier must be specified for Gerrit.
	GerritCqAbility *Verifiers_GerritCQAbilityVerifier `protobuf:"bytes,5,opt,name=gerrit_cq_ability,json=gerritCqAbility" json:"gerrit_cq_ability,omitempty"`
	// This verifier is used to check tree status before committing a CL. If the
	// tree is closed, then the verifier will wait until it is reopened.
	TreeStatus *Verifiers_TreeStatusLgtmVerifier `protobuf:"bytes,2,opt,name=tree_status,json=treeStatus" json:"tree_status,omitempty"`
	// This verifier triggers a set of builds through BuildBucket.
	//
	// CQ automatically retries failed try-jobs and only allows CL to land if each
	// builder has succeeded in the latest retry.
	// If a given tryjob result is too old (>1 day) it is ignored.
	//
	// Typically, builds from buildbucket are executed on LUCI stack, however, CQ
	// is agnostic to how and where builds are executed.
	TryJob *Verifiers_TryJobVerifier `protobuf:"bytes,3,opt,name=try_job,json=tryJob" json:"try_job,omitempty"`
	// Deprecator is for internal CQ use only. DO NOT USE IN YOUR cq.cfg.
	Deprecator *Verifiers_DeprecatorVerifier `protobuf:"bytes,6,opt,name=deprecator" json:"deprecator,omitempty"`
	// Fake is for internal CQ use only. DO NOT USE IN YOUR cq.cfg.
	Fake                 *Verifiers_FakeVerifier `protobuf:"bytes,7,opt,name=fake" json:"fake,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Verifiers) Reset()         { *m = Verifiers{} }
func (m *Verifiers) String() string { return proto.CompactTextString(m) }
func (*Verifiers) ProtoMessage()    {}
func (*Verifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd4f4c435722d01, []int{2}
}

func (m *Verifiers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Verifiers.Unmarshal(m, b)
}
func (m *Verifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Verifiers.Marshal(b, m, deterministic)
}
func (m *Verifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Verifiers.Merge(m, src)
}
func (m *Verifiers) XXX_Size() int {
	return xxx_messageInfo_Verifiers.Size(m)
}
func (m *Verifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_Verifiers.DiscardUnknown(m)
}

var xxx_messageInfo_Verifiers proto.InternalMessageInfo

func (m *Verifiers) GetGerritCqAbility() *Verifiers_GerritCQAbilityVerifier {
	if m != nil {
		return m.GerritCqAbility
	}
	return nil
}

func (m *Verifiers) GetTreeStatus() *Verifiers_TreeStatusLgtmVerifier {
	if m != nil {
		return m.TreeStatus
	}
	return nil
}

func (m *Verifiers) GetTryJob() *Verifiers_TryJobVerifier {
	if m != nil {
		return m.TryJob
	}
	return nil
}

func (m *Verifiers) GetDeprecator() *Verifiers_DeprecatorVerifier {
	if m != nil {
		return m.Deprecator
	}
	return nil
}

func (m *Verifiers) GetFake() *Verifiers_FakeVerifier {
	if m != nil {
		return m.Fake
	}
	return nil
}

type Verifiers_GerritCQAbilityVerifier struct {
	// Required. Name of the chrome-infra-auth group, which contains the list of
	// identities authorized to trigger CQ runs on any CLs in this project.
	CommitterList *string `protobuf:"bytes,1,opt,name=committer_list,json=committerList" json:"committer_list,omitempty"`
	// Optional, but strongly recommended. Name of the chrome-infra-auth group,
	// which contains the list of identities authorized to trigger CQ dry run
	// on Gerrit CLs they own (not to be confused with OWNER files) even if CL
	// hasn't been approved.
	// This is usually the same group as tryjob-access.
	DryRunAccessList *string `protobuf:"bytes,4,opt,name=dry_run_access_list,json=dryRunAccessList" json:"dry_run_access_list,omitempty"`
	// Optional. allow_submit_with_open_deps controls how CQ full run behaves
	// when current Gerrit CL has open dependencies (not yet submitted CLs on
	// which *this* CL depends).
	//
	// If set to false (default), CQ will abort full run attempt immediately if
	// open dependencies are detected.
	//
	// If set to true, then CQ will not abort full run and upon passing all
	// other verifiers, CQ will attempt to submit the CL regardless of open
	// dependencies. In turn, if Gerrit project config allows this, Gerrit will
	// execute submit all dependent CLs first and then this CL.
	AllowSubmitWithOpenDeps *bool    `protobuf:"varint,5,opt,name=allow_submit_with_open_deps,json=allowSubmitWithOpenDeps" json:"allow_submit_with_open_deps,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *Verifiers_GerritCQAbilityVerifier) Reset()         { *m = Verifiers_GerritCQAbilityVerifier{} }
func (m *Verifiers_GerritCQAbilityVerifier) String() string { return proto.CompactTextString(m) }
func (*Verifiers_GerritCQAbilityVerifier) ProtoMessage()    {}
func (*Verifiers_GerritCQAbilityVerifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd4f4c435722d01, []int{2, 0}
}

func (m *Verifiers_GerritCQAbilityVerifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Verifiers_GerritCQAbilityVerifier.Unmarshal(m, b)
}
func (m *Verifiers_GerritCQAbilityVerifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Verifiers_GerritCQAbilityVerifier.Marshal(b, m, deterministic)
}
func (m *Verifiers_GerritCQAbilityVerifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Verifiers_GerritCQAbilityVerifier.Merge(m, src)
}
func (m *Verifiers_GerritCQAbilityVerifier) XXX_Size() int {
	return xxx_messageInfo_Verifiers_GerritCQAbilityVerifier.Size(m)
}
func (m *Verifiers_GerritCQAbilityVerifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Verifiers_GerritCQAbilityVerifier.DiscardUnknown(m)
}

var xxx_messageInfo_Verifiers_GerritCQAbilityVerifier proto.InternalMessageInfo

func (m *Verifiers_GerritCQAbilityVerifier) GetCommitterList() string {
	if m != nil && m.CommitterList != nil {
		return *m.CommitterList
	}
	return ""
}

func (m *Verifiers_GerritCQAbilityVerifier) GetDryRunAccessList() string {
	if m != nil && m.DryRunAccessList != nil {
		return *m.DryRunAccessList
	}
	return ""
}

func (m *Verifiers_GerritCQAbilityVerifier) GetAllowSubmitWithOpenDeps() bool {
	if m != nil && m.AllowSubmitWithOpenDeps != nil {
		return *m.AllowSubmitWithOpenDeps
	}
	return false
}

type Verifiers_TreeStatusLgtmVerifier struct {
	// Required. URL of the project tree status app.
	TreeStatusUrl        *string  `protobuf:"bytes,1,opt,name=tree_status_url,json=treeStatusUrl" json:"tree_status_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Verifiers_TreeStatusLgtmVerifier) Reset()         { *m = Verifiers_TreeStatusLgtmVerifier{} }
func (m *Verifiers_TreeStatusLgtmVerifier) String() string { return proto.CompactTextString(m) }
func (*Verifiers_TreeStatusLgtmVerifier) ProtoMessage()    {}
func (*Verifiers_TreeStatusLgtmVerifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd4f4c435722d01, []int{2, 1}
}

func (m *Verifiers_TreeStatusLgtmVerifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Verifiers_TreeStatusLgtmVerifier.Unmarshal(m, b)
}
func (m *Verifiers_TreeStatusLgtmVerifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Verifiers_TreeStatusLgtmVerifier.Marshal(b, m, deterministic)
}
func (m *Verifiers_TreeStatusLgtmVerifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Verifiers_TreeStatusLgtmVerifier.Merge(m, src)
}
func (m *Verifiers_TreeStatusLgtmVerifier) XXX_Size() int {
	return xxx_messageInfo_Verifiers_TreeStatusLgtmVerifier.Size(m)
}
func (m *Verifiers_TreeStatusLgtmVerifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Verifiers_TreeStatusLgtmVerifier.DiscardUnknown(m)
}

var xxx_messageInfo_Verifiers_TreeStatusLgtmVerifier proto.InternalMessageInfo

func (m *Verifiers_TreeStatusLgtmVerifier) GetTreeStatusUrl() string {
	if m != nil && m.TreeStatusUrl != nil {
		return *m.TreeStatusUrl
	}
	return ""
}

type Verifiers_TryJobVerifier struct {
	// Buckets on which tryjobs are triggered/watched.
	Buckets []*Verifiers_TryJobVerifier_Bucket `protobuf:"bytes,1,rep,name=buckets" json:"buckets,omitempty"`
	// Provides project specific trybot retry configuration. This overrides the
	// defaults used in the CQ.
	TryJobRetryConfig    *Verifiers_TryJobVerifier_TryJobRetryConfig `protobuf:"bytes,2,opt,name=try_job_retry_config,json=tryJobRetryConfig" json:"try_job_retry_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *Verifiers_TryJobVerifier) Reset()         { *m = Verifiers_TryJobVerifier{} }
func (m *Verifiers_TryJobVerifier) String() string { return proto.CompactTextString(m) }
func (*Verifiers_TryJobVerifier) ProtoMessage()    {}
func (*Verifiers_TryJobVerifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd4f4c435722d01, []int{2, 2}
}

func (m *Verifiers_TryJobVerifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Verifiers_TryJobVerifier.Unmarshal(m, b)
}
func (m *Verifiers_TryJobVerifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Verifiers_TryJobVerifier.Marshal(b, m, deterministic)
}
func (m *Verifiers_TryJobVerifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Verifiers_TryJobVerifier.Merge(m, src)
}
func (m *Verifiers_TryJobVerifier) XXX_Size() int {
	return xxx_messageInfo_Verifiers_TryJobVerifier.Size(m)
}
func (m *Verifiers_TryJobVerifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Verifiers_TryJobVerifier.DiscardUnknown(m)
}

var xxx_messageInfo_Verifiers_TryJobVerifier proto.InternalMessageInfo

func (m *Verifiers_TryJobVerifier) GetBuckets() []*Verifiers_TryJobVerifier_Bucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

func (m *Verifiers_TryJobVerifier) GetTryJobRetryConfig() *Verifiers_TryJobVerifier_TryJobRetryConfig {
	if m != nil {
		return m.TryJobRetryConfig
	}
	return nil
}

type Verifiers_TryJobVerifier_EquivalentBuilder struct {
	// Required. Bucket name of this builder.
	Bucket *string `protobuf:"bytes,1,opt,name=bucket" json:"bucket,omitempty"`
	// Name of this builder. Defaults to name of the builder it's equivalent
	// to.
	Builder *string `protobuf:"bytes,2,opt,name=builder" json:"builder,omitempty"`
	// Percentage expressing probability of CQ requiring this builder
	// instead of the builder to which this builder is equilvanet to.
	//
	// If not specified, defaults to 50.
	//
	// A choice itself is made deterministicly based on CL alone, hereby
	// all CQ attempts on all patchsets of a given CL will require the same
	// builder, assuming CQ config doesn't change in the mean time.
	//
	// Note that if `owner_whitelist_group` is also specified, the choice over
	// two builders will be made only for CLs owned by whitelisted group.
	//
	// To illustrate, suppose percentage=10. Then,
	//   Without owner_whitelist_group,
	//      ~10% of all CQ attempts will choose this builder.
	//   With owner_whitelist_group set and, suppose, 1/5 of CQ attempts are
	//      ran on CLs owned by this group, then only ~(1/10)*(1/5) or
	//      ~2% of all CQ attempts will choose this builder.
	Percentage *int32 `protobuf:"varint,3,opt,name=percentage" json:"percentage,omitempty"`
	// If specified, limits the builder to CL owners in this group.
	OwnerWhitelistGroup  *string  `protobuf:"bytes,4,opt,name=owner_whitelist_group,json=ownerWhitelistGroup" json:"owner_whitelist_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Verifiers_TryJobVerifier_EquivalentBuilder) Reset() {
	*m = Verifiers_TryJobVerifier_EquivalentBuilder{}
}
func (m *Verifiers_TryJobVerifier_EquivalentBuilder) String() string {
	return proto.CompactTextString(m)
}
func (*Verifiers_TryJobVerifier_EquivalentBuilder) ProtoMessage() {}
func (*Verifiers_TryJobVerifier_EquivalentBuilder) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd4f4c435722d01, []int{2, 2, 0}
}

func (m *Verifiers_TryJobVerifier_EquivalentBuilder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Verifiers_TryJobVerifier_EquivalentBuilder.Unmarshal(m, b)
}
func (m *Verifiers_TryJobVerifier_EquivalentBuilder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Verifiers_TryJobVerifier_EquivalentBuilder.Marshal(b, m, deterministic)
}
func (m *Verifiers_TryJobVerifier_EquivalentBuilder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Verifiers_TryJobVerifier_EquivalentBuilder.Merge(m, src)
}
func (m *Verifiers_TryJobVerifier_EquivalentBuilder) XXX_Size() int {
	return xxx_messageInfo_Verifiers_TryJobVerifier_EquivalentBuilder.Size(m)
}
func (m *Verifiers_TryJobVerifier_EquivalentBuilder) XXX_DiscardUnknown() {
	xxx_messageInfo_Verifiers_TryJobVerifier_EquivalentBuilder.DiscardUnknown(m)
}

var xxx_messageInfo_Verifiers_TryJobVerifier_EquivalentBuilder proto.InternalMessageInfo

func (m *Verifiers_TryJobVerifier_EquivalentBuilder) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

func (m *Verifiers_TryJobVerifier_EquivalentBuilder) GetBuilder() string {
	if m != nil && m.Builder != nil {
		return *m.Builder
	}
	return ""
}

func (m *Verifiers_TryJobVerifier_EquivalentBuilder) GetPercentage() int32 {
	if m != nil && m.Percentage != nil {
		return *m.Percentage
	}
	return 0
}

func (m *Verifiers_TryJobVerifier_EquivalentBuilder) GetOwnerWhitelistGroup() string {
	if m != nil && m.OwnerWhitelistGroup != nil {
		return *m.OwnerWhitelistGroup
	}
	return ""
}

type Verifiers_TryJobVerifier_Builder struct {
	// Name of the builder.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// If true, a fresh build will be required for each CQ attempt.
	//
	// Default is false, meaning CQ may re-use a successful build
	// triggered before current CQ attempt started.
	//
	// This option is typically used for builders which run depot_tools'
	// PRESUBMIT scripts, which are supposed to be quick to run and provide
	// additional OWNERS, lint, etc checks which are useful to run against
	// the latest revision of the CL's target branch.
	DisableReuse *bool `protobuf:"varint,7,opt,name=disable_reuse,json=disableReuse" json:"disable_reuse,omitempty"`
	// Optional name of a builder (aka parent) from the same bucket which will
	// trigger this builder (aka child).
	//
	// If `triggered_by` is not specified (default), CQ will trigger this
	// builder directly.
	//
	// Else, CQ will wait for `triggered_by` (parent) builder to trigger
	// (possibly, indirectly) this (child) builder.
	// Conditions:
	//   * `triggered_by` (parent) builder must set a special property
	//     `triggered_build_ids` upon successful completion with value set
	//     to a list of triggered BuildBucket build IDs,
	//     corresponding to each triggered build. One or more of the IDs must
	//     correspond to this (child) builder, which will then be waited for
	//     by CQ.
	//   * parent->child relationship graph must be a forest (set of a trees).
	//     However, grandparent->parent->child triggering structure isn't well
	//     tested. Please, talk to CQ maintainers to discuss your use case if you
	//     actually need it.
	//
	// Failure/Retry semantics:
	//   * If `triggered_by` (parent) builder succeeds, but doesn't set
	//     the right `triggered_build_ids` s.t. CQ can't find this (child)
	//     builder among triggered builds, then CQ will wait till
	//     TRY_JOB_PENDING_TIMEOUT is reached, currently hardcoded at 2 hours.
	//     TODO(tandrii,sergiyb): improve this.
	//   * If this (child) builder fails and CQ still has retry budget,
	//     CQ will retry a parent builder.
	//
	// For example, given config:
	//   builder { name: "mac_compiler" }
	//   builder { name: "mac_tester_10.12" triggered_by: "mac_compiler" }
	//   builder { name: "mac_tester_10.13" triggered_by: "mac_compiler" }
	// CQ will trigger and wait for "mac_compiler" to succeed. Then, it'll check
	// its `triggered_build_ids` and find which ones correspond to
	// "mac_tester_10.12" and "mac_tester_10.13" and wait for each to complete.
	// If say "mac_tester_10.12" fails, CQ will retry "mac_compiler" and
	// expect it to trigger new builds for "mac_tester_10.12" and
	// "mac_tester_10.13".
	TriggeredBy *string `protobuf:"bytes,2,opt,name=triggered_by,json=triggeredBy" json:"triggered_by,omitempty"`
	// When this field is present, it marks given builder as experimental. It
	// is only executed on a given percentage of the CLs and the outcome does
	// not affect the decicion whether a CL can land or not. This is typically
	// used to test new builders and estimate their capacity requirements.
	ExperimentPercentage *float32 `protobuf:"fixed32,4,opt,name=experiment_percentage,json=experimentPercentage" json:"experiment_percentage,omitempty"`
	// Optionally specified alternative builder for CQ to choose instead.
	// If provided, CQ will choose only one of the equivalent builders as
	// required based purely on given CL and CL's owner and **regardless** of
	// the possibly already completed try jobs.
	//
	// Note: none of the equivalent builders should be part of triggered_by
	//  chain, although CQ may eventually relax this requirement somewhat.
	EquivalentTo *Verifiers_TryJobVerifier_EquivalentBuilder `protobuf:"bytes,5,opt,name=equivalent_to,json=equivalentTo" json:"equivalent_to,omitempty"`
	// Require this builder only if path_regexp matches a file in this CL.
	//
	// This means:
	//   * If specified and no file in a CL matches any of the path_regex,
	//   then CQ will not care about this builder.
	//   * If a file in a CL matches any path_regexp_exclude, then this file
	//   won't be considered when matching path_regexp.
	//
	// If not path_regexp is not specified (default),
	// builder will be used on all CLs, even those which are not modifying any
	// file (just commit description changes).
	// TODO(tandrii): CQ shouldn't process such CLs https://crbug.com/892462,
	// which would allow to change default path_regexp to '.*', ie matching
	// any file.
	//
	// Path must be relative to root of the repo. Path uses Unix / directory
	// separators. The comparison is a full match; the pattern is implicitly
	// anchored with "^" and "$", so there is no need add them.
	//
	// Touching a file means either adding, modifying or removing it.
	//
	// These options currently can not be combined with the following other options:
	//   * experiment_percentage
	//   * triggered_by
	//   * GerritCQAbilityVerifier.allow_submit_with_open_deps
	// If you need to combine them, please talk to CQ owners.
	//
	// Examples:
	//
	//   path_regexp: "third_party/WebKit/.+"
	//     will enable builder for all CLs touching any file in
	//     third_party/WebKit directory, but not directory itself.
	//
	//   path_regexp: "/root/sudo*"
	//     will not match any file because of absolute path.
	//
	//   path_regexp: "all/.+"
	//   path_regexp_exclude: "all/one.txt"
	//     will match a CL which touches at least one file other than
	//     'one.txt' inside all/ directory.
	//
	//   path_regexp_exclude: "one.txt"
	//     will match a CL which touches at least one file other than
	//     'one.txt'. Note, in this case path_regexp defaults to ".*".
	PathRegexp           []string `protobuf:"bytes,6,rep,name=path_regexp,json=pathRegexp" json:"path_regexp,omitempty"`
	PathRegexpExclude    []string `protobuf:"bytes,8,rep,name=path_regexp_exclude,json=pathRegexpExclude" json:"path_regexp_exclude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Verifiers_TryJobVerifier_Builder) Reset()         { *m = Verifiers_TryJobVerifier_Builder{} }
func (m *Verifiers_TryJobVerifier_Builder) String() string { return proto.CompactTextString(m) }
func (*Verifiers_TryJobVerifier_Builder) ProtoMessage()    {}
func (*Verifiers_TryJobVerifier_Builder) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd4f4c435722d01, []int{2, 2, 1}
}

func (m *Verifiers_TryJobVerifier_Builder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Verifiers_TryJobVerifier_Builder.Unmarshal(m, b)
}
func (m *Verifiers_TryJobVerifier_Builder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Verifiers_TryJobVerifier_Builder.Marshal(b, m, deterministic)
}
func (m *Verifiers_TryJobVerifier_Builder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Verifiers_TryJobVerifier_Builder.Merge(m, src)
}
func (m *Verifiers_TryJobVerifier_Builder) XXX_Size() int {
	return xxx_messageInfo_Verifiers_TryJobVerifier_Builder.Size(m)
}
func (m *Verifiers_TryJobVerifier_Builder) XXX_DiscardUnknown() {
	xxx_messageInfo_Verifiers_TryJobVerifier_Builder.DiscardUnknown(m)
}

var xxx_messageInfo_Verifiers_TryJobVerifier_Builder proto.InternalMessageInfo

func (m *Verifiers_TryJobVerifier_Builder) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Verifiers_TryJobVerifier_Builder) GetDisableReuse() bool {
	if m != nil && m.DisableReuse != nil {
		return *m.DisableReuse
	}
	return false
}

func (m *Verifiers_TryJobVerifier_Builder) GetTriggeredBy() string {
	if m != nil && m.TriggeredBy != nil {
		return *m.TriggeredBy
	}
	return ""
}

func (m *Verifiers_TryJobVerifier_Builder) GetExperimentPercentage() float32 {
	if m != nil && m.ExperimentPercentage != nil {
		return *m.ExperimentPercentage
	}
	return 0
}

func (m *Verifiers_TryJobVerifier_Builder) GetEquivalentTo() *Verifiers_TryJobVerifier_EquivalentBuilder {
	if m != nil {
		return m.EquivalentTo
	}
	return nil
}

func (m *Verifiers_TryJobVerifier_Builder) GetPathRegexp() []string {
	if m != nil {
		return m.PathRegexp
	}
	return nil
}

func (m *Verifiers_TryJobVerifier_Builder) GetPathRegexpExclude() []string {
	if m != nil {
		return m.PathRegexpExclude
	}
	return nil
}

type Verifiers_TryJobVerifier_Bucket struct {
	// Name of the Buildbucket's bucket, typically luci.<project>.try.
	// E.g., luci.chromium.try.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Builders on which tryjobs should be triggered.
	Builders             []*Verifiers_TryJobVerifier_Builder `protobuf:"bytes,2,rep,name=builders" json:"builders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *Verifiers_TryJobVerifier_Bucket) Reset()         { *m = Verifiers_TryJobVerifier_Bucket{} }
func (m *Verifiers_TryJobVerifier_Bucket) String() string { return proto.CompactTextString(m) }
func (*Verifiers_TryJobVerifier_Bucket) ProtoMessage()    {}
func (*Verifiers_TryJobVerifier_Bucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd4f4c435722d01, []int{2, 2, 2}
}

func (m *Verifiers_TryJobVerifier_Bucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Verifiers_TryJobVerifier_Bucket.Unmarshal(m, b)
}
func (m *Verifiers_TryJobVerifier_Bucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Verifiers_TryJobVerifier_Bucket.Marshal(b, m, deterministic)
}
func (m *Verifiers_TryJobVerifier_Bucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Verifiers_TryJobVerifier_Bucket.Merge(m, src)
}
func (m *Verifiers_TryJobVerifier_Bucket) XXX_Size() int {
	return xxx_messageInfo_Verifiers_TryJobVerifier_Bucket.Size(m)
}
func (m *Verifiers_TryJobVerifier_Bucket) XXX_DiscardUnknown() {
	xxx_messageInfo_Verifiers_TryJobVerifier_Bucket.DiscardUnknown(m)
}

var xxx_messageInfo_Verifiers_TryJobVerifier_Bucket proto.InternalMessageInfo

func (m *Verifiers_TryJobVerifier_Bucket) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Verifiers_TryJobVerifier_Bucket) GetBuilders() []*Verifiers_TryJobVerifier_Builder {
	if m != nil {
		return m.Builders
	}
	return nil
}

type Verifiers_TryJobVerifier_TryJobRetryConfig struct {
	// Retry quota for a single tryjob.
	TryJobRetryQuota *int32 `protobuf:"varint,1,opt,name=try_job_retry_quota,json=tryJobRetryQuota" json:"try_job_retry_quota,omitempty"`
	// Retry quota for all tryjobs in a CL.
	GlobalRetryQuota *int32 `protobuf:"varint,2,opt,name=global_retry_quota,json=globalRetryQuota" json:"global_retry_quota,omitempty"`
	// The weight assigned to each tryjob failure.
	FailureRetryWeight *int32 `protobuf:"varint,3,opt,name=failure_retry_weight,json=failureRetryWeight" json:"failure_retry_weight,omitempty"`
	// The weight assigned to each transient failure.
	TransientFailureRetryWeight *int32 `protobuf:"varint,4,opt,name=transient_failure_retry_weight,json=transientFailureRetryWeight" json:"transient_failure_retry_weight,omitempty"`
	// The weight assigned to tryjob timeouts.
	TimeoutRetryWeight   *int32   `protobuf:"varint,5,opt,name=timeout_retry_weight,json=timeoutRetryWeight" json:"timeout_retry_weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Verifiers_TryJobVerifier_TryJobRetryConfig) Reset() {
	*m = Verifiers_TryJobVerifier_TryJobRetryConfig{}
}
func (m *Verifiers_TryJobVerifier_TryJobRetryConfig) String() string {
	return proto.CompactTextString(m)
}
func (*Verifiers_TryJobVerifier_TryJobRetryConfig) ProtoMessage() {}
func (*Verifiers_TryJobVerifier_TryJobRetryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd4f4c435722d01, []int{2, 2, 3}
}

func (m *Verifiers_TryJobVerifier_TryJobRetryConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Verifiers_TryJobVerifier_TryJobRetryConfig.Unmarshal(m, b)
}
func (m *Verifiers_TryJobVerifier_TryJobRetryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Verifiers_TryJobVerifier_TryJobRetryConfig.Marshal(b, m, deterministic)
}
func (m *Verifiers_TryJobVerifier_TryJobRetryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Verifiers_TryJobVerifier_TryJobRetryConfig.Merge(m, src)
}
func (m *Verifiers_TryJobVerifier_TryJobRetryConfig) XXX_Size() int {
	return xxx_messageInfo_Verifiers_TryJobVerifier_TryJobRetryConfig.Size(m)
}
func (m *Verifiers_TryJobVerifier_TryJobRetryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Verifiers_TryJobVerifier_TryJobRetryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Verifiers_TryJobVerifier_TryJobRetryConfig proto.InternalMessageInfo

func (m *Verifiers_TryJobVerifier_TryJobRetryConfig) GetTryJobRetryQuota() int32 {
	if m != nil && m.TryJobRetryQuota != nil {
		return *m.TryJobRetryQuota
	}
	return 0
}

func (m *Verifiers_TryJobVerifier_TryJobRetryConfig) GetGlobalRetryQuota() int32 {
	if m != nil && m.GlobalRetryQuota != nil {
		return *m.GlobalRetryQuota
	}
	return 0
}

func (m *Verifiers_TryJobVerifier_TryJobRetryConfig) GetFailureRetryWeight() int32 {
	if m != nil && m.FailureRetryWeight != nil {
		return *m.FailureRetryWeight
	}
	return 0
}

func (m *Verifiers_TryJobVerifier_TryJobRetryConfig) GetTransientFailureRetryWeight() int32 {
	if m != nil && m.TransientFailureRetryWeight != nil {
		return *m.TransientFailureRetryWeight
	}
	return 0
}

func (m *Verifiers_TryJobVerifier_TryJobRetryConfig) GetTimeoutRetryWeight() int32 {
	if m != nil && m.TimeoutRetryWeight != nil {
		return *m.TimeoutRetryWeight
	}
	return 0
}

// DeprecatorVerifier is for internal use in CQ.
type Verifiers_DeprecatorVerifier struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Verifiers_DeprecatorVerifier) Reset()         { *m = Verifiers_DeprecatorVerifier{} }
func (m *Verifiers_DeprecatorVerifier) String() string { return proto.CompactTextString(m) }
func (*Verifiers_DeprecatorVerifier) ProtoMessage()    {}
func (*Verifiers_DeprecatorVerifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd4f4c435722d01, []int{2, 3}
}

func (m *Verifiers_DeprecatorVerifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Verifiers_DeprecatorVerifier.Unmarshal(m, b)
}
func (m *Verifiers_DeprecatorVerifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Verifiers_DeprecatorVerifier.Marshal(b, m, deterministic)
}
func (m *Verifiers_DeprecatorVerifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Verifiers_DeprecatorVerifier.Merge(m, src)
}
func (m *Verifiers_DeprecatorVerifier) XXX_Size() int {
	return xxx_messageInfo_Verifiers_DeprecatorVerifier.Size(m)
}
func (m *Verifiers_DeprecatorVerifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Verifiers_DeprecatorVerifier.DiscardUnknown(m)
}

var xxx_messageInfo_Verifiers_DeprecatorVerifier proto.InternalMessageInfo

// FakeVerifier is for internal use in CQ.
type Verifiers_FakeVerifier struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	EventualState        *string  `protobuf:"bytes,2,opt,name=eventual_state,json=eventualState" json:"eventual_state,omitempty"`
	Delay                *int32   `protobuf:"varint,3,opt,name=delay" json:"delay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Verifiers_FakeVerifier) Reset()         { *m = Verifiers_FakeVerifier{} }
func (m *Verifiers_FakeVerifier) String() string { return proto.CompactTextString(m) }
func (*Verifiers_FakeVerifier) ProtoMessage()    {}
func (*Verifiers_FakeVerifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd4f4c435722d01, []int{2, 4}
}

func (m *Verifiers_FakeVerifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Verifiers_FakeVerifier.Unmarshal(m, b)
}
func (m *Verifiers_FakeVerifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Verifiers_FakeVerifier.Marshal(b, m, deterministic)
}
func (m *Verifiers_FakeVerifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Verifiers_FakeVerifier.Merge(m, src)
}
func (m *Verifiers_FakeVerifier) XXX_Size() int {
	return xxx_messageInfo_Verifiers_FakeVerifier.Size(m)
}
func (m *Verifiers_FakeVerifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Verifiers_FakeVerifier.DiscardUnknown(m)
}

var xxx_messageInfo_Verifiers_FakeVerifier proto.InternalMessageInfo

func (m *Verifiers_FakeVerifier) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Verifiers_FakeVerifier) GetEventualState() string {
	if m != nil && m.EventualState != nil {
		return *m.EventualState
	}
	return ""
}

func (m *Verifiers_FakeVerifier) GetDelay() int32 {
	if m != nil && m.Delay != nil {
		return *m.Delay
	}
	return 0
}

func init() {
	proto.RegisterType((*Config)(nil), "cq.legacy_config.Config")
	proto.RegisterType((*Gerrit)(nil), "cq.legacy_config.Gerrit")
	proto.RegisterType((*Verifiers)(nil), "cq.legacy_config.Verifiers")
	proto.RegisterType((*Verifiers_GerritCQAbilityVerifier)(nil), "cq.legacy_config.Verifiers.GerritCQAbilityVerifier")
	proto.RegisterType((*Verifiers_TreeStatusLgtmVerifier)(nil), "cq.legacy_config.Verifiers.TreeStatusLgtmVerifier")
	proto.RegisterType((*Verifiers_TryJobVerifier)(nil), "cq.legacy_config.Verifiers.TryJobVerifier")
	proto.RegisterType((*Verifiers_TryJobVerifier_EquivalentBuilder)(nil), "cq.legacy_config.Verifiers.TryJobVerifier.EquivalentBuilder")
	proto.RegisterType((*Verifiers_TryJobVerifier_Builder)(nil), "cq.legacy_config.Verifiers.TryJobVerifier.Builder")
	proto.RegisterType((*Verifiers_TryJobVerifier_Bucket)(nil), "cq.legacy_config.Verifiers.TryJobVerifier.Bucket")
	proto.RegisterType((*Verifiers_TryJobVerifier_TryJobRetryConfig)(nil), "cq.legacy_config.Verifiers.TryJobVerifier.TryJobRetryConfig")
	proto.RegisterType((*Verifiers_DeprecatorVerifier)(nil), "cq.legacy_config.Verifiers.DeprecatorVerifier")
	proto.RegisterType((*Verifiers_FakeVerifier)(nil), "cq.legacy_config.Verifiers.FakeVerifier")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/cq/api/config/v1/cq_legacy.proto", fileDescriptor_4fd4f4c435722d01)
}

var fileDescriptor_4fd4f4c435722d01 = []byte{
	// 1101 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdb, 0x6e, 0xdb, 0x46,
	0x13, 0x86, 0x64, 0x5b, 0x92, 0x47, 0x92, 0x6d, 0x6d, 0x94, 0x84, 0xbf, 0x02, 0xe4, 0x57, 0x5d,
	0xa4, 0x10, 0x82, 0x56, 0x4a, 0x14, 0xf4, 0xa2, 0x40, 0x2e, 0x1a, 0x2b, 0x07, 0xa0, 0x0d, 0xd2,
	0x84, 0x4e, 0x1a, 0xa0, 0x37, 0x8b, 0x15, 0x39, 0xa6, 0xb6, 0xe6, 0x71, 0xb9, 0xb4, 0xac, 0x47,
	0x09, 0xfa, 0x0c, 0x7d, 0x8a, 0xdc, 0xf7, 0x99, 0x8a, 0x3d, 0x88, 0x92, 0x2c, 0xd7, 0x6d, 0xee,
	0xb8, 0x33, 0xdf, 0x7c, 0x9c, 0xc3, 0xb7, 0x43, 0xc2, 0xf7, 0x41, 0x32, 0xf4, 0x66, 0x22, 0x89,
	0x78, 0x11, 0x0d, 0x13, 0x11, 0x8c, 0xc2, 0xc2, 0xe3, 0x23, 0x2f, 0x1b, 0xb1, 0x94, 0x8f, 0xbc,
	0x24, 0x3e, 0xe3, 0xc1, 0xe8, 0xe2, 0xf1, 0xc8, 0xcb, 0x68, 0x88, 0x01, 0xf3, 0x16, 0xc3, 0x54,
	0x24, 0x32, 0x21, 0x47, 0x5e, 0x36, 0x34, 0x06, 0x6a, 0x40, 0xc7, 0x7f, 0xec, 0x40, 0x6d, 0xa2,
	0x1f, 0x89, 0x03, 0xf5, 0x0b, 0x14, 0x39, 0x4f, 0x62, 0xa7, 0xd2, 0xaf, 0x0c, 0xf6, 0xdc, 0xe5,
	0x91, 0xdc, 0x85, 0xba, 0x97, 0xd1, 0x98, 0x45, 0xe8, 0x54, 0xfb, 0x95, 0xc1, 0xbe, 0x5b, 0xf3,
	0xb2, 0x37, 0x2c, 0x42, 0xf2, 0x03, 0xec, 0x5f, 0xa0, 0xe0, 0x67, 0x1c, 0x45, 0xee, 0xec, 0xf4,
	0x2b, 0x83, 0xe6, 0xf8, 0xde, 0xf0, 0xea, 0x3b, 0x86, 0xbf, 0x2e, 0x21, 0xee, 0x0a, 0x4d, 0x8e,
	0xa1, 0xed, 0x65, 0x34, 0x97, 0x4c, 0x16, 0x39, 0x2d, 0x44, 0xe8, 0xec, 0x6a, 0xe6, 0xa6, 0x97,
	0x9d, 0x6a, 0xdb, 0x07, 0x11, 0x92, 0x6f, 0x81, 0x78, 0x49, 0x14, 0x71, 0x49, 0xa7, 0x85, 0xc8,
	0x25, 0xf5, 0x31, 0x64, 0x0b, 0xa7, 0xa6, 0x93, 0x3b, 0x32, 0x9e, 0x13, 0xe5, 0x78, 0xae, 0xec,
	0x64, 0x00, 0x47, 0x11, 0xbb, 0xa4, 0xeb, 0x11, 0x4e, 0x5d, 0x63, 0x0f, 0x22, 0x76, 0x39, 0x59,
	0xc1, 0xc9, 0xd7, 0xd0, 0xe6, 0x31, 0x4d, 0x45, 0xe2, 0x17, 0x9e, 0x54, 0xf5, 0x36, 0xfa, 0x95,
	0x41, 0xc3, 0x6d, 0xf1, 0xf8, 0x6d, 0x69, 0x23, 0x8f, 0xa0, 0x16, 0xa0, 0x10, 0x5c, 0x3a, 0x87,
	0xba, 0x30, 0x67, 0xbb, 0xb0, 0x57, 0xda, 0xef, 0x5a, 0x1c, 0xe9, 0x43, 0x2b, 0xe0, 0x92, 0x0a,
	0x4c, 0x13, 0x5d, 0x11, 0xe8, 0x8a, 0x20, 0xe0, 0xd2, 0xc5, 0x34, 0x51, 0x05, 0x0d, 0xe1, 0x96,
	0x2f, 0x18, 0x8f, 0x79, 0x1c, 0xa8, 0xd2, 0x85, 0xa4, 0x92, 0x47, 0xe8, 0xb4, 0x35, 0xb0, 0xb3,
	0x74, 0x9d, 0x2a, 0xcf, 0x7b, 0x1e, 0xe1, 0xf1, 0x1c, 0x6a, 0xe6, 0x1d, 0xe4, 0x21, 0x74, 0xbc,
	0x8c, 0xda, 0xf6, 0xf9, 0x34, 0x64, 0x53, 0x0c, 0xf5, 0x98, 0xf6, 0xdd, 0x43, 0x2f, 0xb3, 0x1d,
	0xf6, 0x5f, 0x2b, 0x33, 0x79, 0x06, 0xf7, 0x7d, 0xb1, 0xa0, 0xa2, 0x88, 0x69, 0x8e, 0x32, 0xa7,
	0xdb, 0x81, 0x55, 0x5d, 0xef, 0xff, 0x7c, 0xb1, 0x70, 0x8b, 0xf8, 0x14, 0x65, 0x3e, 0xd9, 0xa4,
	0x38, 0xfe, 0x7c, 0x00, 0xfb, 0xe5, 0xd8, 0x08, 0x85, 0x8e, 0x29, 0x51, 0x51, 0xb1, 0x29, 0x0f,
	0xb9, 0x5c, 0x38, 0x7b, 0xba, 0x2b, 0x4f, 0x6e, 0x18, 0xb7, 0xed, 0xcf, 0xe4, 0xdd, 0x33, 0x13,
	0xb2, 0x74, 0xb8, 0x87, 0x86, 0x6d, 0x92, 0x59, 0x07, 0x39, 0x85, 0xa6, 0x14, 0x88, 0x56, 0x0e,
	0x3a, 0xbd, 0xe6, 0x78, 0x7c, 0x13, 0xf5, 0x7b, 0x81, 0x68, 0x84, 0xf2, 0x3a, 0x90, 0x51, 0xc9,
	0x0c, 0xb2, 0xb4, 0x93, 0x09, 0xd4, 0xa5, 0x58, 0xd0, 0xdf, 0x93, 0xa9, 0x95, 0xe6, 0xc3, 0x9b,
	0x09, 0x17, 0x3f, 0x25, 0xd3, 0x92, 0xa8, 0x26, 0xf5, 0x99, 0xbc, 0x01, 0xf0, 0x31, 0x15, 0xe8,
	0x31, 0x99, 0x08, 0x2d, 0xbd, 0xe6, 0x78, 0x78, 0x13, 0xcf, 0xf3, 0x12, 0xbd, 0x4a, 0x6a, 0xc5,
	0x40, 0x9e, 0xc2, 0xee, 0x19, 0x3b, 0x47, 0x2d, 0xcc, 0xe6, 0x78, 0x70, 0x13, 0xd3, 0x4b, 0x76,
	0x8e, 0x25, 0x87, 0x8e, 0xea, 0xfd, 0x59, 0x81, 0xbb, 0xff, 0xd0, 0x54, 0xf2, 0x00, 0x0e, 0x8c,
	0xf4, 0x25, 0x0a, 0x1a, 0xf2, 0x5c, 0x5a, 0x79, 0xb4, 0x4b, 0xeb, 0x6b, 0x9e, 0x4b, 0xf2, 0x9d,
	0x92, 0xa0, 0x11, 0x07, 0xf3, 0x3c, 0xcc, 0x73, 0x83, 0x35, 0xb7, 0xef, 0xc8, 0x28, 0xe2, 0x99,
	0x76, 0x68, 0xf8, 0x53, 0xb8, 0xc7, 0xc2, 0x30, 0x99, 0xd3, 0xbc, 0x98, 0xaa, 0x6b, 0x35, 0xe7,
	0x72, 0x46, 0x93, 0x14, 0x63, 0xea, 0x63, 0x9a, 0x6b, 0x11, 0x34, 0xdc, 0xbb, 0x1a, 0x72, 0xaa,
	0x11, 0x1f, 0xb9, 0x9c, 0xfd, 0x92, 0x62, 0xfc, 0x1c, 0xd3, 0xbc, 0xf7, 0x23, 0xdc, 0xb9, 0x7e,
	0x50, 0xe4, 0x1b, 0x38, 0x5c, 0x9b, 0xb8, 0xbe, 0x2e, 0x36, 0xdd, 0xd5, 0x04, 0x3f, 0x88, 0xb0,
	0xf7, 0xb9, 0x01, 0x07, 0x9b, 0xa3, 0x21, 0x3f, 0x43, 0x7d, 0x5a, 0x78, 0xe7, 0x28, 0x73, 0xa7,
	0xd2, 0xdf, 0x19, 0x34, 0xc7, 0x8f, 0xff, 0xfb, 0x5c, 0x87, 0x27, 0x3a, 0xd2, 0x5d, 0x32, 0x90,
	0x08, 0xba, 0x56, 0x24, 0x54, 0xa0, 0x7a, 0x32, 0x04, 0x56, 0x82, 0x4f, 0xbf, 0x80, 0xd9, 0x1c,
	0x5d, 0x45, 0x62, 0x16, 0xaa, 0xdb, 0x91, 0x57, 0x4d, 0xbd, 0x4f, 0x15, 0xe8, 0xbc, 0xc8, 0x0a,
	0x7e, 0xc1, 0x42, 0x8c, 0xe5, 0x49, 0xc1, 0x43, 0x1f, 0x05, 0xb9, 0x03, 0x35, 0x93, 0x8f, 0xed,
	0x81, 0x3d, 0xa9, 0x8d, 0x3c, 0x35, 0x10, 0xbb, 0x77, 0x97, 0x47, 0x72, 0x1f, 0x20, 0x45, 0xe1,
	0x61, 0x2c, 0x59, 0x80, 0x5a, 0xde, 0x7b, 0xee, 0x9a, 0x85, 0x8c, 0xe1, 0x76, 0x32, 0x8f, 0x51,
	0xd0, 0xf9, 0x8c, 0x4b, 0x54, 0x13, 0xa6, 0x81, 0x48, 0x8a, 0xd4, 0xce, 0xf9, 0x96, 0x76, 0x7e,
	0x5c, 0xfa, 0x5e, 0x29, 0x57, 0xef, 0xaf, 0x2a, 0xd4, 0x97, 0x19, 0x11, 0xd8, 0xd5, 0xeb, 0xde,
	0xe4, 0xa3, 0x9f, 0xd5, 0xd6, 0xf4, 0x79, 0xce, 0xa6, 0x21, 0x52, 0x81, 0x45, 0x6e, 0x34, 0xdc,
	0x70, 0x5b, 0xd6, 0xe8, 0x2a, 0x1b, 0xf9, 0x0a, 0x5a, 0x52, 0xf0, 0x20, 0x40, 0x81, 0x3e, 0x9d,
	0x2e, 0x6c, 0xde, 0xcd, 0xd2, 0x76, 0xb2, 0x20, 0x4f, 0xe0, 0x36, 0x5e, 0xa6, 0x28, 0x78, 0x84,
	0xb1, 0xa4, 0x6b, 0x65, 0xa8, 0xdc, 0xaa, 0x6e, 0x77, 0xe5, 0x7c, 0xbb, 0x2a, 0x88, 0x41, 0x1b,
	0xcb, 0xbe, 0x51, 0x99, 0xd8, 0xf5, 0xf3, 0x25, 0x03, 0xda, 0xea, 0xbb, 0xdb, 0x5a, 0x51, 0xbe,
	0x4f, 0xc8, 0xff, 0xa1, 0x99, 0x32, 0x39, 0xa3, 0x02, 0x03, 0xbc, 0x4c, 0x9d, 0x5a, 0x7f, 0x47,
	0x6d, 0x6f, 0x65, 0x72, 0xb5, 0x45, 0x6d, 0xef, 0x35, 0x00, 0xc5, 0x4b, 0x2f, 0x2c, 0x7c, 0x74,
	0x1a, 0x1a, 0xd8, 0x59, 0x01, 0x5f, 0x18, 0x47, 0x2f, 0x84, 0x9a, 0x91, 0xdb, 0xb5, 0xed, 0x7c,
	0x03, 0x0d, 0x3b, 0x4d, 0xb5, 0xf0, 0x76, 0xfe, 0x7d, 0xe1, 0x5d, 0xd1, 0xb1, 0x29, 0xa1, 0xe4,
	0xe8, 0x7d, 0xaa, 0x42, 0x67, 0x4b, 0x83, 0xea, 0xba, 0x6f, 0xea, 0x3b, 0x2b, 0x12, 0xc9, 0xec,
	0x07, 0xfe, 0x68, 0x4d, 0xa0, 0xef, 0x94, 0x5d, 0x7d, 0x71, 0x83, 0x30, 0x99, 0xb2, 0x70, 0x03,
	0x5d, 0x35, 0x68, 0xe3, 0x59, 0x43, 0x3f, 0x82, 0xee, 0x19, 0xe3, 0x61, 0x21, 0xd0, 0xc2, 0xe7,
	0xc8, 0x83, 0x99, 0xb4, 0x7a, 0x24, 0xd6, 0xa7, 0x03, 0x3e, 0x6a, 0x0f, 0x99, 0xc0, 0x7d, 0x29,
	0x58, 0x9c, 0x73, 0x35, 0xc5, 0x6b, 0x63, 0x77, 0x75, 0xec, 0xbd, 0x12, 0xf5, 0x72, 0x9b, 0xe4,
	0x11, 0x74, 0xd5, 0x67, 0x33, 0x29, 0xe4, 0x66, 0xe8, 0x9e, 0x79, 0xad, 0xf5, 0xad, 0x45, 0xf4,
	0xba, 0x40, 0xb6, 0xf7, 0x72, 0x8f, 0x42, 0x6b, 0x7d, 0xc7, 0x5e, 0x3b, 0xa5, 0x07, 0x70, 0x80,
	0x17, 0x18, 0xcb, 0x82, 0x85, 0x7a, 0x57, 0x2d, 0xff, 0x80, 0xda, 0x4b, 0xab, 0x5a, 0x55, 0x48,
	0xba, 0xb0, 0x67, 0x7e, 0x4e, 0x4c, 0xe9, 0xe6, 0x70, 0x72, 0xf8, 0x5b, 0x7b, 0x63, 0x9c, 0x7f,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x57, 0x28, 0xe2, 0xb7, 0x09, 0x00, 0x00,
}
