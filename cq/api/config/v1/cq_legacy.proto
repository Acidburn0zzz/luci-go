// Copyright 2018 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package cq.legacy_config;

option go_package = "legacy_config";

// DEPRECATED. See v2 API cq.proto instead.
//
// This message describes a Commit Queue configuration. The config file cq.cfg
// should be stored in the config directory located on the branch that this CQ
// should commit to.
message Config {
  // Next field number: 16.

  // Required. Version of the config format.
  optional int32 version = 1;

  // DEPRECATED. DO NOT USE.
  optional string cq_name = 2;

  // List of verifiers that verify if the CL is ready to be committed.
  optional Verifiers verifiers = 3;

  // URL of the CQ status app to push updates to.
  optional string cq_status_url = 4;

  // Delay between commit bursts in seconds. Default value is 480.
  optional int32 commit_burst_delay = 6;

  // Maximum number of commits done sequentially, before waiting for
  // commit_burst_delay. Default value is 4.
  optional int32 max_commit_burst = 7;

  // DEPRECATED. NO LONGER SUPPORTED.
  optional bool in_production = 8;

  // Configuration options for Gerrit code review.
  optional Gerrit gerrit = 15;

  // Required. Must be on a Gerrit at Google *.googlesource.com host.
  optional string git_repo_url = 10;

  // If present, the CQ will refrain from processing any commits whose start
  // time is >= this time.
  //
  // This is an UTC RFC3339 (stiptime(tm)) string representing the time.
  // For example, "2017-12-23T15:47:58Z" and Z is required.
  optional string draining_start_time = 13;
}

// Gerrit requires the git_repo_url must be specified on the Gerrit instance,
// and CQ will deduce Gerrit url from it.
// Also, gerrit_cq_ability verifier must be defined in case of Gerrit.
//
// For example, if https://chromium.googlesource.com/infra/infra.git is your
// repo url provided in `git_repo_url` above, then
// https://chromium-review.googlesource.com/#/admin/projects/infra/infra should
// show general properties of your project.
//
// Also,
// https://chromium-review.googlesource.com/#/admin/projects/infra/infra,access
// should show ACLs for refs in your project, but you may need to be admin to
// see it. This will come handy to enable and customize the CQ-related workflows
// for your project.
message Gerrit {
  // DEPRECATED. DO NOT USE.
  optional string cq_verified_label = 1;

  // DEPRECATED. DO NOT USE.
  optional bool dry_run_sets_cq_verified_label = 2;
}

// Verifiers are various types of checks that a Commit Queue performs on a CL.
// All verifiers must pass in order for a CL to be landed. Configuration file
// describes types of verifiers that should be applied to each CL and their
// parameters.
message Verifiers {
  // Next field number: 8.

  // GerritCQAbilityVerifier ensures that a user who triggered
  // this CQ attempt has actually rights to do so based on 3 factors:
  //  * membership of the user in committers & dryrunners group,
  //  * the state of CL/patchset on which CQ is triggered,
  //  * relationship of the user to the CL.
  // This verifier must be specified for Gerrit.
  optional GerritCQAbilityVerifier gerrit_cq_ability = 5;

  // This verifier is used to check tree status before committing a CL. If the
  // tree is closed, then the verifier will wait until it is reopened.
  optional TreeStatusLgtmVerifier tree_status = 2;

  // This verifier triggers a set of builds through BuildBucket.
  //
  // CQ automatically retries failed try-jobs and only allows CL to land if each
  // builder has succeeded in the latest retry.
  // If a given tryjob result is too old (>1 day) it is ignored.
  //
  // Typically, builds from buildbucket are executed on LUCI stack, however, CQ
  // is agnostic to how and where builds are executed.
  optional TryJobVerifier try_job = 3;

  // Deprecator is for internal CQ use only. DO NOT USE IN YOUR cq.cfg.
  optional DeprecatorVerifier deprecator = 6;

  // Fake is for internal CQ use only. DO NOT USE IN YOUR cq.cfg.
  optional FakeVerifier fake = 7;

  message GerritCQAbilityVerifier {
    // Required. Name of the chrome-infra-auth group, which contains the list of
    // identities authorized to trigger CQ runs on any CLs in this project.
    optional string committer_list = 1;

    // Optional, but strongly recommended. Name of the chrome-infra-auth group,
    // which contains the list of identities authorized to trigger CQ dry run
    // on Gerrit CLs they own (not to be confused with OWNER files) even if CL
    // hasn't been approved.
    // This is usually the same group as tryjob-access.
    optional string dry_run_access_list = 4;

    // Optional. allow_submit_with_open_deps controls how CQ full run behaves
    // when current Gerrit CL has open dependencies (not yet submitted CLs on
    // which *this* CL depends).
    //
    // If set to false (default), CQ will abort full run attempt immediately if
    // open dependencies are detected.
    //
    // If set to true, then CQ will not abort full run and upon passing all
    // other verifiers, CQ will attempt to submit the CL regardless of open
    // dependencies. In turn, if Gerrit project config allows this, Gerrit will
    // execute submit all dependent CLs first and then this CL.
    optional bool allow_submit_with_open_deps = 5;
  }

  message TreeStatusLgtmVerifier {
    // Required. URL of the project tree status app.
    optional string tree_status_url = 1;
  }

  message TryJobVerifier {
    message EquivalentBuilder {
      // Required. Bucket name of this builder.
      optional string bucket = 1;
      // Name of this builder. Defaults to name of the builder it's equivalent
      // to.
      optional string builder = 2;
      // Percentage expressing probability of CQ requiring this builder
      // instead of the builder to which this builder is equilvanet to.
      //
      // If not specified, defaults to 50.
      //
      // A choice itself is made deterministicly based on CL alone, hereby
      // all CQ attempts on all patchsets of a given CL will require the same
      // builder, assuming CQ config doesn't change in the mean time.
      //
      // Note that if `owner_whitelist_group` is also specified, the choice over
      // two builders will be made only for CLs owned by whitelisted group.
      //
      // To illustrate, suppose percentage=10. Then,
      //   Without owner_whitelist_group,
      //      ~10% of all CQ attempts will choose this builder.
      //   With owner_whitelist_group set and, suppose, 1/5 of CQ attempts are
      //      ran on CLs owned by this group, then only ~(1/10)*(1/5) or
      //      ~2% of all CQ attempts will choose this builder.
      optional int32 percentage = 3;
      // If specified, limits the builder to CL owners in this group.
      optional string owner_whitelist_group = 4;
    }

    message Builder {
      // Next field number: 9

      // Name of the builder.
      optional string name = 1;

      // If true, a fresh build will be required for each CQ attempt.
      //
      // Default is false, meaning CQ may re-use a successful build
      // triggered before current CQ attempt started.
      //
      // This option is typically used for builders which run depot_tools'
      // PRESUBMIT scripts, which are supposed to be quick to run and provide
      // additional OWNERS, lint, etc checks which are useful to run against
      // the latest revision of the CL's target branch.
      optional bool disable_reuse = 7;

      // Optional name of a builder (aka parent) from the same bucket which will
      // trigger this builder (aka child).
      //
      // If `triggered_by` is not specified (default), CQ will trigger this
      // builder directly.
      //
      // Else, CQ will wait for `triggered_by` (parent) builder to trigger
      // (possibly, indirectly) this (child) builder.
      // Conditions:
      //   * `triggered_by` (parent) builder must set a special property
      //     `triggered_build_ids` upon successful completion with value set
      //     to a list of triggered BuildBucket build IDs,
      //     corresponding to each triggered build. One or more of the IDs must
      //     correspond to this (child) builder, which will then be waited for
      //     by CQ.
      //   * parent->child relationship graph must be a forest (set of a trees).
      //     However, grandparent->parent->child triggering structure isn't well
      //     tested. Please, talk to CQ maintainers to discuss your use case if you
      //     actually need it.
      //
      // Failure/Retry semantics:
      //   * If `triggered_by` (parent) builder succeeds, but doesn't set
      //     the right `triggered_build_ids` s.t. CQ can't find this (child)
      //     builder among triggered builds, then CQ will wait till
      //     TRY_JOB_PENDING_TIMEOUT is reached, currently hardcoded at 2 hours.
      //     TODO(tandrii,sergiyb): improve this.
      //   * If this (child) builder fails and CQ still has retry budget,
      //     CQ will retry a parent builder.
      //
      // For example, given config:
      //   builder { name: "mac_compiler" }
      //   builder { name: "mac_tester_10.12" triggered_by: "mac_compiler" }
      //   builder { name: "mac_tester_10.13" triggered_by: "mac_compiler" }
      // CQ will trigger and wait for "mac_compiler" to succeed. Then, it'll check
      // its `triggered_build_ids` and find which ones correspond to
      // "mac_tester_10.12" and "mac_tester_10.13" and wait for each to complete.
      // If say "mac_tester_10.12" fails, CQ will retry "mac_compiler" and
      // expect it to trigger new builds for "mac_tester_10.12" and
      // "mac_tester_10.13".
      optional string triggered_by = 2;

      // When this field is present, it marks given builder as experimental. It
      // is only executed on a given percentage of the CLs and the outcome does
      // not affect the decicion whether a CL can land or not. This is typically
      // used to test new builders and estimate their capacity requirements.
      optional float experiment_percentage = 4;

      // Optionally specified alternative builder for CQ to choose instead.
      // If provided, CQ will choose only one of the equivalent builders as
      // required based purely on given CL and CL's owner and **regardless** of
      // the possibly already completed try jobs.
      //
      // Note: none of the equivalent builders should be part of triggered_by
      //  chain, although CQ may eventually relax this requirement somewhat.
      optional EquivalentBuilder equivalent_to = 5;

      // Require this builder only if path_regexp matches a file in this CL.
      //
      // This means:
      //   * If specified and no file in a CL matches any of the path_regex,
      //   then CQ will not care about this builder.
      //   * If a file in a CL matches any path_regexp_exclude, then this file
      //   won't be considered when matching path_regexp.
      //
      // If not path_regexp is not specified (default),
      // builder will be used on all CLs, even those which are not modifying any
      // file (just commit description changes).
      // TODO(tandrii): CQ shouldn't process such CLs https://crbug.com/892462,
      // which would allow to change default path_regexp to '.*', ie matching
      // any file.
      //
      // Path must be relative to root of the repo. Path uses Unix / directory
      // separators. The comparison is a full match; the pattern is implicitly
      // anchored with "^" and "$", so there is no need add them.
      //
      // Touching a file means either adding, modifying or removing it.
      //
      // These options currently can not be combined with the following other options:
      //   * experiment_percentage
      //   * triggered_by
      //   * GerritCQAbilityVerifier.allow_submit_with_open_deps
      // If you need to combine them, please talk to CQ owners.
      //
      // Examples:
      //
      //   path_regexp: "third_party/WebKit/.+"
      //     will enable builder for all CLs touching any file in
      //     third_party/WebKit directory, but not directory itself.
      //
      //   path_regexp: "/root/sudo*"
      //     will not match any file because of absolute path.
      //
      //   path_regexp: "all/.+"
      //   path_regexp_exclude: "all/one.txt"
      //     will match a CL which touches at least one file other than
      //     'one.txt' inside all/ directory.
      //
      //   path_regexp_exclude: "one.txt"
      //     will match a CL which touches at least one file other than
      //     'one.txt'. Note, in this case path_regexp defaults to ".*".
      repeated string path_regexp = 6;
      repeated string path_regexp_exclude = 8;
    }

    message Bucket {
      // Name of the Buildbucket's bucket, typically luci.<project>.try.
      // E.g., luci.chromium.try.
      optional string name = 1;

      // Builders on which tryjobs should be triggered.
      repeated Builder builders = 2;
    }

    // Buckets on which tryjobs are triggered/watched.
    repeated Bucket buckets = 1;

    message TryJobRetryConfig {
      // Retry quota for a single tryjob.
      optional int32 try_job_retry_quota = 1;

      // Retry quota for all tryjobs in a CL.
      optional int32 global_retry_quota = 2;

      // The weight assigned to each tryjob failure.
      optional int32 failure_retry_weight = 3;

      // The weight assigned to each transient failure.
      optional int32 transient_failure_retry_weight = 4;

      // The weight assigned to tryjob timeouts.
      optional int32 timeout_retry_weight = 5;
    }

    // Provides project specific trybot retry configuration. This overrides the
    // defaults used in the CQ.
    optional TryJobRetryConfig try_job_retry_config = 2;
  }

  // DeprecatorVerifier is for internal use in CQ.
  message DeprecatorVerifier{}

  // FakeVerifier is for internal use in CQ.
  message FakeVerifier {
    optional string name = 1;
    optional string eventual_state = 2;
    optional int32 delay = 3;
  }
}
