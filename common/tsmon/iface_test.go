// Copyright 2016 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

package tsmon

import (
	"io/ioutil"
	"os"
	"testing"

	"golang.org/x/net/context"

	"github.com/luci/luci-go/common/tsmon/target"

	. "github.com/smartystreets/goconvey/convey"
)

// newTestingFlags returns new Flags that are appropriate for testing. These
// stub out relevant system-local information so that system specifics don't
// affect things.
func newTestingFlags() Flags {
	fl := NewFlags()
	fl.ConfigFile = "" // Stub out so we don't load local system config.
	fl.Endpoint = "file://fake/path"
	fl.Target.SysInfo = &target.SysInfo{
		Hostname: "host-sys",
		Region:   "region-sys",
	}
	return fl
}

func TestInitializeFromFlags(t *testing.T) {
	t.Parallel()

	Convey("Initialize tsmon", t, func() {
		c := WithState(context.Background(), NewState())

		tsmonFlags := newTestingFlags()
		tsmonFlags.Target.TargetType = target.DeviceType
		tsmonFlags.Flush = FlushManual

		Convey("with autogenerated hostnames", func() {
			tsmonFlags.Target.AutoGenHostname = true
			err := InitializeFromFlags(c, &tsmonFlags)
			So(err, ShouldBeNil)
			defer Shutdown(c)

			s := GetState(c).S
			So(s.DefaultTarget(), ShouldHaveSameTypeAs, (*target.NetworkDevice)(nil))
			target := s.DefaultTarget().(*target.NetworkDevice).AsProto()
			So(target.GetHostname(), ShouldEqual, "autogen:host-sys")
			So(target.GetMetro(), ShouldEqual, "region-sys")
		})

		Convey("with predefined autogenerated hostnames (Device)", func() {
			tsmonFlags.Target.AutoGenHostname = true
			tsmonFlags.Target.DeviceHostname = "test-m5"
			err := InitializeFromFlags(c, &tsmonFlags)
			So(err, ShouldBeNil)
			defer Shutdown(c)

			s := GetState(c).S
			So(s.DefaultTarget(), ShouldHaveSameTypeAs, (*target.NetworkDevice)(nil))
			target := s.DefaultTarget().(*target.NetworkDevice).AsProto()
			So(target.GetHostname(), ShouldEqual, "autogen:test-m5")
			So(target.GetMetro(), ShouldEqual, "region-sys")
		})

		Convey("with predefined autogenerated hostnames (Task)", func() {
			tsmonFlags.Target.AutoGenHostname = true
			tsmonFlags.Target.TaskHostname = "test-m5"
			tsmonFlags.Target.TargetType = target.TaskType
			tsmonFlags.Target.TaskServiceName = "test-service"
			tsmonFlags.Target.TaskJobName = "test-job"
			err := InitializeFromFlags(c, &tsmonFlags)
			So(err, ShouldBeNil)
			defer Shutdown(c)

			s := GetState(c).S
			So(s.DefaultTarget(), ShouldHaveSameTypeAs, (*target.Task)(nil))
			target := s.DefaultTarget().(*target.Task).AsProto()
			So(target.GetHostName(), ShouldEqual, "autogen:test-m5")
			So(target.GetDataCenter(), ShouldEqual, "region-sys")
		})

		Convey("with static hostnames", func() {
			err := InitializeFromFlags(c, &tsmonFlags)
			So(err, ShouldBeNil)
			defer Shutdown(c)

			s := GetState(c).S
			So(s.DefaultTarget(), ShouldHaveSameTypeAs, (*target.NetworkDevice)(nil))
			target := s.DefaultTarget().(*target.NetworkDevice).AsProto()
			So(target.GetHostname(), ShouldEqual, "host-sys")
			So(target.GetMetro(), ShouldEqual, "region-sys")
		})

		Convey("with predefined static hostnames (Device)", func() {
			tsmonFlags.Target.DeviceHostname = "host-flag"
			tsmonFlags.Target.DeviceRegion = "region-flag"
			err := InitializeFromFlags(c, &tsmonFlags)
			So(err, ShouldBeNil)
			defer Shutdown(c)

			s := GetState(c).S
			So(s.DefaultTarget(), ShouldHaveSameTypeAs, (*target.NetworkDevice)(nil))
			target := s.DefaultTarget().(*target.NetworkDevice).AsProto()
			So(target.GetHostname(), ShouldEqual, "host-flag")
			So(target.GetMetro(), ShouldEqual, "region-flag")
		})

		Convey("with predefined static hostnames (Task)", func() {
			tsmonFlags.Target.TaskHostname = "host-flag"
			tsmonFlags.Target.TaskRegion = "region-flag"
			tsmonFlags.Target.TargetType = target.TaskType
			tsmonFlags.Target.TaskServiceName = "test-service"
			tsmonFlags.Target.TaskJobName = "test-job"
			err := InitializeFromFlags(c, &tsmonFlags)
			So(err, ShouldBeNil)
			defer Shutdown(c)

			s := GetState(c).S
			So(s.DefaultTarget(), ShouldHaveSameTypeAs, (*target.Task)(nil))
			target := s.DefaultTarget().(*target.Task).AsProto()
			So(target.GetHostName(), ShouldEqual, "host-flag")
			So(target.GetDataCenter(), ShouldEqual, "region-flag")
		})

		Convey("with region in config and hostname in a flag", func() {
			tf, err := ioutil.TempFile("", "config_test")
			if err != nil {
				t.Fail()
			}
			defer tf.Close()
			defer os.Remove(tf.Name())

			tf.WriteString(`
			{"endpoint":         "foo",
			 "credentials":      "bar",
			 "autogen_hostname": true,
			 "hostname":         "host-config",
			 "region":           "region-config"
			}`)
			tf.Sync()
			tsmonFlags.ConfigFile = tf.Name()
			tsmonFlags.Target.DeviceHostname = "host-flag"
			err = InitializeFromFlags(c, &tsmonFlags)
			So(err, ShouldBeNil)
			defer Shutdown(c)

			s := GetState(c).S
			So(s.DefaultTarget(), ShouldHaveSameTypeAs, (*target.NetworkDevice)(nil))
			target := s.DefaultTarget().(*target.NetworkDevice).AsProto()
			So(target.GetHostname(), ShouldEqual, "autogen:host-flag")
			So(target.GetMetro(), ShouldEqual, "region-config")
		})

	})
}
