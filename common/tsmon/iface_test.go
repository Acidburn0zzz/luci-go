// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package tsmon

import (
	"testing"

	"golang.org/x/net/context"

	"github.com/luci/luci-go/common/tsmon/target"

	. "github.com/smartystreets/goconvey/convey"
)

func TestInitializeFromFlags(t *testing.T) {
	c := context.Background()
	Convey("Initialize tsmon", t, func() {
		tsmonFlags := NewFlags()
		tsmonFlags.Endpoint = "file://fake/path"
		tsmonFlags.Target.TargetType = "device"
		tsmonFlags.Target.SysInfo = &target.SysInfo{Hostname: "test-m4", Region: "test-reg"}
		tsmonFlags.Flush = "manual"

		Convey("with autogenerated hostnames", func() {
			tsmonFlags.Target.AutoGenHostname = true
			err := InitializeFromFlags(c, &tsmonFlags)
			So(err, ShouldBeNil)
			defer Shutdown(c)

			s := GetState(c).S
			So(s.DefaultTarget(), ShouldHaveSameTypeAs, (*target.NetworkDevice)(nil))
			target := s.DefaultTarget().(*target.NetworkDevice).AsProto()
			So(target.GetHostname(), ShouldEqual, "autogen:test-m4")
		})

		Convey("with static hostnames", func() {
			err := InitializeFromFlags(c, &tsmonFlags)
			So(err, ShouldBeNil)
			defer Shutdown(c)

			s := GetState(c).S
			So(s.DefaultTarget(), ShouldHaveSameTypeAs, (*target.NetworkDevice)(nil))
			target := s.DefaultTarget().(*target.NetworkDevice).AsProto()
			So(target.GetHostname(), ShouldEqual, "test-m4")
		})

	})
}
