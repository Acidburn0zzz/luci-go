// Code generated by protoc-gen-go.
// source: config.proto
// DO NOT EDIT!

/*
Package svcconfig is a generated protocol buffer package.

It is generated from these files:
	config.proto
	storage.proto
	transport.proto

It has these top-level messages:
	Config
	Coordinator
	Collector
	Storage
	Transport
*/
package svcconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/luci/luci-go/common/proto/google"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Config is the overall instance configuration.
type Config struct {
	// Configuration for the Pub/Sub instances.
	Transport *Transport `protobuf:"bytes,10,opt,name=transport" json:"transport,omitempty"`
	// Configuration for Storage.
	Storage *Storage `protobuf:"bytes,11,opt,name=storage" json:"storage,omitempty"`
	// Coordinator is the coordinator service configuration.
	Coordinator *Coordinator `protobuf:"bytes,20,opt,name=coordinator" json:"coordinator,omitempty"`
	// Collector is the collector fleet configuration.
	Collector *Collector `protobuf:"bytes,21,opt,name=collector" json:"collector,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Config) GetTransport() *Transport {
	if m != nil {
		return m.Transport
	}
	return nil
}

func (m *Config) GetStorage() *Storage {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *Config) GetCoordinator() *Coordinator {
	if m != nil {
		return m.Coordinator
	}
	return nil
}

func (m *Config) GetCollector() *Collector {
	if m != nil {
		return m.Collector
	}
	return nil
}

// Coordinator is the Coordinator service configuration.
type Coordinator struct {
	// Project is the name of the AppEngine Project that the Coordinator belongs
	// to.
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	// The name of the authentication group for administrators.
	AdminAuthGroup string `protobuf:"bytes,10,opt,name=admin_auth_group" json:"admin_auth_group,omitempty"`
	// The name of the authentication group for backend services.
	ServiceAuthGroup string `protobuf:"bytes,11,opt,name=service_auth_group" json:"service_auth_group,omitempty"`
	// A list of origin URLs that are allowed to perform CORS RPC calls.
	RpcAllowOrigins []string `protobuf:"bytes,20,rep,name=rpc_allow_origins" json:"rpc_allow_origins,omitempty"`
	// The name of the archive task queue.
	ArchiveTaskQueue string `protobuf:"bytes,30,opt,name=archive_task_queue" json:"archive_task_queue,omitempty"`
	// The amount of time after a log has been terminated before it is candidate
	// for archival.
	//
	// Archival triggered by this delay will NOT succeed if any log entries are
	// missing from intermediate storage.
	//
	// This should be based on a period of time where it's reasonable to expect
	// that all log messages in the transport have arrived for a given log stream.
	// Since the transport doesn't have to guarantee in-order delivery, this
	// should allow for the case where the terminal log entry arrives before some
	// of the intermediate log entries. This will help avoid triggering
	// archive attempts that are doomed to fail because of standard transport lag.
	ArchiveDelay *google_protobuf.Duration `protobuf:"bytes,31,opt,name=archive_delay" json:"archive_delay,omitempty"`
	// The amount of time before a log stream is candidate for archival regardless
	// of whether or not it's been terminated or complete.
	//
	// This endpoint is a failsafe designed to ensure that log streams with
	// missing records or no terminal record (e.g., Butler crashed) are eventually
	// moved out of intermediate storage.
	//
	// This must be >= `archive_delay`, and should be fairly large (days) to allow
	// for the log stream to complete and for all available log entries to be
	// added to intermediate storage.
	ArchiveDelayMax *google_protobuf.Duration `protobuf:"bytes,32,opt,name=archive_delay_max" json:"archive_delay_max,omitempty"`
	// The name of the Google Storage bucket to archive into.
	ArchiveGsBucket string `protobuf:"bytes,33,opt,name=archive_gs_bucket" json:"archive_gs_bucket,omitempty"`
	// If not empty, a base path to prepend to archival Google Storage paths.
	ArchiveGsBasePath string `protobuf:"bytes,34,opt,name=archive_gs_base_path" json:"archive_gs_base_path,omitempty"`
	// If not zero, the maximum number of stream indices between index entries.
	ArchiveStreamIndexRange int32 `protobuf:"varint,35,opt,name=archive_stream_index_range" json:"archive_stream_index_range,omitempty"`
	// If not zero, the maximum number of prefix indices between index entries.
	ArchivePrefixIndexRange int32 `protobuf:"varint,36,opt,name=archive_prefix_index_range" json:"archive_prefix_index_range,omitempty"`
	// If not zero, the maximum number of log data bytes between index entries.
	ArchiveByteRange int32 `protobuf:"varint,37,opt,name=archive_byte_range" json:"archive_byte_range,omitempty"`
	// The name of the storage cleanup task queue.
	StorageCleanupTaskQueue string `protobuf:"bytes,40,opt,name=storage_cleanup_task_queue" json:"storage_cleanup_task_queue,omitempty"`
	// The amount of time to wait before initiating a storage cleanup task.
	StorageCleanupDelay *google_protobuf.Duration `protobuf:"bytes,41,opt,name=storage_cleanup_delay" json:"storage_cleanup_delay,omitempty"`
}

func (m *Coordinator) Reset()                    { *m = Coordinator{} }
func (m *Coordinator) String() string            { return proto.CompactTextString(m) }
func (*Coordinator) ProtoMessage()               {}
func (*Coordinator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Coordinator) GetArchiveDelay() *google_protobuf.Duration {
	if m != nil {
		return m.ArchiveDelay
	}
	return nil
}

func (m *Coordinator) GetArchiveDelayMax() *google_protobuf.Duration {
	if m != nil {
		return m.ArchiveDelayMax
	}
	return nil
}

func (m *Coordinator) GetStorageCleanupDelay() *google_protobuf.Duration {
	if m != nil {
		return m.StorageCleanupDelay
	}
	return nil
}

// Collector is the set of configuration parameters for Collector instances.
type Collector struct {
	// Workers is the number of ingest workers to run.
	Workers int32 `protobuf:"varint,1,opt,name=workers" json:"workers,omitempty"`
	// The number of transport worker goroutines to run.
	TransportWorkers int32 `protobuf:"varint,2,opt,name=transport_workers" json:"transport_workers,omitempty"`
	// The maximum number of log stream states to cache locally. If <= 0, a
	// default will be used.
	StateCacheSize int32 `protobuf:"varint,3,opt,name=state_cache_size" json:"state_cache_size,omitempty"`
	// The maximum amount of time that cached stream state is valid. If <= 0, a
	// default will be used.
	StateCacheExpiration *google_protobuf.Duration `protobuf:"bytes,4,opt,name=state_cache_expiration" json:"state_cache_expiration,omitempty"`
}

func (m *Collector) Reset()                    { *m = Collector{} }
func (m *Collector) String() string            { return proto.CompactTextString(m) }
func (*Collector) ProtoMessage()               {}
func (*Collector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Collector) GetStateCacheExpiration() *google_protobuf.Duration {
	if m != nil {
		return m.StateCacheExpiration
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "svcconfig.Config")
	proto.RegisterType((*Coordinator)(nil), "svcconfig.Coordinator")
	proto.RegisterType((*Collector)(nil), "svcconfig.Collector")
}

var fileDescriptor0 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x92, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x86, 0x55, 0xca, 0x36, 0xe5, 0x84, 0x69, 0x2c, 0xea, 0x26, 0xb7, 0x42, 0x63, 0x64, 0x20,
	0x86, 0x90, 0x32, 0x04, 0x5c, 0xc0, 0x75, 0x79, 0x03, 0xb8, 0xb7, 0x4e, 0x9d, 0xd3, 0xd4, 0x34,
	0x8d, 0x83, 0xed, 0x74, 0x1d, 0xcf, 0xc0, 0xa3, 0xf0, 0x6c, 0x3c, 0x03, 0xae, 0x93, 0x74, 0x1e,
	0x5c, 0xf4, 0xd2, 0xfe, 0xfe, 0xdf, 0xe7, 0x9c, 0xff, 0x18, 0x9e, 0x08, 0x55, 0xcd, 0x65, 0x91,
	0xd5, 0x5a, 0x59, 0x95, 0x44, 0x66, 0x2d, 0xda, 0x8b, 0xc9, 0x89, 0xd5, 0x58, 0x99, 0x5a, 0x69,
	0xdb, 0xb2, 0xc9, 0xb1, 0xb1, 0x4a, 0x63, 0x41, 0xdd, 0xf1, 0xa2, 0x50, 0xaa, 0x28, 0xe9, 0xc6,
	0x9f, 0x66, 0xcd, 0xfc, 0x26, 0x6f, 0x34, 0x5a, 0xa9, 0xaa, 0x96, 0xa7, 0xbf, 0x07, 0x70, 0x38,
	0xf5, 0x4f, 0x25, 0xaf, 0x21, 0xda, 0x3d, 0xc6, 0xe0, 0x72, 0x70, 0x1d, 0xbf, 0x1f, 0x65, 0xbb,
	0x4a, 0xd9, 0xb7, 0x9e, 0x25, 0x57, 0x70, 0xd4, 0x15, 0x61, 0xb1, 0x97, 0x25, 0x81, 0xec, 0x6b,
	0x4b, 0x92, 0xb7, 0x10, 0x0b, 0xa5, 0x74, 0x2e, 0x2b, 0x74, 0x37, 0x6c, 0xe4, 0x85, 0xe7, 0x81,
	0x70, 0x7a, 0x4f, 0xb7, 0xa5, 0x85, 0x2a, 0x4b, 0x12, 0x5b, 0xe9, 0xd9, 0x7f, 0xa5, 0xa7, 0x3d,
	0x4b, 0xff, 0x0c, 0x21, 0x0e, 0x8d, 0x27, 0x70, 0xe4, 0xe6, 0xf8, 0xee, 0x20, 0x1b, 0x38, 0x5b,
	0x94, 0x30, 0x78, 0x8a, 0xf9, 0x4a, 0x56, 0x1c, 0x1b, 0xbb, 0xe0, 0x85, 0x56, 0x4d, 0xed, 0x67,
	0x89, 0x92, 0x09, 0x24, 0x86, 0xf4, 0x5a, 0x0a, 0x0a, 0x59, 0xec, 0xd9, 0x18, 0x4e, 0x75, 0x2d,
	0x38, 0x96, 0xa5, 0xba, 0xe5, 0x4a, 0xcb, 0x42, 0x56, 0xc6, 0xb5, 0x3c, 0x6c, 0x6d, 0xa8, 0xc5,
	0x42, 0xae, 0x89, 0x5b, 0x34, 0x4b, 0xfe, 0xa3, 0xa1, 0x86, 0xd8, 0x85, 0xb7, 0xbd, 0x83, 0xe3,
	0x9e, 0xe5, 0x54, 0xe2, 0x1d, 0x7b, 0xee, 0x5b, 0x1f, 0x67, 0x6d, 0xe8, 0x59, 0x1f, 0x7a, 0xf6,
	0xa5, 0x0b, 0x3d, 0xf9, 0x08, 0xa7, 0x0f, 0x1c, 0x7c, 0x85, 0x1b, 0x76, 0xb9, 0xcf, 0x35, 0xbe,
	0x77, 0x15, 0x86, 0xcf, 0x1a, 0xb1, 0x24, 0xcb, 0x5e, 0xf8, 0x16, 0x9e, 0xc1, 0x28, 0x44, 0x68,
	0x88, 0xd7, 0x68, 0x17, 0x2c, 0xf5, 0x34, 0x85, 0x49, 0x4f, 0x8d, 0xd5, 0x84, 0x2b, 0x2e, 0xab,
	0x9c, 0x36, 0xdc, 0xad, 0xd2, 0x2d, 0xef, 0xca, 0x69, 0x0e, 0x42, 0x4d, 0xad, 0x69, 0x2e, 0x37,
	0x0f, 0x34, 0x2f, 0xbd, 0x26, 0x08, 0x61, 0x76, 0x67, 0xa9, 0x63, 0xaf, 0x7a, 0x7f, 0xf7, 0x1b,
	0xb8, 0x28, 0x09, 0xab, 0xa6, 0x0e, 0x83, 0xba, 0xf6, 0x7d, 0x7c, 0x82, 0xb3, 0x7f, 0x35, 0x6d,
	0x60, 0x6f, 0xf6, 0x8c, 0x9e, 0xfe, 0x1a, 0x40, 0xb4, 0x5b, 0xff, 0x76, 0xdd, 0xb7, 0x4a, 0x2f,
	0x49, 0x1b, 0xbf, 0xee, 0x83, 0x6d, 0x32, 0xbb, 0x3f, 0xcb, 0x7b, 0xf4, 0xc8, 0x23, 0xf7, 0x13,
	0x8c, 0x45, 0xd7, 0xac, 0x40, 0xb1, 0x70, 0xf3, 0xcb, 0x9f, 0xc4, 0x86, 0x9e, 0x7c, 0x86, 0xf3,
	0x90, 0xd0, 0xa6, 0x96, 0x6d, 0x35, 0xf6, 0x78, 0x4f, 0x3b, 0xb3, 0x43, 0x7f, 0xf5, 0xe1, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x6f, 0x58, 0xf2, 0x90, 0x03, 0x00, 0x00,
}
