// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/common/proto/git/commit.proto

/*
Package git is a generated protocol buffer package.

It is generated from these files:
	go.chromium.org/luci/common/proto/git/commit.proto

It has these top-level messages:
	Commit
*/
package git

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Commit_TreeDiff_ChangeType int32

const (
	Commit_TreeDiff_ADD    Commit_TreeDiff_ChangeType = 0
	Commit_TreeDiff_COPY   Commit_TreeDiff_ChangeType = 1
	Commit_TreeDiff_DELETE Commit_TreeDiff_ChangeType = 2
	Commit_TreeDiff_MODIFY Commit_TreeDiff_ChangeType = 3
	Commit_TreeDiff_RENAME Commit_TreeDiff_ChangeType = 4
)

var Commit_TreeDiff_ChangeType_name = map[int32]string{
	0: "ADD",
	1: "COPY",
	2: "DELETE",
	3: "MODIFY",
	4: "RENAME",
}
var Commit_TreeDiff_ChangeType_value = map[string]int32{
	"ADD":    0,
	"COPY":   1,
	"DELETE": 2,
	"MODIFY": 3,
	"RENAME": 4,
}

func (x Commit_TreeDiff_ChangeType) String() string {
	return proto.EnumName(Commit_TreeDiff_ChangeType_name, int32(x))
}
func (Commit_TreeDiff_ChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1, 0}
}

// Commit is a single parsed commit as represented in a git log or git show
// expression.
type Commit struct {
	// The sha1 of the commit.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The sha1 of the tree for this commit.
	Tree []byte `protobuf:"bytes,2,opt,name=tree,proto3" json:"tree,omitempty"`
	// The sha1's of each of this commits' parents.
	Parents   [][]byte     `protobuf:"bytes,3,rep,name=parents,proto3" json:"parents,omitempty"`
	Author    *Commit_User `protobuf:"bytes,4,opt,name=author" json:"author,omitempty"`
	Committer *Commit_User `protobuf:"bytes,5,opt,name=committer" json:"committer,omitempty"`
	// This is the entire unaltered message body.
	Message  string             `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
	TreeDiff []*Commit_TreeDiff `protobuf:"bytes,7,rep,name=tree_diff,json=treeDiff" json:"tree_diff,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Commit) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Commit) GetTree() []byte {
	if m != nil {
		return m.Tree
	}
	return nil
}

func (m *Commit) GetParents() [][]byte {
	if m != nil {
		return m.Parents
	}
	return nil
}

func (m *Commit) GetAuthor() *Commit_User {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Commit) GetCommitter() *Commit_User {
	if m != nil {
		return m.Committer
	}
	return nil
}

func (m *Commit) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Commit) GetTreeDiff() []*Commit_TreeDiff {
	if m != nil {
		return m.TreeDiff
	}
	return nil
}

// User represents the (name, email, timestamp) Commit header for author and/or
// commtter.
type Commit_User struct {
	Name  string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Email string                     `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Time  *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
}

func (m *Commit_User) Reset()                    { *m = Commit_User{} }
func (m *Commit_User) String() string            { return proto.CompactTextString(m) }
func (*Commit_User) ProtoMessage()               {}
func (*Commit_User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Commit_User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Commit_User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Commit_User) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

// Each TreeDiff represents a single file that's changed between this commit
// and the "previous" commit, where "previous" depends on the context of how
// this Commit object was produced (i.e. the specific `git log` invocation, or
// similar command).
//
// Note that these are an artifact of the `git log` expression, not of the
// commit itself (since git log has different ways that it could sort the
// commits in the log, and thus different ways it could calculate these
// diffs). In particular, you should avoid caching the TreeDiff data using
// only the Commit.id as the key.
//
// The old_* fields correspond to the matching file in the previous commit (in
// the case of COPY/DELETE/MODIFY/RENAME), telling its blob hash, file mode
// and path name.
//
// The new_* fields correspond to the matching file in this commit (in the
// case of ADD/COPY/MODIFY/RENAME), telling its blob hash, file mode and path
// name.
type Commit_TreeDiff struct {
	// How this file changed.
	Type    Commit_TreeDiff_ChangeType `protobuf:"varint,1,opt,name=type,enum=git.Commit_TreeDiff_ChangeType" json:"type,omitempty"`
	OldId   []byte                     `protobuf:"bytes,2,opt,name=old_id,json=oldId,proto3" json:"old_id,omitempty"`
	OldMode uint32                     `protobuf:"varint,3,opt,name=old_mode,json=oldMode" json:"old_mode,omitempty"`
	OldPath string                     `protobuf:"bytes,4,opt,name=old_path,json=oldPath" json:"old_path,omitempty"`
	NewId   []byte                     `protobuf:"bytes,5,opt,name=new_id,json=newId,proto3" json:"new_id,omitempty"`
	NewMode uint32                     `protobuf:"varint,6,opt,name=new_mode,json=newMode" json:"new_mode,omitempty"`
	NewPath string                     `protobuf:"bytes,7,opt,name=new_path,json=newPath" json:"new_path,omitempty"`
}

func (m *Commit_TreeDiff) Reset()                    { *m = Commit_TreeDiff{} }
func (m *Commit_TreeDiff) String() string            { return proto.CompactTextString(m) }
func (*Commit_TreeDiff) ProtoMessage()               {}
func (*Commit_TreeDiff) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *Commit_TreeDiff) GetType() Commit_TreeDiff_ChangeType {
	if m != nil {
		return m.Type
	}
	return Commit_TreeDiff_ADD
}

func (m *Commit_TreeDiff) GetOldId() []byte {
	if m != nil {
		return m.OldId
	}
	return nil
}

func (m *Commit_TreeDiff) GetOldMode() uint32 {
	if m != nil {
		return m.OldMode
	}
	return 0
}

func (m *Commit_TreeDiff) GetOldPath() string {
	if m != nil {
		return m.OldPath
	}
	return ""
}

func (m *Commit_TreeDiff) GetNewId() []byte {
	if m != nil {
		return m.NewId
	}
	return nil
}

func (m *Commit_TreeDiff) GetNewMode() uint32 {
	if m != nil {
		return m.NewMode
	}
	return 0
}

func (m *Commit_TreeDiff) GetNewPath() string {
	if m != nil {
		return m.NewPath
	}
	return ""
}

func init() {
	proto.RegisterType((*Commit)(nil), "git.Commit")
	proto.RegisterType((*Commit_User)(nil), "git.Commit.User")
	proto.RegisterType((*Commit_TreeDiff)(nil), "git.Commit.TreeDiff")
	proto.RegisterEnum("git.Commit_TreeDiff_ChangeType", Commit_TreeDiff_ChangeType_name, Commit_TreeDiff_ChangeType_value)
}

func init() { proto.RegisterFile("go.chromium.org/luci/common/proto/git/commit.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x6e, 0x9b, 0x40,
	0x10, 0x86, 0x6b, 0x83, 0xb1, 0x99, 0xa4, 0x11, 0x5a, 0xa5, 0x12, 0xf5, 0x25, 0x28, 0x27, 0x4e,
	0x8b, 0xea, 0x3c, 0x41, 0x64, 0xa8, 0x14, 0xa9, 0x6e, 0xa2, 0x95, 0x7b, 0xc8, 0x29, 0x25, 0xde,
	0x01, 0x56, 0x62, 0x59, 0x04, 0x6b, 0x59, 0x79, 0x99, 0x3e, 0x63, 0x1f, 0xa1, 0xda, 0x5d, 0xa3,
	0xf4, 0xd0, 0xde, 0x66, 0x67, 0xfe, 0xfd, 0xe6, 0x9f, 0x1f, 0x36, 0xb5, 0xa2, 0x87, 0x66, 0x50,
	0x52, 0x1c, 0x25, 0x55, 0x43, 0x9d, 0xb5, 0xc7, 0x83, 0xc8, 0x0e, 0x4a, 0x4a, 0xd5, 0x65, 0xfd,
	0xa0, 0xb4, 0xca, 0x6a, 0xa1, 0x6d, 0x43, 0x68, 0x6a, 0x1b, 0xc4, 0xab, 0x85, 0x5e, 0xdf, 0xd4,
	0x4a, 0xd5, 0x2d, 0x3a, 0xcd, 0xeb, 0xb1, 0xca, 0xb4, 0x90, 0x38, 0xea, 0x52, 0xf6, 0x4e, 0x75,
	0xfb, 0xdb, 0x87, 0x60, 0x6b, 0xbf, 0x91, 0x2b, 0x98, 0x0b, 0x1e, 0xcf, 0x92, 0x59, 0x7a, 0xc9,
	0xe6, 0x82, 0x13, 0x02, 0xbe, 0x1e, 0x10, 0xe3, 0xb9, 0xed, 0xd8, 0x9a, 0xc4, 0xb0, 0xec, 0xcb,
	0x01, 0x3b, 0x3d, 0xc6, 0x5e, 0xe2, 0xa5, 0x97, 0x6c, 0x7a, 0x92, 0x14, 0x82, 0xf2, 0xa8, 0x1b,
	0x35, 0xc4, 0x7e, 0x32, 0x4b, 0x2f, 0x36, 0x11, 0xad, 0x85, 0xa6, 0x0e, 0x4d, 0x7f, 0x8c, 0x38,
	0xb0, 0xf3, 0x9c, 0x50, 0x08, 0x9d, 0x51, 0x8d, 0x43, 0xbc, 0xf8, 0x8f, 0xf8, 0x5d, 0x62, 0x76,
	0x4a, 0x1c, 0xc7, 0xb2, 0xc6, 0x38, 0x48, 0x66, 0x69, 0xc8, 0xa6, 0x27, 0xf9, 0x02, 0xa1, 0x71,
	0xf5, 0xc2, 0x45, 0x55, 0xc5, 0xcb, 0xc4, 0x4b, 0x2f, 0x36, 0xd7, 0x7f, 0x93, 0xf6, 0x03, 0x62,
	0x2e, 0xaa, 0x8a, 0xad, 0xf4, 0xb9, 0x5a, 0xff, 0x04, 0xdf, 0xf0, 0xcd, 0x71, 0x5d, 0x29, 0xd1,
	0x9e, 0x1b, 0x32, 0x5b, 0x93, 0x6b, 0x58, 0xa0, 0x2c, 0x45, 0x6b, 0x2f, 0x0e, 0x99, 0x7b, 0x10,
	0x0a, 0xbe, 0x09, 0x2d, 0xf6, 0xac, 0xd3, 0x35, 0x75, 0x89, 0xd2, 0x29, 0x51, 0xba, 0x9f, 0x12,
	0x65, 0x56, 0xb7, 0xfe, 0x35, 0x87, 0xd5, 0xb4, 0x98, 0xdc, 0x81, 0xaf, 0xdf, 0x7a, 0xb7, 0xe6,
	0x6a, 0x73, 0xf3, 0x2f, 0x73, 0x74, 0xdb, 0x94, 0x5d, 0x8d, 0xfb, 0xb7, 0x1e, 0x99, 0x15, 0x93,
	0x4f, 0x10, 0xa8, 0x96, 0xbf, 0x08, 0x7e, 0x8e, 0x7e, 0xa1, 0x5a, 0xfe, 0xc0, 0xc9, 0x67, 0x58,
	0x99, 0xb6, 0x54, 0xdc, 0x99, 0xf9, 0xc8, 0x96, 0xaa, 0xe5, 0x3b, 0xc5, 0x71, 0x1a, 0xf5, 0xa5,
	0x6e, 0x6c, 0xfc, 0xa1, 0x1d, 0x3d, 0x95, 0xba, 0x31, 0xb0, 0x0e, 0x4f, 0x06, 0xb6, 0x70, 0xb0,
	0x0e, 0x4f, 0x0e, 0x66, 0xda, 0x16, 0x16, 0x38, 0x58, 0x87, 0xa7, 0x09, 0x66, 0x46, 0x16, 0xb6,
	0x74, 0xb0, 0x0e, 0x4f, 0x06, 0x76, 0xbb, 0x05, 0x78, 0x77, 0x4b, 0x96, 0xe0, 0xdd, 0xe7, 0x79,
	0xf4, 0x81, 0xac, 0xc0, 0xdf, 0x3e, 0x3e, 0x3d, 0x47, 0x33, 0x02, 0x10, 0xe4, 0xc5, 0xb7, 0x62,
	0x5f, 0x44, 0x73, 0x53, 0xef, 0x1e, 0xf3, 0x87, 0xaf, 0xcf, 0x91, 0x67, 0x6a, 0x56, 0x7c, 0xbf,
	0xdf, 0x15, 0x91, 0xff, 0x1a, 0xd8, 0xe8, 0xee, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xff, 0x29,
	0x24, 0x10, 0xd5, 0x02, 0x00, 0x00,
}
