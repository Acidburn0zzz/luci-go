// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/common/proto/gerrit/gerrit.proto

/*
Package gerrit is a generated protocol buffer package.

It is generated from these files:
	go.chromium.org/luci/common/proto/gerrit/gerrit.proto

It has these top-level messages:
	GetChangeRequest
	CheckAccessRequest
	CheckAccessResponse
	AccountInfo
	ChangeInfo
*/
package gerrit

import prpc "go.chromium.org/luci/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Specifies what extra information to include in the response.
//
// Source of truth:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#query-options
type QueryOption int32

const (
	QueryOption_OPTION_UNSPECIFIED QueryOption = 0
	// A summary of each label required for submit, and approvers that have
	// granted (or rejected) with that label.
	QueryOption_LABELS QueryOption = 1
	// Detailed label information, including numeric values of all existing
	// approvals, recognized label values, values permitted to be set by the
	// current user, all reviewers by state, and reviewers that may be removed by
	// the current user.
	QueryOption_DETAILED_LABELS QueryOption = 2
	// Describe the current revision (patch set) of the change, including the
	// commit SHA-1 and URLs to fetch from.
	QueryOption_CURRENT_REVISION QueryOption = 4
	// Describe all revisions, not just current.
	QueryOption_ALL_REVISIONS QueryOption = 8
	// Parse and output all header fields from the commit object, including
	// message. Only valid when the CURRENT_REVISION or ALL_REVISIONS option is
	// selected.
	QueryOption_CURRENT_COMMIT QueryOption = 16
	// Parse and output all header fields from the output revisions. If only
	// CURRENT_REVISION was requested then only the current revision’s commit data
	// will be output.
	QueryOption_ALL_COMMITS QueryOption = 32
	// List files modified by the commit and magic files, including basic line
	// counts inserted/deleted per file. Only valid when the CURRENT_REVISION or
	// ALL_REVISIONS option is selected.
	QueryOption_CURRENT_FILES QueryOption = 64
	// List files modified by the commit and magic files, including basic line
	// counts inserted/deleted per file. If only the CURRENT_REVISION was
	// requested then only that commit’s modified files will be output.
	QueryOption_ALL_FILES QueryOption = 128
	// Include _account_id, email and username fields when referencing accounts.
	QueryOption_DETAILED_ACCOUNTS QueryOption = 256
	// Include updates to reviewers set as ReviewerUpdateInfo entities.
	QueryOption_REVIEWER_UPDATES QueryOption = 512
	// Include messages associated with the change.
	QueryOption_MESSAGES QueryOption = 1024
	// Include information on available actions for the change and its current
	// revision. Ignored if the caller is not authenticated.
	QueryOption_CURRENT_ACTIONS QueryOption = 2048
	// Include information on available change actions for the change. Ignored if
	// the caller is not authenticated.
	QueryOption_CHANGE_ACTIONS QueryOption = 4096
	// Include the reviewed field if all of the following are true:
	// - the change is open
	// - the caller is authenticated
	// - the caller has commented on the change more recently than the last update
	//   from the change owner, i.e. this change would show up in the results of
	//   reviewedby:self.
	QueryOption_REVIEWED QueryOption = 8192
	// Skip the mergeable field in ChangeInfo. For fast moving projects, this
	// field must be recomputed often, which is slow for projects with big trees.
	QueryOption_SKIP_MERGEABLE QueryOption = 16384
	// Include the submittable field in ChangeInfo, which can be used to tell if
	// the change is reviewed and ready for submit.
	QueryOption_SUBMITTABLE QueryOption = 32768
	// Include the web_links field in CommitInfo, therefore only valid in
	// combination with CURRENT_COMMIT or ALL_COMMITS.
	QueryOption_WEB_LINKS QueryOption = 65536
	// Include potential problems with the change.
	QueryOption_CHECK QueryOption = 131072
	// Include the full commit message with Gerrit-specific commit footers in the
	// RevisionInfo.
	QueryOption_COMMIT_FOOTERS QueryOption = 262144
	// Include push certificate information in the RevisionInfo. Ignored if signed
	// push is not enabled on the server.
	QueryOption_PUSH_CERTIFICATES QueryOption = 524288
	// Include references to external tracking systems as TrackingIdInfo.
	QueryOption_TRACKING_IDS QueryOption = 1048576
	// Include the commands field in the FetchInfo for revisions. Only valid when
	// the CURRENT_REVISION or ALL_REVISIONS option is selected.
	QueryOption_DOWNLOAD_COMMANDS QueryOption = 2097152
)

var QueryOption_name = map[int32]string{
	0:       "OPTION_UNSPECIFIED",
	1:       "LABELS",
	2:       "DETAILED_LABELS",
	4:       "CURRENT_REVISION",
	8:       "ALL_REVISIONS",
	16:      "CURRENT_COMMIT",
	32:      "ALL_COMMITS",
	64:      "CURRENT_FILES",
	128:     "ALL_FILES",
	256:     "DETAILED_ACCOUNTS",
	512:     "REVIEWER_UPDATES",
	1024:    "MESSAGES",
	2048:    "CURRENT_ACTIONS",
	4096:    "CHANGE_ACTIONS",
	8192:    "REVIEWED",
	16384:   "SKIP_MERGEABLE",
	32768:   "SUBMITTABLE",
	65536:   "WEB_LINKS",
	131072:  "CHECK",
	262144:  "COMMIT_FOOTERS",
	524288:  "PUSH_CERTIFICATES",
	1048576: "TRACKING_IDS",
	2097152: "DOWNLOAD_COMMANDS",
}
var QueryOption_value = map[string]int32{
	"OPTION_UNSPECIFIED": 0,
	"LABELS":             1,
	"DETAILED_LABELS":    2,
	"CURRENT_REVISION":   4,
	"ALL_REVISIONS":      8,
	"CURRENT_COMMIT":     16,
	"ALL_COMMITS":        32,
	"CURRENT_FILES":      64,
	"ALL_FILES":          128,
	"DETAILED_ACCOUNTS":  256,
	"REVIEWER_UPDATES":   512,
	"MESSAGES":           1024,
	"CURRENT_ACTIONS":    2048,
	"CHANGE_ACTIONS":     4096,
	"REVIEWED":           8192,
	"SKIP_MERGEABLE":     16384,
	"SUBMITTABLE":        32768,
	"WEB_LINKS":          65536,
	"CHECK":              131072,
	"COMMIT_FOOTERS":     262144,
	"PUSH_CERTIFICATES":  524288,
	"TRACKING_IDS":       1048576,
	"DOWNLOAD_COMMANDS":  2097152,
}

func (x QueryOption) String() string {
	return proto.EnumName(QueryOption_name, int32(x))
}
func (QueryOption) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CheckAccessResponse_Status int32

const (
	// ALLOWED means user has the permission being checked.
	CheckAccessResponse_ALLOWED CheckAccessResponse_Status = 0
	// FORBIDDEN means user does not have the permission being checked.
	CheckAccessResponse_FORBIDDEN CheckAccessResponse_Status = 1
	// PROJECT_NOT_FOUND means project doesn't exist.
	CheckAccessResponse_PROJECT_NOT_FOUND CheckAccessResponse_Status = 2
)

var CheckAccessResponse_Status_name = map[int32]string{
	0: "ALLOWED",
	1: "FORBIDDEN",
	2: "PROJECT_NOT_FOUND",
}
var CheckAccessResponse_Status_value = map[string]int32{
	"ALLOWED":           0,
	"FORBIDDEN":         1,
	"PROJECT_NOT_FOUND": 2,
}

func (x CheckAccessResponse_Status) String() string {
	return proto.EnumName(CheckAccessResponse_Status_name, int32(x))
}
func (CheckAccessResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 0}
}

type GetChangeRequest struct {
	// Change number.
	Number int64 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	// What to include in the response.
	Options []QueryOption `protobuf:"varint,2,rep,packed,name=options,enum=gerrit.QueryOption" json:"options,omitempty"`
}

func (m *GetChangeRequest) Reset()                    { *m = GetChangeRequest{} }
func (m *GetChangeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetChangeRequest) ProtoMessage()               {}
func (*GetChangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetChangeRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *GetChangeRequest) GetOptions() []QueryOption {
	if m != nil {
		return m.Options
	}
	return nil
}

// Request message for gerrit.CheckAccess.
type CheckAccessRequest struct {
	// Gerrit project, e.g. "chromium/src" part in
	// https://chromium.googlesource.com/chromium/src/+/master
	// Required.
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	// The ref for which to check access.
	// Required for most permissions.
	Ref string `protobuf:"bytes,2,opt,name=ref" json:"ref,omitempty"`
	// Gerrit permission.
	//
	// Frequently checked permissions are:
	//  * read
	//  * push
	//  * label-<Label>-<Name> (e.g., label-Code-Review)
	//  * submit
	// For others, consult Gerrit docs:
	// https://gerrit-review.googlesource.com/Documentation/access-control.html#access_categories
	//
	// Required.
	Permission string `protobuf:"bytes,3,opt,name=permission" json:"permission,omitempty"`
	// Gerrit account identifier such as email or account_id.
	Account string `protobuf:"bytes,4,opt,name=account" json:"account,omitempty"`
}

func (m *CheckAccessRequest) Reset()                    { *m = CheckAccessRequest{} }
func (m *CheckAccessRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckAccessRequest) ProtoMessage()               {}
func (*CheckAccessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CheckAccessRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *CheckAccessRequest) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *CheckAccessRequest) GetPermission() string {
	if m != nil {
		return m.Permission
	}
	return ""
}

func (m *CheckAccessRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

// Response message for gerrit.CheckAccess.
type CheckAccessResponse struct {
	// Status is the status of the inquery.
	Status CheckAccessResponse_Status `protobuf:"varint,1,opt,name=status,enum=gerrit.CheckAccessResponse_Status" json:"status,omitempty"`
	// Reason is human readable clarifying message if not allowed.
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
}

func (m *CheckAccessResponse) Reset()                    { *m = CheckAccessResponse{} }
func (m *CheckAccessResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckAccessResponse) ProtoMessage()               {}
func (*CheckAccessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CheckAccessResponse) GetStatus() CheckAccessResponse_Status {
	if m != nil {
		return m.Status
	}
	return CheckAccessResponse_ALLOWED
}

func (m *CheckAccessResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// Information about an account.
// Source of truth: https://gerrit-review.googlesource.com/Documentation/rest-api-accounts.html#account-info
type AccountInfo struct {
	// The full name of the user.
	// Only set if detailed account information is requested.
	// See option DETAILED_ACCOUNTS for change queries
	// and option DETAILS for account queries.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The email address the user prefers to be contacted through.
	// Only set if detailed account information is requested.
	// See option DETAILED_ACCOUNTS for change queries
	// and options DETAILS and ALL_EMAILS for account queries.
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	// A list of the secondary email addresses of the user.
	// Only set for account queries when the ALL_EMAILS option or the suggest
	// parameter is set. Secondary emails are only included if the calling user
	// has the Modify Account, and hence is allowed to see secondary emails of
	// other users.
	SecondaryEmails []string `protobuf:"bytes,3,rep,name=secondary_emails,json=secondaryEmails" json:"secondary_emails,omitempty"`
	// The username of the user.
	// Only set if detailed account information is requested.
	// See option DETAILED_ACCOUNTS for change queries
	// and option DETAILS for account queries.
	Username string `protobuf:"bytes,4,opt,name=username" json:"username,omitempty"`
}

func (m *AccountInfo) Reset()                    { *m = AccountInfo{} }
func (m *AccountInfo) String() string            { return proto.CompactTextString(m) }
func (*AccountInfo) ProtoMessage()               {}
func (*AccountInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AccountInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccountInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AccountInfo) GetSecondaryEmails() []string {
	if m != nil {
		return m.SecondaryEmails
	}
	return nil
}

func (m *AccountInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// Information about a change.
// Source of truth: https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#change-info
type ChangeInfo struct {
	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	// The owner of the change.
	Owner *AccountInfo `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	// The project of this change. For example, "chromium/src".
	Project string `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
}

func (m *ChangeInfo) Reset()                    { *m = ChangeInfo{} }
func (m *ChangeInfo) String() string            { return proto.CompactTextString(m) }
func (*ChangeInfo) ProtoMessage()               {}
func (*ChangeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChangeInfo) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ChangeInfo) GetOwner() *AccountInfo {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *ChangeInfo) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func init() {
	proto.RegisterType((*GetChangeRequest)(nil), "gerrit.GetChangeRequest")
	proto.RegisterType((*CheckAccessRequest)(nil), "gerrit.CheckAccessRequest")
	proto.RegisterType((*CheckAccessResponse)(nil), "gerrit.CheckAccessResponse")
	proto.RegisterType((*AccountInfo)(nil), "gerrit.AccountInfo")
	proto.RegisterType((*ChangeInfo)(nil), "gerrit.ChangeInfo")
	proto.RegisterEnum("gerrit.QueryOption", QueryOption_name, QueryOption_value)
	proto.RegisterEnum("gerrit.CheckAccessResponse_Status", CheckAccessResponse_Status_name, CheckAccessResponse_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Gerrit service

type GerritClient interface {
	// Loads a change by id.
	GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Checks if a user has a permission on given repo and ref.
	//
	// Using this API requires ViewAccess capability on Gerrit server.
	// If and only if the caller doesn't have such capability, the result is error
	// forbidden.
	//
	// Note, providing non-existent project name is not an error, but resulting
	// CheckAccessResponse will state that project was not found.
	CheckAccess(ctx context.Context, in *CheckAccessRequest, opts ...grpc.CallOption) (*CheckAccessResponse, error)
}
type gerritPRPCClient struct {
	client *prpc.Client
}

func NewGerritPRPCClient(client *prpc.Client) GerritClient {
	return &gerritPRPCClient{client}
}

func (c *gerritPRPCClient) GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.client.Call(ctx, "gerrit.Gerrit", "GetChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) CheckAccess(ctx context.Context, in *CheckAccessRequest, opts ...grpc.CallOption) (*CheckAccessResponse, error) {
	out := new(CheckAccessResponse)
	err := c.client.Call(ctx, "gerrit.Gerrit", "CheckAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type gerritClient struct {
	cc *grpc.ClientConn
}

func NewGerritClient(cc *grpc.ClientConn) GerritClient {
	return &gerritClient{cc}
}

func (c *gerritClient) GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := grpc.Invoke(ctx, "/gerrit.Gerrit/GetChange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) CheckAccess(ctx context.Context, in *CheckAccessRequest, opts ...grpc.CallOption) (*CheckAccessResponse, error) {
	out := new(CheckAccessResponse)
	err := grpc.Invoke(ctx, "/gerrit.Gerrit/CheckAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gerrit service

type GerritServer interface {
	// Loads a change by id.
	GetChange(context.Context, *GetChangeRequest) (*ChangeInfo, error)
	// Checks if a user has a permission on given repo and ref.
	//
	// Using this API requires ViewAccess capability on Gerrit server.
	// If and only if the caller doesn't have such capability, the result is error
	// forbidden.
	//
	// Note, providing non-existent project name is not an error, but resulting
	// CheckAccessResponse will state that project was not found.
	CheckAccess(context.Context, *CheckAccessRequest) (*CheckAccessResponse, error)
}

func RegisterGerritServer(s prpc.Registrar, srv GerritServer) {
	s.RegisterService(&_Gerrit_serviceDesc, srv)
}

func _Gerrit_GetChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).GetChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/GetChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).GetChange(ctx, req.(*GetChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_CheckAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).CheckAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/CheckAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).CheckAccess(ctx, req.(*CheckAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gerrit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gerrit.Gerrit",
	HandlerType: (*GerritServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChange",
			Handler:    _Gerrit_GetChange_Handler,
		},
		{
			MethodName: "CheckAccess",
			Handler:    _Gerrit_CheckAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/common/proto/gerrit/gerrit.proto",
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/common/proto/gerrit/gerrit.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 766 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x5e, 0x27, 0x69, 0xda, 0x9c, 0xd0, 0x64, 0x72, 0xda, 0x2d, 0x56, 0x91, 0x50, 0x94, 0xab,
	0x2e, 0x12, 0xa9, 0x54, 0xc4, 0x05, 0x70, 0x53, 0xc7, 0x9e, 0xa4, 0x43, 0x1d, 0x3b, 0x8c, 0x1d,
	0x2a, 0xae, 0xac, 0xac, 0x99, 0x6d, 0x03, 0x6b, 0x4f, 0xf0, 0x8f, 0xd0, 0x72, 0x81, 0xfc, 0x02,
	0xbc, 0x06, 0x2f, 0xc4, 0x0b, 0x21, 0x8f, 0xed, 0x34, 0x8b, 0x96, 0xbd, 0xb2, 0xbf, 0x6f, 0xbe,
	0x39, 0xe7, 0x9b, 0x73, 0xe6, 0x0c, 0x7c, 0xfd, 0x28, 0xa7, 0xe1, 0x53, 0x22, 0xa3, 0x6d, 0x1e,
	0x4d, 0x65, 0xf2, 0x78, 0xfd, 0x36, 0x0f, 0xb7, 0xd7, 0xa1, 0x8c, 0x22, 0x19, 0x5f, 0xef, 0x12,
	0x99, 0xc9, 0xeb, 0x47, 0x91, 0x24, 0xdb, 0xac, 0xfe, 0x4c, 0x15, 0x87, 0xdd, 0x0a, 0x4d, 0x7e,
	0x02, 0xb2, 0x10, 0x99, 0xf9, 0xb4, 0x89, 0x1f, 0x05, 0x17, 0xbf, 0xe5, 0x22, 0xcd, 0xf0, 0x02,
	0xba, 0x71, 0x1e, 0xbd, 0x16, 0x89, 0xae, 0x8d, 0xb5, 0xab, 0x36, 0xaf, 0x11, 0x7e, 0x09, 0xc7,
	0x72, 0x97, 0x6d, 0x65, 0x9c, 0xea, 0xad, 0x71, 0xfb, 0x6a, 0x70, 0x73, 0x36, 0xad, 0x63, 0xfe,
	0x90, 0x8b, 0xe4, 0x9d, 0xab, 0xd6, 0x78, 0xa3, 0x99, 0xfc, 0x01, 0x68, 0x3e, 0x89, 0xf0, 0x57,
	0x23, 0x0c, 0x45, 0x9a, 0x36, 0xc1, 0x75, 0x38, 0xde, 0x25, 0xf2, 0x17, 0x11, 0x66, 0x2a, 0x7a,
	0x8f, 0x37, 0x10, 0x09, 0xb4, 0x13, 0xf1, 0x46, 0x6f, 0x29, 0xb6, 0xfc, 0xc5, 0xcf, 0x01, 0x76,
	0x22, 0x89, 0xb6, 0x69, 0xba, 0x95, 0xb1, 0xde, 0x56, 0x0b, 0x07, 0x4c, 0x19, 0x6b, 0x13, 0x86,
	0x32, 0x8f, 0x33, 0xbd, 0x53, 0xc5, 0xaa, 0xe1, 0xe4, 0x6f, 0x0d, 0xce, 0xde, 0x4b, 0x9e, 0xee,
	0x64, 0x9c, 0x0a, 0xfc, 0x16, 0xba, 0x69, 0xb6, 0xc9, 0xf2, 0x54, 0x25, 0x1f, 0xdc, 0x4c, 0x9a,
	0x13, 0x7c, 0x40, 0x3c, 0xf5, 0x94, 0x92, 0xd7, 0x3b, 0xca, 0xb2, 0x24, 0x62, 0x93, 0xca, 0xb8,
	0xb6, 0x58, 0xa3, 0xc9, 0x77, 0xd0, 0xad, 0x94, 0xd8, 0x87, 0x63, 0xc3, 0xb6, 0xdd, 0x07, 0x6a,
	0x91, 0x17, 0x78, 0x0a, 0xbd, 0xb9, 0xcb, 0x67, 0xcc, 0xb2, 0xa8, 0x43, 0x34, 0x7c, 0x09, 0xa3,
	0x15, 0x77, 0xbf, 0xa7, 0xa6, 0x1f, 0x38, 0xae, 0x1f, 0xcc, 0xdd, 0xb5, 0x63, 0x91, 0xd6, 0xe4,
	0x4f, 0xe8, 0x1b, 0x95, 0x67, 0x16, 0xbf, 0x91, 0x88, 0xd0, 0x89, 0x37, 0x91, 0xa8, 0x4b, 0xa3,
	0xfe, 0xf1, 0x1c, 0x8e, 0x44, 0xb4, 0xd9, 0xbe, 0xad, 0xd3, 0x56, 0x00, 0x5f, 0x01, 0x49, 0x45,
	0x28, 0xe3, 0x9f, 0x37, 0xc9, 0xbb, 0x40, 0x51, 0xa9, 0xde, 0x1e, 0xb7, 0xaf, 0x7a, 0x7c, 0xb8,
	0xe7, 0xa9, 0xa2, 0xf1, 0x12, 0x4e, 0xf2, 0x54, 0x24, 0x2a, 0x70, 0x55, 0xa7, 0x3d, 0x9e, 0x6c,
	0x01, 0xaa, 0xe6, 0xab, 0xf4, 0xff, 0xd7, 0xf9, 0x57, 0x70, 0x24, 0x7f, 0x8f, 0x45, 0xa2, 0x2c,
	0xf4, 0x9f, 0xfb, 0x7e, 0x60, 0x9d, 0x57, 0x8a, 0xc3, 0xfe, 0xb6, 0xdf, 0xeb, 0xef, 0x17, 0xff,
	0xb4, 0xa1, 0x7f, 0x70, 0x51, 0xf0, 0x02, 0xd0, 0x5d, 0xf9, 0xcc, 0x75, 0x82, 0xb5, 0xe3, 0xad,
	0xa8, 0xc9, 0xe6, 0x4c, 0x15, 0x0e, 0xa0, 0x6b, 0x1b, 0x33, 0x6a, 0x7b, 0x44, 0xc3, 0x33, 0x18,
	0x5a, 0xd4, 0x37, 0x98, 0x4d, 0xad, 0xa0, 0x26, 0x5b, 0x78, 0x0e, 0xc4, 0x5c, 0x73, 0x4e, 0x1d,
	0x3f, 0xe0, 0xf4, 0x47, 0xe6, 0x31, 0xd7, 0x21, 0x1d, 0x1c, 0xc1, 0xa9, 0x61, 0xdb, 0x7b, 0xc6,
	0x23, 0x27, 0x88, 0x30, 0x68, 0x84, 0xa6, 0xbb, 0x5c, 0x32, 0x9f, 0x10, 0x1c, 0x42, 0xbf, 0x94,
	0x55, 0xd8, 0x23, 0xe3, 0x72, 0x5f, 0x23, 0x9a, 0x33, 0x9b, 0x7a, 0xe4, 0x16, 0x07, 0xd0, 0x2b,
	0x35, 0x15, 0x2c, 0x34, 0xbc, 0x80, 0xd1, 0xde, 0x85, 0x61, 0x9a, 0xee, 0xda, 0xf1, 0x3d, 0x52,
	0xb4, 0xf0, 0x25, 0x90, 0x32, 0x1d, 0x7d, 0xa0, 0x3c, 0x58, 0xaf, 0x2c, 0xc3, 0x2f, 0xe5, 0x1d,
	0x3c, 0x85, 0x93, 0x25, 0xf5, 0x3c, 0x63, 0x51, 0xc2, 0x13, 0x3c, 0x87, 0x61, 0x93, 0xc0, 0x30,
	0x7d, 0x65, 0xad, 0x20, 0x78, 0x06, 0x03, 0xf3, 0xce, 0x70, 0x16, 0xf4, 0x99, 0x1c, 0x97, 0x3b,
	0xeb, 0x80, 0x16, 0x29, 0x6e, 0xf1, 0x1c, 0x06, 0xde, 0x3d, 0x5b, 0x05, 0x4b, 0xca, 0x17, 0xd4,
	0x98, 0xd9, 0x94, 0x14, 0x85, 0x86, 0x23, 0xe8, 0x7b, 0xeb, 0xd9, 0x92, 0xf9, 0x7e, 0x4d, 0xb5,
	0x70, 0x08, 0xbd, 0x07, 0x3a, 0x0b, 0x6c, 0xe6, 0xdc, 0x7b, 0xa4, 0x28, 0x3a, 0xd8, 0x87, 0x23,
	0xf3, 0x8e, 0x9a, 0xf7, 0xa4, 0x50, 0x06, 0x06, 0xd5, 0x71, 0x83, 0xb9, 0xeb, 0xfa, 0x94, 0x97,
	0x12, 0x82, 0x9f, 0xc2, 0x68, 0xb5, 0xf6, 0xee, 0x02, 0x93, 0x72, 0x9f, 0xcd, 0x99, 0x59, 0xb9,
	0x2f, 0xc6, 0x88, 0xf0, 0x89, 0xcf, 0x0d, 0xf3, 0x9e, 0x39, 0x8b, 0x80, 0x59, 0x25, 0x77, 0x8b,
	0x3a, 0x8c, 0x2c, 0xf7, 0xc1, 0xb1, 0x5d, 0xc3, 0x52, 0xa5, 0x33, 0x1c, 0xb5, 0x50, 0x68, 0x37,
	0x7f, 0x69, 0xd0, 0x5d, 0xa8, 0xdb, 0x80, 0xdf, 0x40, 0x6f, 0xff, 0x96, 0xa0, 0xde, 0xdc, 0x91,
	0xff, 0x3e, 0x2f, 0x97, 0xf8, 0x3c, 0x73, 0xfb, 0x8b, 0x77, 0x07, 0xfd, 0x83, 0x09, 0xc4, 0xcb,
	0x0f, 0x8e, 0x65, 0xb5, 0xfd, 0xb3, 0x8f, 0x8c, 0xec, 0xe4, 0xc5, 0xeb, 0xae, 0x7a, 0xdf, 0xbe,
	0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xbb, 0x95, 0x2e, 0x18, 0x05, 0x00, 0x00,
}
