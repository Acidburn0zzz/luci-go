// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/common/proto/gerrit/gerrit.proto

package gerrit

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Specifies what extra information to include in the response.
//
// Source of truth:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#query-options
type QueryOption int32

const (
	QueryOption_OPTION_UNSPECIFIED QueryOption = 0
	// A summary of each label required for submit, and approvers that have
	// granted (or rejected) with that label.
	QueryOption_LABELS QueryOption = 1
	// Detailed label information, including numeric values of all existing
	// approvals, recognized label values, values permitted to be set by the
	// current user, all reviewers by state, and reviewers that may be removed by
	// the current user.
	QueryOption_DETAILED_LABELS QueryOption = 2
	// Describe the current revision (patch set) of the change, including the
	// commit SHA-1 and URLs to fetch from.
	QueryOption_CURRENT_REVISION QueryOption = 4
	// Describe all revisions, not just current.
	QueryOption_ALL_REVISIONS QueryOption = 8
	// Parse and output all header fields from the commit object, including
	// message. Only valid when the CURRENT_REVISION or ALL_REVISIONS option is
	// selected.
	QueryOption_CURRENT_COMMIT QueryOption = 16
	// Parse and output all header fields from the output revisions. If only
	// CURRENT_REVISION was requested then only the current revision’s commit data
	// will be output.
	QueryOption_ALL_COMMITS QueryOption = 32
	// List files modified by the commit and magic files, including basic line
	// counts inserted/deleted per file. Only valid when the CURRENT_REVISION or
	// ALL_REVISIONS option is selected.
	QueryOption_CURRENT_FILES QueryOption = 64
	// List files modified by the commit and magic files, including basic line
	// counts inserted/deleted per file. If only the CURRENT_REVISION was
	// requested then only that commit’s modified files will be output.
	QueryOption_ALL_FILES QueryOption = 128
	// Include _account_id, email and username fields when referencing accounts.
	QueryOption_DETAILED_ACCOUNTS QueryOption = 256
	// Include updates to reviewers set as ReviewerUpdateInfo entities.
	QueryOption_REVIEWER_UPDATES QueryOption = 512
	// Include messages associated with the change.
	QueryOption_MESSAGES QueryOption = 1024
	// Include information on available actions for the change and its current
	// revision. Ignored if the caller is not authenticated.
	QueryOption_CURRENT_ACTIONS QueryOption = 2048
	// Include information on available change actions for the change. Ignored if
	// the caller is not authenticated.
	QueryOption_CHANGE_ACTIONS QueryOption = 4096
	// Include the reviewed field if all of the following are true:
	// - the change is open
	// - the caller is authenticated
	// - the caller has commented on the change more recently than the last update
	//   from the change owner, i.e. this change would show up in the results of
	//   reviewedby:self.
	QueryOption_REVIEWED QueryOption = 8192
	// Skip the mergeable field in ChangeInfo. For fast moving projects, this
	// field must be recomputed often, which is slow for projects with big trees.
	QueryOption_SKIP_MERGEABLE QueryOption = 16384
	// Include the submittable field in ChangeInfo, which can be used to tell if
	// the change is reviewed and ready for submit.
	QueryOption_SUBMITTABLE QueryOption = 32768
	// Include the web_links field in CommitInfo, therefore only valid in
	// combination with CURRENT_COMMIT or ALL_COMMITS.
	QueryOption_WEB_LINKS QueryOption = 65536
	// Include potential problems with the change.
	QueryOption_CHECK QueryOption = 131072
	// Include the full commit message with Gerrit-specific commit footers in the
	// RevisionInfo.
	QueryOption_COMMIT_FOOTERS QueryOption = 262144
	// Include push certificate information in the RevisionInfo. Ignored if signed
	// push is not enabled on the server.
	QueryOption_PUSH_CERTIFICATES QueryOption = 524288
	// Include references to external tracking systems as TrackingIdInfo.
	QueryOption_TRACKING_IDS QueryOption = 1048576
	// Include the commands field in the FetchInfo for revisions. Only valid when
	// the CURRENT_REVISION or ALL_REVISIONS option is selected.
	QueryOption_DOWNLOAD_COMMANDS QueryOption = 2097152
)

var QueryOption_name = map[int32]string{
	0:       "OPTION_UNSPECIFIED",
	1:       "LABELS",
	2:       "DETAILED_LABELS",
	4:       "CURRENT_REVISION",
	8:       "ALL_REVISIONS",
	16:      "CURRENT_COMMIT",
	32:      "ALL_COMMITS",
	64:      "CURRENT_FILES",
	128:     "ALL_FILES",
	256:     "DETAILED_ACCOUNTS",
	512:     "REVIEWER_UPDATES",
	1024:    "MESSAGES",
	2048:    "CURRENT_ACTIONS",
	4096:    "CHANGE_ACTIONS",
	8192:    "REVIEWED",
	16384:   "SKIP_MERGEABLE",
	32768:   "SUBMITTABLE",
	65536:   "WEB_LINKS",
	131072:  "CHECK",
	262144:  "COMMIT_FOOTERS",
	524288:  "PUSH_CERTIFICATES",
	1048576: "TRACKING_IDS",
	2097152: "DOWNLOAD_COMMANDS",
}

var QueryOption_value = map[string]int32{
	"OPTION_UNSPECIFIED": 0,
	"LABELS":             1,
	"DETAILED_LABELS":    2,
	"CURRENT_REVISION":   4,
	"ALL_REVISIONS":      8,
	"CURRENT_COMMIT":     16,
	"ALL_COMMITS":        32,
	"CURRENT_FILES":      64,
	"ALL_FILES":          128,
	"DETAILED_ACCOUNTS":  256,
	"REVIEWER_UPDATES":   512,
	"MESSAGES":           1024,
	"CURRENT_ACTIONS":    2048,
	"CHANGE_ACTIONS":     4096,
	"REVIEWED":           8192,
	"SKIP_MERGEABLE":     16384,
	"SUBMITTABLE":        32768,
	"WEB_LINKS":          65536,
	"CHECK":              131072,
	"COMMIT_FOOTERS":     262144,
	"PUSH_CERTIFICATES":  524288,
	"TRACKING_IDS":       1048576,
	"DOWNLOAD_COMMANDS":  2097152,
}

func (x QueryOption) String() string {
	return proto.EnumName(QueryOption_name, int32(x))
}

func (QueryOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{0}
}

type ChangeInfo_Status int32

const (
	ChangeInfo_STATUS_INVALID ChangeInfo_Status = 0
	ChangeInfo_NEW            ChangeInfo_Status = 1
	ChangeInfo_MERGED         ChangeInfo_Status = 2
	ChangeInfo_ABANDONED      ChangeInfo_Status = 3
)

var ChangeInfo_Status_name = map[int32]string{
	0: "STATUS_INVALID",
	1: "NEW",
	2: "MERGED",
	3: "ABANDONED",
}

var ChangeInfo_Status_value = map[string]int32{
	"STATUS_INVALID": 0,
	"NEW":            1,
	"MERGED":         2,
	"ABANDONED":      3,
}

func (x ChangeInfo_Status) String() string {
	return proto.EnumName(ChangeInfo_Status_name, int32(x))
}

func (ChangeInfo_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{2, 0}
}

// Request to get information for a single change.
//
// Encodes path arguments and query options described at
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-change
type GetChangeRequest struct {
	// Change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// What to include in the response.
	Options              []QueryOption `protobuf:"varint,2,rep,packed,name=options,proto3,enum=gerrit.QueryOption" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetChangeRequest) Reset()         { *m = GetChangeRequest{} }
func (m *GetChangeRequest) String() string { return proto.CompactTextString(m) }
func (*GetChangeRequest) ProtoMessage()    {}
func (*GetChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{0}
}

func (m *GetChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetChangeRequest.Unmarshal(m, b)
}
func (m *GetChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetChangeRequest.Marshal(b, m, deterministic)
}
func (m *GetChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChangeRequest.Merge(m, src)
}
func (m *GetChangeRequest) XXX_Size() int {
	return xxx_messageInfo_GetChangeRequest.Size(m)
}
func (m *GetChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetChangeRequest proto.InternalMessageInfo

func (m *GetChangeRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *GetChangeRequest) GetOptions() []QueryOption {
	if m != nil {
		return m.Options
	}
	return nil
}

// Information about an account.
// Source of truth: https://gerrit-review.googlesource.com/Documentation/rest-api-accounts.html#account-info
type AccountInfo struct {
	// The full name of the user.
	// Only set if detailed account information is requested.
	// See option DETAILED_ACCOUNTS for change queries
	// and option DETAILS for account queries.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The email address the user prefers to be contacted through.
	// Only set if detailed account information is requested.
	// See option DETAILED_ACCOUNTS for change queries
	// and options DETAILS and ALL_EMAILS for account queries.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// A list of the secondary email addresses of the user.
	// Only set for account queries when the ALL_EMAILS option or the suggest
	// parameter is set. Secondary emails are only included if the calling user
	// has the Modify Account, and hence is allowed to see secondary emails of
	// other users.
	SecondaryEmails []string `protobuf:"bytes,3,rep,name=secondary_emails,json=secondaryEmails,proto3" json:"secondary_emails,omitempty"`
	// The username of the user.
	// Only set if detailed account information is requested.
	// See option DETAILED_ACCOUNTS for change queries
	// and option DETAILS for account queries.
	Username             string   `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountInfo) Reset()         { *m = AccountInfo{} }
func (m *AccountInfo) String() string { return proto.CompactTextString(m) }
func (*AccountInfo) ProtoMessage()    {}
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{1}
}

func (m *AccountInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountInfo.Unmarshal(m, b)
}
func (m *AccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountInfo.Marshal(b, m, deterministic)
}
func (m *AccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountInfo.Merge(m, src)
}
func (m *AccountInfo) XXX_Size() int {
	return xxx_messageInfo_AccountInfo.Size(m)
}
func (m *AccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AccountInfo proto.InternalMessageInfo

func (m *AccountInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccountInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AccountInfo) GetSecondaryEmails() []string {
	if m != nil {
		return m.SecondaryEmails
	}
	return nil
}

func (m *AccountInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// Information about a change.
// Source of truth: https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#change-info
type ChangeInfo struct {
	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The owner of the change.
	Owner *AccountInfo `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The project of this change. For example, "chromium/src".
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Ref that this change targets, e.g.: refs/heads/master
	//
	// Note that the gerrit API may return short branch name (master instead of
	// refs/heads/master) but we convert it to a ref for consistency across the
	// API.
	Ref    string            `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
	Status ChangeInfo_Status `protobuf:"varint,5,opt,name=status,proto3,enum=gerrit.ChangeInfo_Status" json:"status,omitempty"`
	// Current revision of the change.
	//
	// See:
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#revision-id
	CurrentRevision      string   `protobuf:"bytes,6,opt,name=current_revision,json=currentRevision,proto3" json:"current_revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeInfo) Reset()         { *m = ChangeInfo{} }
func (m *ChangeInfo) String() string { return proto.CompactTextString(m) }
func (*ChangeInfo) ProtoMessage()    {}
func (*ChangeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{2}
}

func (m *ChangeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeInfo.Unmarshal(m, b)
}
func (m *ChangeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeInfo.Marshal(b, m, deterministic)
}
func (m *ChangeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeInfo.Merge(m, src)
}
func (m *ChangeInfo) XXX_Size() int {
	return xxx_messageInfo_ChangeInfo.Size(m)
}
func (m *ChangeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeInfo proto.InternalMessageInfo

func (m *ChangeInfo) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ChangeInfo) GetOwner() *AccountInfo {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *ChangeInfo) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ChangeInfo) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *ChangeInfo) GetStatus() ChangeInfo_Status {
	if m != nil {
		return m.Status
	}
	return ChangeInfo_STATUS_INVALID
}

func (m *ChangeInfo) GetCurrentRevision() string {
	if m != nil {
		return m.CurrentRevision
	}
	return ""
}

// Information for creating a new change.
//
// Fields are a subset of:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#change-input
type CreateChangeRequest struct {
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Ref to base the new change at. e.g. refs/heads/master
	Ref     string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Subject string `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	// 40-digit hex SHA-1 of the git commit which will be the parent commit of the
	// newly created change. If set, it must be a merged commit on the destination
	// branch.
	BaseCommit           string   `protobuf:"bytes,4,opt,name=base_commit,json=baseCommit,proto3" json:"base_commit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateChangeRequest) Reset()         { *m = CreateChangeRequest{} }
func (m *CreateChangeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateChangeRequest) ProtoMessage()    {}
func (*CreateChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{3}
}

func (m *CreateChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateChangeRequest.Unmarshal(m, b)
}
func (m *CreateChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateChangeRequest.Marshal(b, m, deterministic)
}
func (m *CreateChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChangeRequest.Merge(m, src)
}
func (m *CreateChangeRequest) XXX_Size() int {
	return xxx_messageInfo_CreateChangeRequest.Size(m)
}
func (m *CreateChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChangeRequest proto.InternalMessageInfo

func (m *CreateChangeRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *CreateChangeRequest) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *CreateChangeRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *CreateChangeRequest) GetBaseCommit() string {
	if m != nil {
		return m.BaseCommit
	}
	return ""
}

// Information to submit a change.
//
// This is a placeholder to support the arguments from:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-change
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-input
type SubmitChangeRequest struct {
	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitChangeRequest) Reset()         { *m = SubmitChangeRequest{} }
func (m *SubmitChangeRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitChangeRequest) ProtoMessage()    {}
func (*SubmitChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{4}
}

func (m *SubmitChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitChangeRequest.Unmarshal(m, b)
}
func (m *SubmitChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitChangeRequest.Marshal(b, m, deterministic)
}
func (m *SubmitChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitChangeRequest.Merge(m, src)
}
func (m *SubmitChangeRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitChangeRequest.Size(m)
}
func (m *SubmitChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitChangeRequest proto.InternalMessageInfo

func (m *SubmitChangeRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *SubmitChangeRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

// Information for changing contents of single file in a change edit.
//
// Fields encode the path arguments of
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#put-edit-file
type ChangeEditFileContentRequest struct {
	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Path to the file to edit inside the project.
	FilePath string `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// New content of the file. Overwrites existing contents entirely.
	Content              []byte   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeEditFileContentRequest) Reset()         { *m = ChangeEditFileContentRequest{} }
func (m *ChangeEditFileContentRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeEditFileContentRequest) ProtoMessage()    {}
func (*ChangeEditFileContentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{5}
}

func (m *ChangeEditFileContentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeEditFileContentRequest.Unmarshal(m, b)
}
func (m *ChangeEditFileContentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeEditFileContentRequest.Marshal(b, m, deterministic)
}
func (m *ChangeEditFileContentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeEditFileContentRequest.Merge(m, src)
}
func (m *ChangeEditFileContentRequest) XXX_Size() int {
	return xxx_messageInfo_ChangeEditFileContentRequest.Size(m)
}
func (m *ChangeEditFileContentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeEditFileContentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeEditFileContentRequest proto.InternalMessageInfo

func (m *ChangeEditFileContentRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ChangeEditFileContentRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ChangeEditFileContentRequest) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *ChangeEditFileContentRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

// Information for publishing a change edit.
//
// This is a placeholder to support the arguments from:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#publish-edit
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#publish-change-edit-input
type ChangeEditPublishRequest struct {
	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeEditPublishRequest) Reset()         { *m = ChangeEditPublishRequest{} }
func (m *ChangeEditPublishRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeEditPublishRequest) ProtoMessage()    {}
func (*ChangeEditPublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{6}
}

func (m *ChangeEditPublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeEditPublishRequest.Unmarshal(m, b)
}
func (m *ChangeEditPublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeEditPublishRequest.Marshal(b, m, deterministic)
}
func (m *ChangeEditPublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeEditPublishRequest.Merge(m, src)
}
func (m *ChangeEditPublishRequest) XXX_Size() int {
	return xxx_messageInfo_ChangeEditPublishRequest.Size(m)
}
func (m *ChangeEditPublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeEditPublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeEditPublishRequest proto.InternalMessageInfo

func (m *ChangeEditPublishRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ChangeEditPublishRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

// Information for abandoning a change.
//
// Fields are a subset of arguments from:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#abandon-change
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#abandon-input
type AbandonChangeRequest struct {
	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project              string   `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbandonChangeRequest) Reset()         { *m = AbandonChangeRequest{} }
func (m *AbandonChangeRequest) String() string { return proto.CompactTextString(m) }
func (*AbandonChangeRequest) ProtoMessage()    {}
func (*AbandonChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{7}
}

func (m *AbandonChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbandonChangeRequest.Unmarshal(m, b)
}
func (m *AbandonChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbandonChangeRequest.Marshal(b, m, deterministic)
}
func (m *AbandonChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbandonChangeRequest.Merge(m, src)
}
func (m *AbandonChangeRequest) XXX_Size() int {
	return xxx_messageInfo_AbandonChangeRequest.Size(m)
}
func (m *AbandonChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AbandonChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AbandonChangeRequest proto.InternalMessageInfo

func (m *AbandonChangeRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *AbandonChangeRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *AbandonChangeRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Information to set various review bits on a change
//
// Fields are a subset of arguments from:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#set-review
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#review-input
type SetReviewRequest struct {
	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Unique ID for the revision to query.
	// See
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#revision-id
	RevisionId string `protobuf:"bytes,3,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// Message to be added to the change along with this review.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// labels to add, e.g.:
	//   {
	//     "Code-Review": -1,
	//     "Verified": 1,
	//   }
	Labels               map[string]int32 `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SetReviewRequest) Reset()         { *m = SetReviewRequest{} }
func (m *SetReviewRequest) String() string { return proto.CompactTextString(m) }
func (*SetReviewRequest) ProtoMessage()    {}
func (*SetReviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{8}
}

func (m *SetReviewRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetReviewRequest.Unmarshal(m, b)
}
func (m *SetReviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetReviewRequest.Marshal(b, m, deterministic)
}
func (m *SetReviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetReviewRequest.Merge(m, src)
}
func (m *SetReviewRequest) XXX_Size() int {
	return xxx_messageInfo_SetReviewRequest.Size(m)
}
func (m *SetReviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetReviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetReviewRequest proto.InternalMessageInfo

func (m *SetReviewRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *SetReviewRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *SetReviewRequest) GetRevisionId() string {
	if m != nil {
		return m.RevisionId
	}
	return ""
}

func (m *SetReviewRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SetReviewRequest) GetLabels() map[string]int32 {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Information returned by a SetReview RPC.
//
// Fields are a subset of:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#review-result
type ReviewResult struct {
	// Map of labels to values after the review was posted. Null if any reviewer
	// additions were rejected.
	Labels               map[string]int32 `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ReviewResult) Reset()         { *m = ReviewResult{} }
func (m *ReviewResult) String() string { return proto.CompactTextString(m) }
func (*ReviewResult) ProtoMessage()    {}
func (*ReviewResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c6e096860f6adc3, []int{9}
}

func (m *ReviewResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReviewResult.Unmarshal(m, b)
}
func (m *ReviewResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReviewResult.Marshal(b, m, deterministic)
}
func (m *ReviewResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReviewResult.Merge(m, src)
}
func (m *ReviewResult) XXX_Size() int {
	return xxx_messageInfo_ReviewResult.Size(m)
}
func (m *ReviewResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ReviewResult.DiscardUnknown(m)
}

var xxx_messageInfo_ReviewResult proto.InternalMessageInfo

func (m *ReviewResult) GetLabels() map[string]int32 {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterEnum("gerrit.QueryOption", QueryOption_name, QueryOption_value)
	proto.RegisterEnum("gerrit.ChangeInfo_Status", ChangeInfo_Status_name, ChangeInfo_Status_value)
	proto.RegisterType((*GetChangeRequest)(nil), "gerrit.GetChangeRequest")
	proto.RegisterType((*AccountInfo)(nil), "gerrit.AccountInfo")
	proto.RegisterType((*ChangeInfo)(nil), "gerrit.ChangeInfo")
	proto.RegisterType((*CreateChangeRequest)(nil), "gerrit.CreateChangeRequest")
	proto.RegisterType((*SubmitChangeRequest)(nil), "gerrit.SubmitChangeRequest")
	proto.RegisterType((*ChangeEditFileContentRequest)(nil), "gerrit.ChangeEditFileContentRequest")
	proto.RegisterType((*ChangeEditPublishRequest)(nil), "gerrit.ChangeEditPublishRequest")
	proto.RegisterType((*AbandonChangeRequest)(nil), "gerrit.AbandonChangeRequest")
	proto.RegisterType((*SetReviewRequest)(nil), "gerrit.SetReviewRequest")
	proto.RegisterMapType((map[string]int32)(nil), "gerrit.SetReviewRequest.LabelsEntry")
	proto.RegisterType((*ReviewResult)(nil), "gerrit.ReviewResult")
	proto.RegisterMapType((map[string]int32)(nil), "gerrit.ReviewResult.LabelsEntry")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/common/proto/gerrit/gerrit.proto", fileDescriptor_3c6e096860f6adc3)
}

var fileDescriptor_3c6e096860f6adc3 = []byte{
	// 1095 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdf, 0x6e, 0xe2, 0xd6,
	0x13, 0xfe, 0x19, 0x12, 0x12, 0x86, 0x84, 0x1c, 0x26, 0x6c, 0x7e, 0x2e, 0xbb, 0xd2, 0x22, 0xb4,
	0x17, 0xd9, 0x4a, 0x25, 0x6a, 0xaa, 0x4a, 0xbb, 0x6d, 0xa5, 0xc6, 0x31, 0x27, 0xac, 0x15, 0x63,
	0xa8, 0x6d, 0x36, 0xea, 0x95, 0x65, 0xc8, 0x09, 0x71, 0x0b, 0x76, 0xea, 0x3f, 0xbb, 0x8a, 0x54,
	0x55, 0x48, 0xbd, 0xe8, 0x43, 0xf4, 0xb1, 0xfa, 0x18, 0x7d, 0x81, 0x5e, 0x56, 0xe7, 0xd8, 0xe6,
	0xcf, 0x86, 0x95, 0xaa, 0xb4, 0x57, 0x78, 0x3e, 0x7f, 0x67, 0xe6, 0x9b, 0x61, 0xce, 0x8c, 0xe1,
	0xcb, 0x49, 0xd0, 0x1e, 0xdf, 0x86, 0xc1, 0xcc, 0x4b, 0x66, 0xed, 0x20, 0x9c, 0x9c, 0x4c, 0x93,
	0xb1, 0x77, 0x32, 0x0e, 0x66, 0xb3, 0xc0, 0x3f, 0xb9, 0x0b, 0x83, 0x38, 0x38, 0x99, 0xb0, 0x30,
	0xf4, 0xe2, 0xec, 0xa7, 0x2d, 0x30, 0x2c, 0xa5, 0x56, 0xe3, 0xe9, 0x24, 0x08, 0x26, 0x53, 0x96,
	0x32, 0x47, 0xc9, 0xcd, 0x09, 0x9b, 0xdd, 0xc5, 0xf7, 0x29, 0xa9, 0xf5, 0x3d, 0x90, 0x2e, 0x8b,
	0xd5, 0x5b, 0xd7, 0x9f, 0x30, 0x93, 0xfd, 0x94, 0xb0, 0x28, 0xc6, 0x23, 0x28, 0xf9, 0xc9, 0x6c,
	0xc4, 0x42, 0x59, 0x6a, 0x4a, 0xc7, 0x45, 0x33, 0xb3, 0xf0, 0x33, 0xd8, 0x09, 0xee, 0x62, 0x2f,
	0xf0, 0x23, 0xb9, 0xd0, 0x2c, 0x1e, 0x57, 0x4f, 0x0f, 0xdb, 0x59, 0xc0, 0xef, 0x12, 0x16, 0xde,
	0xf7, 0xc5, 0x3b, 0x33, 0xe7, 0xb4, 0x7e, 0x81, 0x8a, 0x32, 0x1e, 0x07, 0x89, 0x1f, 0x6b, 0xfe,
	0x4d, 0x80, 0x08, 0x5b, 0xbe, 0x3b, 0x63, 0xc2, 0x67, 0xd9, 0x14, 0xcf, 0x58, 0x87, 0x6d, 0x36,
	0x73, 0xbd, 0xa9, 0x5c, 0x10, 0x60, 0x6a, 0xe0, 0x4b, 0x20, 0x11, 0x1b, 0x07, 0xfe, 0xb5, 0x1b,
	0xde, 0x3b, 0x02, 0x8a, 0xe4, 0x62, 0xb3, 0x78, 0x5c, 0x36, 0x0f, 0x16, 0x38, 0x15, 0x30, 0x36,
	0x60, 0x37, 0x89, 0x58, 0x28, 0x1c, 0x6f, 0x09, 0x1f, 0x0b, 0xbb, 0xf5, 0x7b, 0x01, 0x20, 0x4d,
	0x4c, 0xc4, 0xff, 0x58, 0x56, 0x2f, 0x61, 0x3b, 0x78, 0xef, 0xb3, 0x50, 0x68, 0xa8, 0x2c, 0x73,
	0x5a, 0xd1, 0x6e, 0xa6, 0x0c, 0x94, 0x61, 0xe7, 0x2e, 0x0c, 0x7e, 0x60, 0xe3, 0x58, 0x2e, 0x8a,
	0x60, 0xb9, 0x89, 0x04, 0x8a, 0x21, 0xbb, 0xc9, 0x24, 0xf0, 0x47, 0xfc, 0x1c, 0x4a, 0x51, 0xec,
	0xc6, 0x49, 0x24, 0x6f, 0x37, 0xa5, 0xe3, 0xea, 0xe9, 0x27, 0xb9, 0xdf, 0xa5, 0xa4, 0xb6, 0x25,
	0x08, 0x66, 0x46, 0xe4, 0x79, 0x8f, 0x93, 0x30, 0x64, 0x7e, 0xec, 0x84, 0xec, 0x9d, 0x17, 0x79,
	0x81, 0x2f, 0x97, 0x84, 0xc7, 0x83, 0x0c, 0x37, 0x33, 0xb8, 0x75, 0x06, 0xa5, 0xf4, 0x30, 0x22,
	0x54, 0x2d, 0x5b, 0xb1, 0x87, 0x96, 0xa3, 0x19, 0x6f, 0x15, 0x5d, 0xeb, 0x90, 0xff, 0xe1, 0x0e,
	0x14, 0x0d, 0x7a, 0x45, 0x24, 0x04, 0x28, 0xf5, 0xa8, 0xd9, 0xa5, 0x1d, 0x52, 0xc0, 0x7d, 0x28,
	0x2b, 0xe7, 0x8a, 0xd1, 0xe9, 0x1b, 0xb4, 0x43, 0x8a, 0xad, 0x9f, 0xe1, 0x50, 0x0d, 0x99, 0x1b,
	0xb3, 0xf5, 0xff, 0x7e, 0x25, 0x45, 0x69, 0x63, 0x8a, 0x85, 0x65, 0x8a, 0x32, 0xec, 0x44, 0xc9,
	0x68, 0xb5, 0x1c, 0x99, 0x89, 0xcf, 0xa1, 0x32, 0x72, 0x23, 0xe6, 0xf0, 0x1e, 0xf5, 0xe2, 0xac,
	0x2c, 0xc0, 0x21, 0x55, 0x20, 0xad, 0x2e, 0x1c, 0x5a, 0xc9, 0x68, 0xe6, 0xfd, 0xc3, 0xce, 0x5b,
	0x51, 0x55, 0x58, 0x53, 0xd5, 0xfa, 0x4d, 0x82, 0x67, 0xa9, 0x0f, 0x7a, 0xed, 0xc5, 0x17, 0xde,
	0x94, 0xa9, 0x81, 0x1f, 0x8b, 0x52, 0x3d, 0xd2, 0x25, 0x3e, 0x85, 0xf2, 0x8d, 0x37, 0x65, 0xce,
	0x9d, 0x1b, 0xdf, 0x66, 0x89, 0xed, 0x72, 0x60, 0xe0, 0xc6, 0xb7, 0xfc, 0xd8, 0x38, 0x0d, 0x20,
	0xb2, 0xda, 0x33, 0x73, 0xb3, 0xa5, 0x83, 0xbc, 0x14, 0x32, 0x48, 0x46, 0x53, 0x2f, 0xba, 0x7d,
	0x7c, 0x5e, 0x23, 0xa8, 0x2b, 0x23, 0xd7, 0xbf, 0x0e, 0xfc, 0x7f, 0x59, 0x21, 0xfe, 0x66, 0xc6,
	0xa2, 0xc8, 0x9d, 0xb0, 0xfc, 0x5f, 0xca, 0xcc, 0xd6, 0x5f, 0x12, 0x10, 0x8b, 0x89, 0xa6, 0x62,
	0xef, 0x1f, 0x1f, 0xe0, 0x39, 0x54, 0xf2, 0x76, 0x75, 0xbc, 0xeb, 0x2c, 0x08, 0xe4, 0x90, 0x76,
	0xbd, 0xaa, 0x60, 0x6b, 0x4d, 0x01, 0x7e, 0x03, 0xa5, 0xa9, 0x3b, 0x62, 0x53, 0x7e, 0x49, 0x8a,
	0xc7, 0x95, 0xd3, 0x17, 0xf9, 0x25, 0xf9, 0x50, 0x56, 0x5b, 0x17, 0x34, 0xea, 0xc7, 0xe1, 0xbd,
	0x99, 0x9d, 0x69, 0xbc, 0x86, 0xca, 0x0a, 0xcc, 0x1b, 0xf4, 0x47, 0x76, 0x9f, 0xb5, 0x2d, 0x7f,
	0xe4, 0xe3, 0xe5, 0x9d, 0x3b, 0x4d, 0x98, 0x50, 0xbc, 0x6d, 0xa6, 0xc6, 0x57, 0x85, 0x57, 0x52,
	0xeb, 0x57, 0x09, 0xf6, 0xf2, 0x00, 0x51, 0x32, 0x8d, 0xf1, 0xd5, 0x42, 0x89, 0x24, 0x94, 0x34,
	0x73, 0x25, 0xab, 0xac, 0xff, 0x58, 0xc5, 0xa7, 0x7f, 0x14, 0xa1, 0xb2, 0x32, 0x3a, 0xf1, 0x08,
	0xb0, 0x3f, 0xb0, 0xb5, 0xbe, 0xe1, 0x0c, 0x0d, 0x6b, 0x40, 0x55, 0xed, 0x42, 0xa3, 0xfc, 0x3e,
	0x03, 0x94, 0x74, 0xe5, 0x9c, 0xea, 0x16, 0x91, 0xf0, 0x10, 0x0e, 0x3a, 0xd4, 0x56, 0x34, 0x9d,
	0x76, 0x9c, 0x0c, 0x2c, 0x60, 0x1d, 0x88, 0x3a, 0x34, 0x4d, 0x6a, 0xd8, 0x8e, 0x49, 0xdf, 0x6a,
	0x96, 0xd6, 0x37, 0xc8, 0x16, 0xd6, 0x60, 0x5f, 0xd1, 0xf5, 0x05, 0x62, 0x91, 0x5d, 0x3e, 0x2d,
	0x72, 0xa2, 0xda, 0xef, 0xf5, 0x34, 0x9b, 0x10, 0x3c, 0x80, 0x0a, 0xa7, 0xa5, 0xb6, 0x45, 0x9a,
	0xfc, 0x5c, 0x4e, 0xba, 0xd0, 0x74, 0x6a, 0x91, 0x33, 0xac, 0x42, 0x99, 0x73, 0x52, 0x73, 0x2e,
	0xe1, 0x11, 0xd4, 0x16, 0x2a, 0x14, 0x55, 0xed, 0x0f, 0x0d, 0xdb, 0x22, 0xf3, 0x02, 0x3e, 0x01,
	0xc2, 0xc3, 0xd1, 0x2b, 0x6a, 0x3a, 0xc3, 0x41, 0x47, 0xb1, 0x39, 0x7d, 0x0b, 0xf7, 0x61, 0xb7,
	0x47, 0x2d, 0x4b, 0xe9, 0x72, 0x73, 0x17, 0xeb, 0x70, 0x90, 0x07, 0x50, 0x54, 0x5b, 0x48, 0x9b,
	0x13, 0x3c, 0x84, 0xaa, 0xfa, 0x46, 0x31, 0xba, 0x74, 0x09, 0x36, 0xf9, 0xc9, 0xcc, 0x61, 0x87,
	0xcc, 0xcf, 0xb0, 0x0e, 0x55, 0xeb, 0x52, 0x1b, 0x38, 0x62, 0xaa, 0x29, 0xe7, 0x3a, 0x25, 0xf3,
	0xb9, 0x84, 0x35, 0xa8, 0x58, 0xc3, 0xf3, 0x9e, 0x66, 0xdb, 0x19, 0x54, 0xc0, 0x03, 0x28, 0x5f,
	0xd1, 0x73, 0x47, 0xd7, 0x8c, 0x4b, 0x8b, 0xcc, 0xe7, 0x5b, 0x58, 0x81, 0x6d, 0xf5, 0x0d, 0x55,
	0x2f, 0xc9, 0x5c, 0x08, 0xa8, 0xa6, 0xe9, 0x3a, 0x17, 0xfd, 0xbe, 0x4d, 0x4d, 0x4e, 0x21, 0xf8,
	0x7f, 0xa8, 0x0d, 0x86, 0xd6, 0x1b, 0x47, 0xa5, 0xa6, 0xad, 0x5d, 0x68, 0x6a, 0xaa, 0x7e, 0xde,
	0x44, 0x84, 0x3d, 0xdb, 0x54, 0xd4, 0x4b, 0xcd, 0xe8, 0x3a, 0x5a, 0x87, 0x63, 0x67, 0x28, 0x43,
	0xad, 0xd3, 0xbf, 0x32, 0xf4, 0xbe, 0xd2, 0x11, 0xa5, 0x53, 0x0c, 0xf1, 0x62, 0x2e, 0x9d, 0xfe,
	0x59, 0x84, 0x52, 0x57, 0x34, 0x0f, 0xbe, 0x86, 0xf2, 0x62, 0xbb, 0xa2, 0x9c, 0xb7, 0xd4, 0x87,
	0x0b, 0xb7, 0x81, 0x0f, 0x77, 0x03, 0x7e, 0x0b, 0x7b, 0xab, 0xf3, 0x19, 0x9f, 0x2e, 0x38, 0x0f,
	0xa7, 0xf6, 0x46, 0x07, 0x43, 0x78, 0xb2, 0x71, 0x30, 0xe2, 0x8b, 0x75, 0xf2, 0xe6, 0xb9, 0xd9,
	0x38, 0x6a, 0xa7, 0x9f, 0x0d, 0xed, 0xfc, 0xb3, 0xa1, 0x4d, 0xf9, 0x67, 0x03, 0xf6, 0xa0, 0xf6,
	0x60, 0xcc, 0x61, 0xf3, 0xa1, 0xcb, 0xf5, 0x09, 0xf8, 0x51, 0x77, 0x5f, 0x43, 0x79, 0x71, 0xd7,
	0x97, 0x15, 0xfa, 0xf0, 0xfa, 0x37, 0xea, 0x9b, 0xae, 0x23, 0xaf, 0xd1, 0xea, 0x16, 0x59, 0xd6,
	0x68, 0xc3, 0x6e, 0xd9, 0x58, 0x23, 0x05, 0xf6, 0xd7, 0xa6, 0x2c, 0x3e, 0x5b, 0x6c, 0xff, 0x0d,
	0xc3, 0x77, 0x93, 0x8b, 0x51, 0x49, 0x24, 0xf4, 0xc5, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6b,
	0x44, 0x0b, 0x0a, 0xa5, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GerritClient is the client API for Gerrit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GerritClient interface {
	// Loads a change by id.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-change
	GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Create a new empty change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#create-change
	CreateChange(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Edit a single file within an existing change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#put-edit-file
	ChangeEditFileContent(ctx context.Context, in *ChangeEditFileContentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Publish all changes in a a change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#publish-edit
	ChangeEditPublish(ctx context.Context, in *ChangeEditPublishRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Set various review bits on a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#set-review
	SetReview(ctx context.Context, in *SetReviewRequest, opts ...grpc.CallOption) (*ReviewResult, error)
	// Submit a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-change
	SubmitChange(ctx context.Context, in *SubmitChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Abandon a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#abandon-change
	AbandonChange(ctx context.Context, in *AbandonChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
}
type gerritPRPCClient struct {
	client *prpc.Client
}

func NewGerritPRPCClient(client *prpc.Client) GerritClient {
	return &gerritPRPCClient{client}
}

func (c *gerritPRPCClient) GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.client.Call(ctx, "gerrit.Gerrit", "GetChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) CreateChange(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.client.Call(ctx, "gerrit.Gerrit", "CreateChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) ChangeEditFileContent(ctx context.Context, in *ChangeEditFileContentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "gerrit.Gerrit", "ChangeEditFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) ChangeEditPublish(ctx context.Context, in *ChangeEditPublishRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "gerrit.Gerrit", "ChangeEditPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) SetReview(ctx context.Context, in *SetReviewRequest, opts ...grpc.CallOption) (*ReviewResult, error) {
	out := new(ReviewResult)
	err := c.client.Call(ctx, "gerrit.Gerrit", "SetReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) SubmitChange(ctx context.Context, in *SubmitChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.client.Call(ctx, "gerrit.Gerrit", "SubmitChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) AbandonChange(ctx context.Context, in *AbandonChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.client.Call(ctx, "gerrit.Gerrit", "AbandonChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type gerritClient struct {
	cc *grpc.ClientConn
}

func NewGerritClient(cc *grpc.ClientConn) GerritClient {
	return &gerritClient{cc}
}

func (c *gerritClient) GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/GetChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) CreateChange(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/CreateChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) ChangeEditFileContent(ctx context.Context, in *ChangeEditFileContentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/ChangeEditFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) ChangeEditPublish(ctx context.Context, in *ChangeEditPublishRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/ChangeEditPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) SetReview(ctx context.Context, in *SetReviewRequest, opts ...grpc.CallOption) (*ReviewResult, error) {
	out := new(ReviewResult)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/SetReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) SubmitChange(ctx context.Context, in *SubmitChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/SubmitChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) AbandonChange(ctx context.Context, in *AbandonChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/AbandonChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GerritServer is the server API for Gerrit service.
type GerritServer interface {
	// Loads a change by id.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-change
	GetChange(context.Context, *GetChangeRequest) (*ChangeInfo, error)
	// Create a new empty change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#create-change
	CreateChange(context.Context, *CreateChangeRequest) (*ChangeInfo, error)
	// Edit a single file within an existing change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#put-edit-file
	ChangeEditFileContent(context.Context, *ChangeEditFileContentRequest) (*empty.Empty, error)
	// Publish all changes in a a change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#publish-edit
	ChangeEditPublish(context.Context, *ChangeEditPublishRequest) (*empty.Empty, error)
	// Set various review bits on a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#set-review
	SetReview(context.Context, *SetReviewRequest) (*ReviewResult, error)
	// Submit a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-change
	SubmitChange(context.Context, *SubmitChangeRequest) (*ChangeInfo, error)
	// Abandon a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#abandon-change
	AbandonChange(context.Context, *AbandonChangeRequest) (*ChangeInfo, error)
}

func RegisterGerritServer(s prpc.Registrar, srv GerritServer) {
	s.RegisterService(&_Gerrit_serviceDesc, srv)
}

func _Gerrit_GetChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).GetChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/GetChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).GetChange(ctx, req.(*GetChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_CreateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).CreateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/CreateChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).CreateChange(ctx, req.(*CreateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_ChangeEditFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEditFileContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ChangeEditFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/ChangeEditFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ChangeEditFileContent(ctx, req.(*ChangeEditFileContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_ChangeEditPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEditPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ChangeEditPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/ChangeEditPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ChangeEditPublish(ctx, req.(*ChangeEditPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_SetReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).SetReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/SetReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).SetReview(ctx, req.(*SetReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_SubmitChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).SubmitChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/SubmitChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).SubmitChange(ctx, req.(*SubmitChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_AbandonChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbandonChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).AbandonChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/AbandonChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).AbandonChange(ctx, req.(*AbandonChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gerrit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gerrit.Gerrit",
	HandlerType: (*GerritServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChange",
			Handler:    _Gerrit_GetChange_Handler,
		},
		{
			MethodName: "CreateChange",
			Handler:    _Gerrit_CreateChange_Handler,
		},
		{
			MethodName: "ChangeEditFileContent",
			Handler:    _Gerrit_ChangeEditFileContent_Handler,
		},
		{
			MethodName: "ChangeEditPublish",
			Handler:    _Gerrit_ChangeEditPublish_Handler,
		},
		{
			MethodName: "SetReview",
			Handler:    _Gerrit_SetReview_Handler,
		},
		{
			MethodName: "SubmitChange",
			Handler:    _Gerrit_SubmitChange_Handler,
		},
		{
			MethodName: "AbandonChange",
			Handler:    _Gerrit_AbandonChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/common/proto/gerrit/gerrit.proto",
}
