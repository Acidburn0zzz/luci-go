// Copyright (c) 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package milo;

import "google/protobuf/timestamp.proto";

// Status is the expressed root step of this step or substep.
enum Status {
  // The step is still running.
  RUNNING = 0;
  // The step has finished successfully.
  SUCCESS = 1;
  // The step has finished unsuccessfully.
  FAILURE = 2;
  // The step has finished unexpectedly.
  EXCEPTION = 3;
}

// FailureType provides more details on the nature of the Status.
message FailureDetails {
  // Type is the type of failure.
  enum Type {
    // The failure is a general failure.
    GENERAL = 0;
    // The failure is related to a failed infrastructure component, not an error
    // with the Step itself.
    INFRA = 1;
    // The failure is due to a failed Dungeon Master dependency. This should be
    // used if a Step's external depdendency fails and the Step cannot recover
    // or proceed without it.
    DM_DEPENDENCY_FAILED = 2;
  }
  Type type = 1;

  // An optional string describing the failure.
  string text = 2;

  // If the failure type is DEPENDENCY_FAILED, the failed dependencies should be
  // listed here.
  repeated DMLink failed_dm_dependency = 3;
}

// Generic step or substep state.
message Step {
  // The command-line invocation of the step, expressed as an argument vector.
  Command command = 1;

  // Optional information detailing the failure. This may be populated if the
  // Step's top-level command Status is set to FAILURE.
  FailureDetails failure_details = 2;

  // Base Component information describing the high-level Step.
  Component step_component = 3;

  // Sub-components that are part of the Step.
  repeated Component components = 4;

  // Substeps will be constructed as extensions on the parent LogDog stream.
  //
  // For example, if the parent's logging base path is:
  // luci/dm/QUEST/ATTEMPT/EXECUTION/+/
  //
  // Its substep #0 will have logging base path:
  // luci/dm/QUEST/ATTEMPT/EXECUTION/+/steps/0
  //
  // ... which can have known log stream names appended to it for the full
  // log stream path. The following appendages are part of the standard
  // Milo protocol expectations:
  // - .../stdout: A text stream containing the Step's STDOUT.
  // - .../stderr: A text stream containing the Step's STDERR.
  // - .../annotation: A text stream containing the Step's annotation stream
  //                   protobuf (Step message protobuf).
  //
  // For example:
  // - luci/dm/QUEST/ATTEMPT/EXECUTION/+/steps/0/stdout
  // - luci/dm/QUEST/ATTEMPT/EXECUTION/+/steps/0/annotations
  repeated string substep_logdog_name_base = 5;
}

// A Component represents a renderable state.
message Component {
  // The display name of the Component.
  string name = 1;

  // Type classifies the information associated with the Note.
  Status status = 2;

  // When the step started, expressed as an RFC3339 string using Z (UTC)
  // timezone.
  google.protobuf.Timestamp started = 3;

  // When the step ended, expressed as an RFC3339 string using Z (UTC) timezone.
  google.protobuf.Timestamp ended = 4;

  // Arbitrary lines of component text. Each string here is a consecutive line,
  // and should not contain newlines.
  repeated string text = 5;

  // The Component's progress.
  Progress progress = 6;

  // A Link is an optional label followed by a typed link to an external
  // resource.
  message Link {
    // An optional display label for the link.
    string label = 1;

    oneof value {
      string url = 2;
      // (One of) A LogDog stream link.
      LogdogStream logdog_stream = 3;
      // (One of) An isolate server link.
      IsolateObject isolate_object = 4;
      // (One of) A link to a Dungeon Master object.
      DMLink dm_link = 5;
    }
  }
  // The primary link for this Component. This is the link that interaction
  // with the Component will use.
  Link link = 7;
  // Additional links related to the Component. These will be rendered alongside
  // the component.
  repeated Link other_links = 8;

  // Property is an arbitrary key/value (build) property.
  message Property {
    // name is the property name.
    string name = 1;
    // value is the optional property value.
    string value = 2;
  }
  repeated Property property = 9;
}

// Command contains information about a command-line invocation.
message Command {
  // The command-line invocation, expressed as an argument vector.
  repeated string command_line = 1;
  // The current working directory.
  string cwd = 2;

  // Environment represents the state of a process' environment.
  message Environment {
    // Entry is a single key/value environment entry.
    message Entry {
      // Name is the name of the environment variable.
      string name = 1;
      // Value is the value of the environment variable. This may be empty.
      string value = 2;
    }
    // The entries that compose the environment.
    repeated Entry entries = 1;
  }
  Environment environ = 3;
}

// Progress expresses a Component's overall progress. It does this using
// arbitrary "progress units", wich are discrete units of work measured by the
// Component that are either completed or not completed.
//
// A simple construction for "percentage complete" is to set `total` to 100 and
// `completed` to the percentage value.
message Progress {
  // The total number of progress units. If missing or zero, no progress is
  // expressed.
  int32 total = 1;
  // The number of completed progress units. This must always be less than or
  // equal to `total`. If omitted, it is implied to be zero.
  int32 completed = 2;
}

// LogdogLink is a LogDog stream link.
message LogdogStream {
  // The stream's server. If omitted, the server is the same server that this
  // annotation stream is homed on.
  string server = 1;
  // The log Prefix. If empty, the prefix is the same prefix as this annotation
  // stream.
  string prefix = 2;
  // The log name.
  string name = 3;
}

// IsolateObject is an Isolate service object specification.
message IsolateObject {
  // The Isolate server. If empty, this is the default Isolate server specified
  // by the project's LUCI config.
  string server = 1;
  // The isolate object hash.
  string hash = 2;
}

// Dependency is a Dungeon Master execution specification.
message DMLink {
  // The Dungeon Master server. If empty, this is the default Isolate server
  // specified by the project's LUCI config.
  string server = 1;

  // The quest name.
  string quest = 2;

  // The attempt number.
  int64 attempt = 3;

  // The execution number.
  int64 execution = 4;
}
