// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/common/proto/milo/manifest_diff.proto

package milo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import git "go.chromium.org/luci/common/proto/git"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Stat indicates how a given item has changed.
type ManifestDiff_Stat int32

const (
	// These two items are identical
	ManifestDiff_EQUAL ManifestDiff_Stat = 0
	// The item was added in `new` compared to `old`
	ManifestDiff_ADDED ManifestDiff_Stat = 1
	// The item was removed in `new` compared to `old`
	ManifestDiff_REMOVED ManifestDiff_Stat = 2
	// The item is in both, but is incomparable (e.g. repo_url changed from
	// `old` to `new`).
	ManifestDiff_MODIFIED ManifestDiff_Stat = 4
	// The item is in both, and is directly comparable (e.g. different
	// revisions of the same repo_url). This only applies to SCM messages.
	//
	// This is 0x8 | MODIFIED, so that users who don't care about DIFF v.
	// MODIFIED can check `Status & MODIFIED`.
	ManifestDiff_DIFF ManifestDiff_Stat = 12
)

var ManifestDiff_Stat_name = map[int32]string{
	0:  "EQUAL",
	1:  "ADDED",
	2:  "REMOVED",
	4:  "MODIFIED",
	12: "DIFF",
}
var ManifestDiff_Stat_value = map[string]int32{
	"EQUAL":    0,
	"ADDED":    1,
	"REMOVED":  2,
	"MODIFIED": 4,
	"DIFF":     12,
}

func (x ManifestDiff_Stat) String() string {
	return proto.EnumName(ManifestDiff_Stat_name, int32(x))
}
func (ManifestDiff_Stat) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

// ManifestDiff holds basic difference information between two source manifests.
type ManifestDiff struct {
	// The older of the two manifests.
	Old *Manifest `protobuf:"bytes,1,opt,name=old" json:"old,omitempty"`
	// The newer of the two manifests.
	New *Manifest `protobuf:"bytes,2,opt,name=new" json:"new,omitempty"`
	// This indicates if there is some overall difference between old and new.
	Overall     ManifestDiff_Stat                  `protobuf:"varint,3,opt,name=overall,enum=milo.ManifestDiff_Stat" json:"overall,omitempty"`
	Directories map[string]*ManifestDiff_Directory `protobuf:"bytes,4,rep,name=directories" json:"directories,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ManifestDiff) Reset()                    { *m = ManifestDiff{} }
func (m *ManifestDiff) String() string            { return proto.CompactTextString(m) }
func (*ManifestDiff) ProtoMessage()               {}
func (*ManifestDiff) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ManifestDiff) GetOld() *Manifest {
	if m != nil {
		return m.Old
	}
	return nil
}

func (m *ManifestDiff) GetNew() *Manifest {
	if m != nil {
		return m.New
	}
	return nil
}

func (m *ManifestDiff) GetOverall() ManifestDiff_Stat {
	if m != nil {
		return m.Overall
	}
	return ManifestDiff_EQUAL
}

func (m *ManifestDiff) GetDirectories() map[string]*ManifestDiff_Directory {
	if m != nil {
		return m.Directories
	}
	return nil
}

type ManifestDiff_GitCheckout struct {
	// Note: if this is DIFF, it is sensible to compute
	//   `git log git_canonical_url old.revision new.revision`
	Overall ManifestDiff_Stat `protobuf:"varint,1,opt,name=overall,enum=milo.ManifestDiff_Stat" json:"overall,omitempty"`
	// This URL should be used for RPCs. It may differ from the url in old or
	// new if the service computing this ManifestDiff knows of e.g. a repo URL
	// migration.
	RepoUrl string `protobuf:"bytes,2,opt,name=repo_url,json=repoUrl" json:"repo_url,omitempty"`
	// If git_checkout==DIFF, and your request included history, this will be
	// populated with GitCommits.
	History []*git.Commit `protobuf:"bytes,3,rep,name=history" json:"history,omitempty"`
}

func (m *ManifestDiff_GitCheckout) Reset()                    { *m = ManifestDiff_GitCheckout{} }
func (m *ManifestDiff_GitCheckout) String() string            { return proto.CompactTextString(m) }
func (*ManifestDiff_GitCheckout) ProtoMessage()               {}
func (*ManifestDiff_GitCheckout) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

func (m *ManifestDiff_GitCheckout) GetOverall() ManifestDiff_Stat {
	if m != nil {
		return m.Overall
	}
	return ManifestDiff_EQUAL
}

func (m *ManifestDiff_GitCheckout) GetRepoUrl() string {
	if m != nil {
		return m.RepoUrl
	}
	return ""
}

func (m *ManifestDiff_GitCheckout) GetHistory() []*git.Commit {
	if m != nil {
		return m.History
	}
	return nil
}

type ManifestDiff_Directory struct {
	// This is the overall status for this Directory.
	Overall        ManifestDiff_Stat         `protobuf:"varint,1,opt,name=overall,enum=milo.ManifestDiff_Stat" json:"overall,omitempty"`
	GitCheckout    *ManifestDiff_GitCheckout `protobuf:"bytes,2,opt,name=git_checkout,json=gitCheckout" json:"git_checkout,omitempty"`
	CipdServerHost ManifestDiff_Stat         `protobuf:"varint,3,opt,name=cipd_server_host,json=cipdServerHost,enum=milo.ManifestDiff_Stat" json:"cipd_server_host,omitempty"`
	// Note: this will only ever be MODIFIED, because we cannot (yet) determine
	// if two versions of a cipd package are diffable. We may later implement
	// DIFF detection (i.e. if both packages use `version:<sha1>` tags).
	CipdPackage        map[string]ManifestDiff_Stat `protobuf:"bytes,4,rep,name=cipd_package,json=cipdPackage" json:"cipd_package,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=milo.ManifestDiff_Stat"`
	IsolatedServerHost ManifestDiff_Stat            `protobuf:"varint,5,opt,name=isolated_server_host,json=isolatedServerHost,enum=milo.ManifestDiff_Stat" json:"isolated_server_host,omitempty"`
	// This merely indicates if the list of isolated hashes was the same or not;
	// there's not a good way to register the two lists.
	//
	// Since order-of-application for isolateds matters, this will indicate
	// MODIFIED if the order of isolated hashes changes.
	Isolated ManifestDiff_Stat `protobuf:"varint,6,opt,name=isolated,enum=milo.ManifestDiff_Stat" json:"isolated,omitempty"`
}

func (m *ManifestDiff_Directory) Reset()                    { *m = ManifestDiff_Directory{} }
func (m *ManifestDiff_Directory) String() string            { return proto.CompactTextString(m) }
func (*ManifestDiff_Directory) ProtoMessage()               {}
func (*ManifestDiff_Directory) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 1} }

func (m *ManifestDiff_Directory) GetOverall() ManifestDiff_Stat {
	if m != nil {
		return m.Overall
	}
	return ManifestDiff_EQUAL
}

func (m *ManifestDiff_Directory) GetGitCheckout() *ManifestDiff_GitCheckout {
	if m != nil {
		return m.GitCheckout
	}
	return nil
}

func (m *ManifestDiff_Directory) GetCipdServerHost() ManifestDiff_Stat {
	if m != nil {
		return m.CipdServerHost
	}
	return ManifestDiff_EQUAL
}

func (m *ManifestDiff_Directory) GetCipdPackage() map[string]ManifestDiff_Stat {
	if m != nil {
		return m.CipdPackage
	}
	return nil
}

func (m *ManifestDiff_Directory) GetIsolatedServerHost() ManifestDiff_Stat {
	if m != nil {
		return m.IsolatedServerHost
	}
	return ManifestDiff_EQUAL
}

func (m *ManifestDiff_Directory) GetIsolated() ManifestDiff_Stat {
	if m != nil {
		return m.Isolated
	}
	return ManifestDiff_EQUAL
}

func init() {
	proto.RegisterType((*ManifestDiff)(nil), "milo.ManifestDiff")
	proto.RegisterType((*ManifestDiff_GitCheckout)(nil), "milo.ManifestDiff.GitCheckout")
	proto.RegisterType((*ManifestDiff_Directory)(nil), "milo.ManifestDiff.Directory")
	proto.RegisterEnum("milo.ManifestDiff_Stat", ManifestDiff_Stat_name, ManifestDiff_Stat_value)
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/common/proto/milo/manifest_diff.proto", fileDescriptor2)
}

var fileDescriptor2 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0xad, 0x2c, 0x3b, 0xb6, 0x47, 0xc6, 0x88, 0xa5, 0x50, 0x55, 0x94, 0x62, 0x52, 0x0a, 0xbe,
	0x44, 0xa6, 0x0a, 0x85, 0x92, 0x9b, 0xb1, 0xe4, 0xd6, 0x50, 0x93, 0x54, 0x21, 0xed, 0xa5, 0x60,
	0x54, 0x79, 0x2d, 0x2f, 0x96, 0xb4, 0x62, 0xb5, 0x72, 0xd0, 0xb5, 0xdf, 0xda, 0x7b, 0x7f, 0xa1,
	0xec, 0x5a, 0x6a, 0x94, 0x60, 0x94, 0x36, 0xb7, 0xf5, 0xcc, 0x7b, 0x6f, 0xde, 0xcc, 0xb3, 0xe0,
	0x22, 0xa4, 0x56, 0xb0, 0x65, 0x34, 0x26, 0x79, 0x6c, 0x51, 0x16, 0x4e, 0xa2, 0x3c, 0x20, 0x93,
	0x80, 0xc6, 0x31, 0x4d, 0x26, 0x29, 0xa3, 0x9c, 0x4e, 0x62, 0x12, 0xd1, 0x49, 0xec, 0x27, 0x64,
	0x83, 0x33, 0xbe, 0x5a, 0x93, 0xcd, 0xc6, 0x92, 0x0d, 0xd4, 0x16, 0x1d, 0xd3, 0x7e, 0x5c, 0x21,
	0x24, 0x5c, 0x16, 0x08, 0x3f, 0x30, 0xcd, 0xf7, 0xff, 0x39, 0xf5, 0x40, 0x3b, 0xfd, 0xd5, 0x85,
	0xc1, 0xb2, 0x2c, 0x39, 0x64, 0xb3, 0x41, 0x23, 0x50, 0x69, 0xb4, 0x36, 0x94, 0x91, 0x32, 0xd6,
	0xec, 0xa1, 0x25, 0x38, 0x56, 0x05, 0xf0, 0x44, 0x4b, 0x20, 0x12, 0x7c, 0x6b, 0xb4, 0x8e, 0x23,
	0x12, 0x7c, 0x8b, 0xde, 0x41, 0x97, 0xee, 0x31, 0xf3, 0xa3, 0xc8, 0x50, 0x47, 0xca, 0x78, 0x68,
	0xbf, 0xb8, 0x8f, 0x12, 0x83, 0xac, 0x6b, 0xee, 0x73, 0xaf, 0xc2, 0x21, 0x17, 0xb4, 0x35, 0x61,
	0x38, 0xe0, 0x94, 0x11, 0x9c, 0x19, 0xed, 0x91, 0x3a, 0xd6, 0xec, 0x37, 0x47, 0x68, 0xce, 0x1d,
	0xca, 0x4d, 0x38, 0x2b, 0xbc, 0x3a, 0xcf, 0xfc, 0xa9, 0x80, 0xf6, 0x91, 0xf0, 0xd9, 0x16, 0x07,
	0x3b, 0x9a, 0xf3, 0xba, 0x13, 0xe5, 0x1f, 0x9d, 0xbc, 0x84, 0x1e, 0xc3, 0x29, 0x5d, 0xe5, 0x2c,
	0x92, 0x3b, 0xf6, 0xbd, 0xae, 0xf8, 0x7d, 0xc3, 0x22, 0xf4, 0x16, 0xba, 0x5b, 0x92, 0x71, 0xca,
	0x0a, 0x43, 0x95, 0x06, 0x35, 0x2b, 0x24, 0xdc, 0x9a, 0xc9, 0x1c, 0xbc, 0xaa, 0x67, 0xfe, 0x56,
	0xa1, 0x5f, 0xd9, 0x2c, 0x9e, 0x62, 0x61, 0x0a, 0x83, 0x90, 0xf0, 0x55, 0x50, 0x6e, 0x51, 0x9e,
	0xfa, 0xf5, 0x11, 0x5e, 0x6d, 0x57, 0x4f, 0x0b, 0x6b, 0x8b, 0x4f, 0x41, 0x0f, 0x48, 0xba, 0x5e,
	0x65, 0x98, 0xed, 0x31, 0x5b, 0x6d, 0x69, 0xc6, 0x1f, 0xcb, 0x62, 0x28, 0x08, 0xd7, 0x12, 0xff,
	0x89, 0x66, 0x1c, 0x5d, 0xc1, 0x40, 0x4a, 0xa4, 0x7e, 0xb0, 0xf3, 0x43, 0x5c, 0x66, 0x72, 0xd6,
	0x90, 0x49, 0x61, 0xcd, 0x48, 0xba, 0xbe, 0x3a, 0xe0, 0xcb, 0x74, 0x82, 0xbb, 0x0a, 0x5a, 0xc0,
	0x73, 0x92, 0xd1, 0xc8, 0xe7, 0xf8, 0xbe, 0xb1, 0x4e, 0xb3, 0x31, 0x54, 0x91, 0x6a, 0xe6, 0xce,
	0xa1, 0x57, 0x55, 0x8d, 0x93, 0x66, 0xfa, 0x5f, 0xa0, 0xf9, 0x0d, 0xf4, 0x87, 0x06, 0x91, 0x0e,
	0xea, 0x0e, 0x17, 0x32, 0x9a, 0xbe, 0x27, 0x9e, 0xe8, 0x0c, 0x3a, 0x7b, 0x3f, 0xca, 0xb1, 0x3c,
	0x7b, 0x83, 0xee, 0x01, 0x75, 0xd1, 0xfa, 0xa0, 0x98, 0xdf, 0x41, 0x7f, 0xf8, 0xbf, 0x3c, 0x22,
	0x6c, 0xd7, 0x85, 0x35, 0xfb, 0x55, 0xd3, 0x25, 0x6b, 0xea, 0xa7, 0x53, 0x68, 0x8b, 0x81, 0xa8,
	0x0f, 0x1d, 0xf7, 0xcb, 0xcd, 0xf4, 0xb3, 0xfe, 0x4c, 0x3c, 0xa7, 0x8e, 0xe3, 0x3a, 0xba, 0x82,
	0x34, 0xe8, 0x7a, 0xee, 0xf2, 0xf2, 0xab, 0xeb, 0xe8, 0x2d, 0x34, 0x80, 0xde, 0xf2, 0xd2, 0x59,
	0xcc, 0x17, 0xae, 0xa3, 0xb7, 0x51, 0x0f, 0xda, 0xce, 0x62, 0x3e, 0xd7, 0x07, 0x3f, 0x4e, 0xe4,
	0xd7, 0x7e, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xa9, 0x7d, 0x4c, 0x9c, 0x04, 0x00, 0x00,
}
