// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/common/proto/milo/manifest_diff.proto

package milo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import git "go.chromium.org/luci/common/proto/git"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Stat indicates how a given item has changed.
type ManifestDiff_Stat int32

const (
	// These two items are identical
	ManifestDiff_EQUAL ManifestDiff_Stat = 0
	// The item was added in `new` compared to `old`
	ManifestDiff_ADDED ManifestDiff_Stat = 1
	// The item was removed in `new` compared to `old`
	ManifestDiff_REMOVED ManifestDiff_Stat = 2
	// The item is in both, but is incomparable (e.g. repo_url changed from
	// `old` to `new`).
	ManifestDiff_MODIFIED ManifestDiff_Stat = 4
	// The item is in both, and is directly comparable (e.g. different
	// revisions of the same repo_url). This only applies to the revision fields
	// of SCM messages.
	//
	// This is 0x8 | MODIFIED, so that users who don't care about DIFF v.
	// MODIFIED can check `Status & MODIFIED`.
	ManifestDiff_DIFF ManifestDiff_Stat = 12
)

var ManifestDiff_Stat_name = map[int32]string{
	0:  "EQUAL",
	1:  "ADDED",
	2:  "REMOVED",
	4:  "MODIFIED",
	12: "DIFF",
}
var ManifestDiff_Stat_value = map[string]int32{
	"EQUAL":    0,
	"ADDED":    1,
	"REMOVED":  2,
	"MODIFIED": 4,
	"DIFF":     12,
}

func (x ManifestDiff_Stat) String() string {
	return proto.EnumName(ManifestDiff_Stat_name, int32(x))
}
func (ManifestDiff_Stat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_manifest_diff_0c29ec2e8e2398d2, []int{0, 0}
}

// ManifestDiff holds basic difference information between two source manifests.
type ManifestDiff struct {
	// The older of the two manifests.
	Old *Manifest `protobuf:"bytes,1,opt,name=old" json:"old,omitempty"`
	// The newer of the two manifests.
	New *Manifest `protobuf:"bytes,2,opt,name=new" json:"new,omitempty"`
	// Indicates if there is some overall difference between old and new.
	Overall              ManifestDiff_Stat                  `protobuf:"varint,3,opt,name=overall,enum=milo.ManifestDiff_Stat" json:"overall,omitempty"`
	Directories          map[string]*ManifestDiff_Directory `protobuf:"bytes,4,rep,name=directories" json:"directories,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *ManifestDiff) Reset()         { *m = ManifestDiff{} }
func (m *ManifestDiff) String() string { return proto.CompactTextString(m) }
func (*ManifestDiff) ProtoMessage()    {}
func (*ManifestDiff) Descriptor() ([]byte, []int) {
	return fileDescriptor_manifest_diff_0c29ec2e8e2398d2, []int{0}
}
func (m *ManifestDiff) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManifestDiff.Unmarshal(m, b)
}
func (m *ManifestDiff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManifestDiff.Marshal(b, m, deterministic)
}
func (dst *ManifestDiff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManifestDiff.Merge(dst, src)
}
func (m *ManifestDiff) XXX_Size() int {
	return xxx_messageInfo_ManifestDiff.Size(m)
}
func (m *ManifestDiff) XXX_DiscardUnknown() {
	xxx_messageInfo_ManifestDiff.DiscardUnknown(m)
}

var xxx_messageInfo_ManifestDiff proto.InternalMessageInfo

func (m *ManifestDiff) GetOld() *Manifest {
	if m != nil {
		return m.Old
	}
	return nil
}

func (m *ManifestDiff) GetNew() *Manifest {
	if m != nil {
		return m.New
	}
	return nil
}

func (m *ManifestDiff) GetOverall() ManifestDiff_Stat {
	if m != nil {
		return m.Overall
	}
	return ManifestDiff_EQUAL
}

func (m *ManifestDiff) GetDirectories() map[string]*ManifestDiff_Directory {
	if m != nil {
		return m.Directories
	}
	return nil
}

type ManifestDiff_GitCheckout struct {
	// Indicates if there is some overall difference between old and new.
	Overall ManifestDiff_Stat `protobuf:"varint,1,opt,name=overall,enum=milo.ManifestDiff_Stat" json:"overall,omitempty"`
	// Indicates the status for the `revision` field.
	//
	// If this is DIFF, it is sensible to compute
	//   `git log repo_url old.revision new.revision`
	Revision ManifestDiff_Stat `protobuf:"varint,2,opt,name=revision,enum=milo.ManifestDiff_Stat" json:"revision,omitempty"`
	// Indicates the status for the `patch_revision` field. It evaluates
	// the patch_fetch_ref values to ensure that old and new are different
	// patches from the same CL.
	//
	// If this is DIFF, it is sensible to compute
	//   `git log repo_url old.patch_revision new.patch_revision`
	PatchRevision ManifestDiff_Stat `protobuf:"varint,3,opt,name=patch_revision,json=patchRevision,enum=milo.ManifestDiff_Stat" json:"patch_revision,omitempty"`
	// The URL that should be used for RPCs. It may differ from the url in old
	// or new if the service computing this ManifestDiff knows of e.g. a repo
	// URL migration.
	RepoUrl string `protobuf:"bytes,4,opt,name=repo_url,json=repoUrl" json:"repo_url,omitempty"`
	// If revision==DIFF, this may be populated with git history occuring
	// between the two base revisions.
	History              []*git.Commit `protobuf:"bytes,5,rep,name=history" json:"history,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ManifestDiff_GitCheckout) Reset()         { *m = ManifestDiff_GitCheckout{} }
func (m *ManifestDiff_GitCheckout) String() string { return proto.CompactTextString(m) }
func (*ManifestDiff_GitCheckout) ProtoMessage()    {}
func (*ManifestDiff_GitCheckout) Descriptor() ([]byte, []int) {
	return fileDescriptor_manifest_diff_0c29ec2e8e2398d2, []int{0, 0}
}
func (m *ManifestDiff_GitCheckout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManifestDiff_GitCheckout.Unmarshal(m, b)
}
func (m *ManifestDiff_GitCheckout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManifestDiff_GitCheckout.Marshal(b, m, deterministic)
}
func (dst *ManifestDiff_GitCheckout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManifestDiff_GitCheckout.Merge(dst, src)
}
func (m *ManifestDiff_GitCheckout) XXX_Size() int {
	return xxx_messageInfo_ManifestDiff_GitCheckout.Size(m)
}
func (m *ManifestDiff_GitCheckout) XXX_DiscardUnknown() {
	xxx_messageInfo_ManifestDiff_GitCheckout.DiscardUnknown(m)
}

var xxx_messageInfo_ManifestDiff_GitCheckout proto.InternalMessageInfo

func (m *ManifestDiff_GitCheckout) GetOverall() ManifestDiff_Stat {
	if m != nil {
		return m.Overall
	}
	return ManifestDiff_EQUAL
}

func (m *ManifestDiff_GitCheckout) GetRevision() ManifestDiff_Stat {
	if m != nil {
		return m.Revision
	}
	return ManifestDiff_EQUAL
}

func (m *ManifestDiff_GitCheckout) GetPatchRevision() ManifestDiff_Stat {
	if m != nil {
		return m.PatchRevision
	}
	return ManifestDiff_EQUAL
}

func (m *ManifestDiff_GitCheckout) GetRepoUrl() string {
	if m != nil {
		return m.RepoUrl
	}
	return ""
}

func (m *ManifestDiff_GitCheckout) GetHistory() []*git.Commit {
	if m != nil {
		return m.History
	}
	return nil
}

type ManifestDiff_Directory struct {
	// This is the overall status for this Directory.
	Overall        ManifestDiff_Stat         `protobuf:"varint,1,opt,name=overall,enum=milo.ManifestDiff_Stat" json:"overall,omitempty"`
	GitCheckout    *ManifestDiff_GitCheckout `protobuf:"bytes,2,opt,name=git_checkout,json=gitCheckout" json:"git_checkout,omitempty"`
	CipdServerHost ManifestDiff_Stat         `protobuf:"varint,3,opt,name=cipd_server_host,json=cipdServerHost,enum=milo.ManifestDiff_Stat" json:"cipd_server_host,omitempty"`
	// Note: this will only ever be MODIFIED, because we cannot (yet) determine
	// if two versions of a cipd package are diffable. We may later implement
	// DIFF detection (i.e. if both packages use `version:<sha1>` tags).
	CipdPackage        map[string]ManifestDiff_Stat `protobuf:"bytes,4,rep,name=cipd_package,json=cipdPackage" json:"cipd_package,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=milo.ManifestDiff_Stat"`
	IsolatedServerHost ManifestDiff_Stat            `protobuf:"varint,5,opt,name=isolated_server_host,json=isolatedServerHost,enum=milo.ManifestDiff_Stat" json:"isolated_server_host,omitempty"`
	// This merely indicates if the list of isolated hashes was the same or not;
	// there's not a good way to register the two lists.
	//
	// Since order-of-application for isolateds matters, this will indicate
	// MODIFIED if the order of isolated hashes changes.
	Isolated             ManifestDiff_Stat `protobuf:"varint,6,opt,name=isolated,enum=milo.ManifestDiff_Stat" json:"isolated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ManifestDiff_Directory) Reset()         { *m = ManifestDiff_Directory{} }
func (m *ManifestDiff_Directory) String() string { return proto.CompactTextString(m) }
func (*ManifestDiff_Directory) ProtoMessage()    {}
func (*ManifestDiff_Directory) Descriptor() ([]byte, []int) {
	return fileDescriptor_manifest_diff_0c29ec2e8e2398d2, []int{0, 1}
}
func (m *ManifestDiff_Directory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManifestDiff_Directory.Unmarshal(m, b)
}
func (m *ManifestDiff_Directory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManifestDiff_Directory.Marshal(b, m, deterministic)
}
func (dst *ManifestDiff_Directory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManifestDiff_Directory.Merge(dst, src)
}
func (m *ManifestDiff_Directory) XXX_Size() int {
	return xxx_messageInfo_ManifestDiff_Directory.Size(m)
}
func (m *ManifestDiff_Directory) XXX_DiscardUnknown() {
	xxx_messageInfo_ManifestDiff_Directory.DiscardUnknown(m)
}

var xxx_messageInfo_ManifestDiff_Directory proto.InternalMessageInfo

func (m *ManifestDiff_Directory) GetOverall() ManifestDiff_Stat {
	if m != nil {
		return m.Overall
	}
	return ManifestDiff_EQUAL
}

func (m *ManifestDiff_Directory) GetGitCheckout() *ManifestDiff_GitCheckout {
	if m != nil {
		return m.GitCheckout
	}
	return nil
}

func (m *ManifestDiff_Directory) GetCipdServerHost() ManifestDiff_Stat {
	if m != nil {
		return m.CipdServerHost
	}
	return ManifestDiff_EQUAL
}

func (m *ManifestDiff_Directory) GetCipdPackage() map[string]ManifestDiff_Stat {
	if m != nil {
		return m.CipdPackage
	}
	return nil
}

func (m *ManifestDiff_Directory) GetIsolatedServerHost() ManifestDiff_Stat {
	if m != nil {
		return m.IsolatedServerHost
	}
	return ManifestDiff_EQUAL
}

func (m *ManifestDiff_Directory) GetIsolated() ManifestDiff_Stat {
	if m != nil {
		return m.Isolated
	}
	return ManifestDiff_EQUAL
}

func init() {
	proto.RegisterType((*ManifestDiff)(nil), "milo.ManifestDiff")
	proto.RegisterMapType((map[string]*ManifestDiff_Directory)(nil), "milo.ManifestDiff.DirectoriesEntry")
	proto.RegisterType((*ManifestDiff_GitCheckout)(nil), "milo.ManifestDiff.GitCheckout")
	proto.RegisterType((*ManifestDiff_Directory)(nil), "milo.ManifestDiff.Directory")
	proto.RegisterMapType((map[string]ManifestDiff_Stat)(nil), "milo.ManifestDiff.Directory.CipdPackageEntry")
	proto.RegisterEnum("milo.ManifestDiff_Stat", ManifestDiff_Stat_name, ManifestDiff_Stat_value)
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/common/proto/milo/manifest_diff.proto", fileDescriptor_manifest_diff_0c29ec2e8e2398d2)
}

var fileDescriptor_manifest_diff_0c29ec2e8e2398d2 = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x51, 0x8b, 0xda, 0x40,
	0x10, 0xc7, 0x9b, 0x33, 0x9e, 0x3a, 0xb1, 0x12, 0x96, 0x42, 0xd3, 0x50, 0x8a, 0x5c, 0x29, 0xf8,
	0x72, 0x91, 0x46, 0x0a, 0xe5, 0x1e, 0x0a, 0x62, 0x62, 0x2b, 0x54, 0xee, 0x9a, 0xe3, 0xda, 0x97,
	0x42, 0x48, 0xd7, 0x35, 0x2e, 0x26, 0xd9, 0xb0, 0x59, 0x3d, 0xfc, 0xa8, 0xfd, 0x14, 0x7d, 0xec,
	0x6b, 0xd9, 0xd5, 0xdc, 0xe5, 0x0e, 0xd1, 0xb6, 0x6f, 0xeb, 0xcc, 0xef, 0x3f, 0x33, 0xfb, 0xdf,
	0x31, 0x70, 0x11, 0x33, 0x07, 0x2f, 0x38, 0x4b, 0xe9, 0x2a, 0x75, 0x18, 0x8f, 0xfb, 0xc9, 0x0a,
	0xd3, 0x3e, 0x66, 0x69, 0xca, 0xb2, 0x7e, 0xce, 0x99, 0x60, 0xfd, 0x94, 0x26, 0xac, 0x9f, 0x46,
	0x19, 0x9d, 0x93, 0x42, 0x84, 0x33, 0x3a, 0x9f, 0x3b, 0x2a, 0x81, 0x74, 0x99, 0xb1, 0xdd, 0xe3,
	0x15, 0x62, 0x2a, 0x54, 0x80, 0x8a, 0xad, 0xd2, 0x7e, 0xf7, 0x8f, 0x5d, 0xb7, 0xb2, 0xb3, 0x9f,
	0x4d, 0x68, 0x4f, 0x77, 0x21, 0x8f, 0xce, 0xe7, 0xa8, 0x0b, 0x35, 0x96, 0xcc, 0x2c, 0xad, 0xab,
	0xf5, 0x0c, 0xb7, 0xe3, 0x48, 0x8d, 0x53, 0x02, 0x81, 0x4c, 0x49, 0x22, 0x23, 0xb7, 0xd6, 0xc9,
	0x7e, 0x22, 0x23, 0xb7, 0xe8, 0x2d, 0x34, 0xd8, 0x9a, 0xf0, 0x28, 0x49, 0xac, 0x5a, 0x57, 0xeb,
	0x75, 0xdc, 0xe7, 0x0f, 0x29, 0xd9, 0xc8, 0xb9, 0x16, 0x91, 0x08, 0x4a, 0x0e, 0xf9, 0x60, 0xcc,
	0x28, 0x27, 0x58, 0x30, 0x4e, 0x49, 0x61, 0xe9, 0xdd, 0x5a, 0xcf, 0x70, 0x5f, 0xef, 0x91, 0x79,
	0xf7, 0x94, 0x9f, 0x09, 0xbe, 0x09, 0xaa, 0x3a, 0xfb, 0xb7, 0x06, 0xc6, 0x47, 0x2a, 0x46, 0x0b,
	0x82, 0x97, 0x6c, 0x25, 0xaa, 0x93, 0x68, 0x7f, 0x39, 0xc9, 0x00, 0x9a, 0x9c, 0xac, 0x69, 0x41,
	0x59, 0xa6, 0xee, 0x78, 0x40, 0x73, 0x07, 0xa2, 0x0f, 0xd0, 0xc9, 0x23, 0x81, 0x17, 0xe1, 0x9d,
	0xf4, 0xc8, 0xc5, 0x9f, 0x2a, 0x3c, 0x28, 0xf5, 0x2f, 0x64, 0xd3, 0x9c, 0x85, 0x2b, 0x9e, 0x58,
	0x7a, 0x57, 0xeb, 0xb5, 0x82, 0x86, 0xfc, 0x7d, 0xc3, 0x13, 0xf4, 0x06, 0x1a, 0x0b, 0x5a, 0x08,
	0xc6, 0x37, 0x56, 0x5d, 0xb9, 0x62, 0x38, 0x31, 0x15, 0xce, 0x48, 0x3d, 0x7e, 0x50, 0xe6, 0xec,
	0x5f, 0x35, 0x68, 0x95, 0xde, 0x6c, 0xfe, 0xe7, 0xde, 0x43, 0x68, 0xc7, 0x54, 0x84, 0x78, 0x67,
	0xdd, 0xee, 0x7d, 0x5f, 0xed, 0xd1, 0x55, 0x0c, 0x0e, 0x8c, 0xb8, 0xe2, 0xf6, 0x10, 0x4c, 0x4c,
	0xf3, 0x59, 0x58, 0x10, 0xbe, 0x26, 0x3c, 0x5c, 0xb0, 0x42, 0x1c, 0xf3, 0xa1, 0x23, 0x05, 0xd7,
	0x8a, 0xff, 0xc4, 0x0a, 0x81, 0xae, 0xa0, 0xad, 0x4a, 0xe4, 0x11, 0x5e, 0x46, 0x31, 0xd9, 0x2d,
	0xc2, 0xf9, 0x81, 0x45, 0xd8, 0x38, 0x23, 0x9a, 0xcf, 0xae, 0xb6, 0xfc, 0x6e, 0x25, 0xf0, 0x7d,
	0x04, 0x4d, 0xe0, 0x19, 0x2d, 0x58, 0x12, 0x09, 0xf2, 0x70, 0xb0, 0xfa, 0xe1, 0xc1, 0x50, 0x29,
	0xaa, 0x0c, 0x37, 0x80, 0x66, 0x19, 0xb5, 0x4e, 0x8f, 0xac, 0x46, 0x09, 0xda, 0xdf, 0xc0, 0x7c,
	0x3c, 0x20, 0x32, 0xa1, 0xb6, 0x24, 0x1b, 0xf5, 0x34, 0xad, 0x40, 0x1e, 0xd1, 0x39, 0xd4, 0xd7,
	0x51, 0xb2, 0x22, 0xc7, 0x56, 0x6e, 0x4b, 0x5d, 0x9c, 0xbc, 0xd7, 0xec, 0xef, 0x60, 0x3e, 0xfe,
	0x33, 0xec, 0x29, 0xec, 0x56, 0x0b, 0x1b, 0xee, 0xcb, 0x43, 0x4e, 0x56, 0xaa, 0x9f, 0x0d, 0x41,
	0x97, 0x0d, 0x51, 0x0b, 0xea, 0xfe, 0x97, 0x9b, 0xe1, 0x67, 0xf3, 0x89, 0x3c, 0x0e, 0x3d, 0xcf,
	0xf7, 0x4c, 0x0d, 0x19, 0xd0, 0x08, 0xfc, 0xe9, 0xe5, 0x57, 0xdf, 0x33, 0x4f, 0x50, 0x1b, 0x9a,
	0xd3, 0x4b, 0x6f, 0x32, 0x9e, 0xf8, 0x9e, 0xa9, 0xa3, 0x26, 0xe8, 0xde, 0x64, 0x3c, 0x36, 0xdb,
	0x3f, 0x4e, 0xd5, 0x27, 0x66, 0xf0, 0x27, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x60, 0xec, 0x19, 0x11,
	0x05, 0x00, 0x00,
}
