// Code generated by protoc-gen-go.
// source: log.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	log.proto
	butler.proto
	types.proto

It has these top-level messages:
	LogStreamDescriptor
	LogEntry
	LogIndex
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// *
// Log stream descriptor data. This is the full set of information that
// describes a logging stream.
type LogStreamDescriptor struct {
	//
	// The stream's prefix (required).
	//
	// Logs originating from the same Butler instance will share a Prefix.
	//
	// A valid prefix value is a StreamName described in:
	// https://github.com/luci/luci-go/common/logdog/types
	Prefix *string `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	//
	// The log stream's name (required).
	//
	// This is used to uniquely identify a log stream within the scope of its
	// prefix.
	//
	// A valid name value is a StreamName described in:
	// https://github.com/luci/luci-go/common/logdog/types
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	//
	// The stream's content type (required).
	//
	// This must be an HTTP Content-Type value. It is made available to LogDog
	// clients when querying stream metadata. It will also be applied to archived
	// binary log data.
	ContentType *string `protobuf:"bytes,3,opt,name=content_type" json:"content_type,omitempty"`
	//
	// The log stream's base timestamp (required).
	//
	// This notes the start time of the log stream. All LogEntries express their
	// timestamp as microsecond offsets from this field.
	Timestamp *Timestamp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
	// The set of associated log tags.
	Tags             []*LogStreamDescriptor_Tag `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *LogStreamDescriptor) Reset()         { *m = LogStreamDescriptor{} }
func (m *LogStreamDescriptor) String() string { return proto.CompactTextString(m) }
func (*LogStreamDescriptor) ProtoMessage()    {}

func (m *LogStreamDescriptor) GetPrefix() string {
	if m != nil && m.Prefix != nil {
		return *m.Prefix
	}
	return ""
}

func (m *LogStreamDescriptor) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *LogStreamDescriptor) GetContentType() string {
	if m != nil && m.ContentType != nil {
		return *m.ContentType
	}
	return ""
}

func (m *LogStreamDescriptor) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *LogStreamDescriptor) GetTags() []*LogStreamDescriptor_Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

//
// Tag is an arbitrary key/value tag associated with this log stream.
//
// LogDog clients can query for log streams based on tag values.
type LogStreamDescriptor_Tag struct {
	// The tag key (required).
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// The tag value.
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogStreamDescriptor_Tag) Reset()         { *m = LogStreamDescriptor_Tag{} }
func (m *LogStreamDescriptor_Tag) String() string { return proto.CompactTextString(m) }
func (*LogStreamDescriptor_Tag) ProtoMessage()    {}

func (m *LogStreamDescriptor_Tag) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *LogStreamDescriptor_Tag) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// *
// An individual log entry.
//
// This contains the superset of transmissible log data. Its content fields
// should be interpreted in the context of the log stream's content type.
type LogEntry struct {
	//
	// The stream time offset for this entry (required).
	//
	// This offset is added to the log stream's base "timestamp" to resolve the
	// timestamp for this specific LogEntry.
	TimeOffset *TimeOffset `protobuf:"bytes,1,opt,name=time_offset" json:"time_offset,omitempty"`
	//
	// The message index within the Prefix (required).
	//
	// This is value is unique to this LogEntry across the entire set of entries
	// sharing the stream's Prefix. It is used to designate unambiguous log
	// ordering.
	PrefixIndex *uint32 `protobuf:"varint,2,opt,name=prefix_index" json:"prefix_index,omitempty"`
	//
	// The message index within its Stream (required).
	//
	// This value is unique across all entries sharing the same Prefix and Stream
	// Name. It is used to designate unambiguous log ordering within the stream.
	StreamIndex *uint32 `protobuf:"varint,3,opt,name=stream_index" json:"stream_index,omitempty"`
	//
	// (Text) Lines of log text.
	//
	// For text logs, each string represents a single log line. Newlines should
	// not be included.
	Lines            []string         `protobuf:"bytes,4,rep,name=lines" json:"lines,omitempty"`
	Data             []*LogEntry_Data `protobuf:"bytes,5,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}

func (m *LogEntry) GetTimeOffset() *TimeOffset {
	if m != nil {
		return m.TimeOffset
	}
	return nil
}

func (m *LogEntry) GetPrefixIndex() uint32 {
	if m != nil && m.PrefixIndex != nil {
		return *m.PrefixIndex
	}
	return 0
}

func (m *LogEntry) GetStreamIndex() uint32 {
	if m != nil && m.StreamIndex != nil {
		return *m.StreamIndex
	}
	return 0
}

func (m *LogEntry) GetLines() []string {
	if m != nil {
		return m.Lines
	}
	return nil
}

func (m *LogEntry) GetData() []*LogEntry_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

//
// (Data) Log binary data.
//
// For binary logs, each entry is a sequential chunk of log data. For
// datagram logs, each entry is an independent datagram.
type LogEntry_Data struct {
	Value            []byte `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogEntry_Data) Reset()         { *m = LogEntry_Data{} }
func (m *LogEntry_Data) String() string { return proto.CompactTextString(m) }
func (*LogEntry_Data) ProtoMessage()    {}

func (m *LogEntry_Data) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// *
// LogIndex is an index into an at-rest log storage.
//
// The log stream and log index are generated by the Archivist during archival.
//
// An archived log stream is a series of contiguous LogEntry frames. The index
// maps a log's logical logation in its stream, prefix, and timeline to its
// frame's binary offset in the archived log stream blob.
type LogIndex struct {
	//
	// The LogStreamDescriptor for this log stream (required).
	//
	// The index stores the stream's LogStreamDescriptor so that a client can
	// know the full set of log metadata by downloading its index.
	Desc *LogStreamDescriptor `protobuf:"bytes,1,opt,name=desc" json:"desc,omitempty"`
	//
	// A series of ascending-ordered Entry messages representing snapshots of an
	// archived log stream.
	//
	// Within this set of Entry messages, the "offset", "prefix_index",
	// "stream_index", and "time_offset_us" fields will be ascending.
	//
	// The frequency of Entry messages is not defined; it is up to the Archivist
	// process to choose a frequency.
	Entries          []*LogIndex_Entry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *LogIndex) Reset()         { *m = LogIndex{} }
func (m *LogIndex) String() string { return proto.CompactTextString(m) }
func (*LogIndex) ProtoMessage()    {}

func (m *LogIndex) GetDesc() *LogStreamDescriptor {
	if m != nil {
		return m.Desc
	}
	return nil
}

func (m *LogIndex) GetEntries() []*LogIndex_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

//
// Entry is a single index entry.
//
// The index is composed of a series of entries, each corresponding to a
// sequential snapshot of of the log stream.
type LogIndex_Entry struct {
	//
	// The byte offset record in the indexed stream file (required).
	//
	// This is used by clients to request specific LogEntry from an archived
	// log stream.
	Offset *uint32 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	//
	// The log index that this entry describes (required).
	//
	// This is used by clients to identify a specific LogEntry within a set of
	// streams sharing a Prefix.
	PrefixIndex *uint32 `protobuf:"varint,2,opt,name=prefix_index" json:"prefix_index,omitempty"`
	//
	// The time offset of this log entry (required).
	//
	// This is used by clients to identify a specific LogEntry within a log
	// stream.
	StreamIndex *uint32 `protobuf:"varint,3,opt,name=stream_index" json:"stream_index,omitempty"`
	//
	// The time offset of this log entry, in microseconds.
	//
	// This is added to the descriptor's "timestamp" field to identify the
	// specific timestamp of this log. It is used by clients to identify a
	// specific LogEntry by time.
	TimeOffsetUs     *uint32 `protobuf:"varint,4,opt,name=time_offset_us" json:"time_offset_us,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LogIndex_Entry) Reset()         { *m = LogIndex_Entry{} }
func (m *LogIndex_Entry) String() string { return proto.CompactTextString(m) }
func (*LogIndex_Entry) ProtoMessage()    {}

func (m *LogIndex_Entry) GetOffset() uint32 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *LogIndex_Entry) GetPrefixIndex() uint32 {
	if m != nil && m.PrefixIndex != nil {
		return *m.PrefixIndex
	}
	return 0
}

func (m *LogIndex_Entry) GetStreamIndex() uint32 {
	if m != nil && m.StreamIndex != nil {
		return *m.StreamIndex
	}
	return 0
}

func (m *LogIndex_Entry) GetTimeOffsetUs() uint32 {
	if m != nil && m.TimeOffsetUs != nil {
		return *m.TimeOffsetUs
	}
	return 0
}

func init() {
}
