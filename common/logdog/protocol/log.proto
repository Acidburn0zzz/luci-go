// Copyright (c) 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package protocol;

import "types.proto";

/**
 * Log stream descriptor data. This is the full set of information that
 * describes a logging stream.
 */
message LogStreamDescriptor {
  /*
   * The stream's prefix (required).
   *
   * Logs originating from the same Butler instance will share a Prefix.
   *
   * A valid prefix value is a StreamName described in:
   * https://github.com/luci/luci-go/common/logdog/types
   */
  optional string prefix = 1;
  /*
   * The log stream's name (required).
   *
   * This is used to uniquely identify a log stream within the scope of its
   * prefix.
   *
   * A valid name value is a StreamName described in:
   * https://github.com/luci/luci-go/common/logdog/types
   */
  optional string name = 2;
  /*
   * The stream's content type (required).
   *
   * This must be an HTTP Content-Type value. It is made available to LogDog
   * clients when querying stream metadata. It will also be applied to archived
   * binary log data.
   */
  optional string content_type = 3;
  /*
   * The log stream's base timestamp (required).
   *
   * This notes the start time of the log stream. All LogEntries express their
   * timestamp as microsecond offsets from this field.
   */
  optional Timestamp timestamp = 4;

  /*
   * Tag is an arbitrary key/value tag associated with this log stream.
   *
   * LogDog clients can query for log streams based on tag values.
   */
  message Tag {
    // The tag key (required).
    optional string key = 1;
    // The tag value.
    optional string value = 2;
  }
  // The set of associated log tags.
  repeated Tag tags = 5;
}

/**
 * An individual log entry.
 *
 * This contains the superset of transmissible log data. Its content fields
 * should be interpreted in the context of the log stream's content type.
 */
message LogEntry {
  /*
   * The stream time offset (in microseconds) for this entry (required).
   *
   * This offset is added to the log stream's base "timestamp" to resolve the
   * timestamp for this specific LogEntry.
   */
  optional uint64 time_offset_us = 1;
  /*
   * The message index within the Prefix (required).
   *
   * This is value is unique to this LogEntry across the entire set of entries
   * sharing the stream's Prefix. It is used to designate unambiguous log
   * ordering.
   */
  optional uint64 prefix_index = 2;
  /*
   * The message index within its Stream (required).
   *
   * This value is unique across all entries sharing the same Prefix and Stream
   * Name. It is used to designate unambiguous log ordering within the stream.
   */
  optional uint64 stream_index = 3;

  /*
   * (Text) Lines of log text.
   *
   * For text logs, each string represents a single log line. Newlines should
   * not be included.
   */
  repeated string lines = 4;

  /*
   * (Data) Log binary data.
   *
   * For binary logs, each entry is a sequential chunk of log data. For
   * datagram logs, each entry is an independent datagram.
   */
  repeated bytes data = 5;
}

/**
 * LogIndex is an index into an at-rest log storage.
 *
 * The log stream and log index are generated by the Archivist during archival.
 *
 * An archived log stream is a series of contiguous LogEntry frames. The index
 * maps a log's logical logation in its stream, prefix, and timeline to its
 * frame's binary offset in the archived log stream blob.
 */
message LogIndex {
  /*
   * The LogStreamDescriptor for this log stream (required).
   *
   * The index stores the stream's LogStreamDescriptor so that a client can
   * know the full set of log metadata by downloading its index.
   */
  optional LogStreamDescriptor desc = 1;

  /*
   * Entry is a single index entry.
   *
   * The index is composed of a series of entries, each corresponding to a
   * sequential snapshot of of the log stream.
   */
  message Entry {
    /*
     * The byte offset record in the indexed stream file (required).
     *
     * This is used by clients to request specific LogEntry from an archived
     * log stream.
     */
    optional uint64 offset = 1;

    /*
     * The log index that this entry describes (required).
     *
     * This is used by clients to identify a specific LogEntry within a set of
     * streams sharing a Prefix.
     */
    optional uint64 prefix_index = 2;
    /*
     * The time offset of this log entry (required).
     *
     * This is used by clients to identify a specific LogEntry within a log
     * stream.
     */
    optional uint64 stream_index = 3;
    /*
     * The time offset of this log entry, in microseconds.
     *
     * This is added to the descriptor's "timestamp" field to identify the
     * specific timestamp of this log. It is used by clients to identify a
     * specific LogEntry by time.
     */
    optional uint64 time_offset_us = 4;
  }
  /*
   * A series of ascending-ordered Entry messages representing snapshots of an
   * archived log stream.
   *
   * Within this set of Entry messages, the "offset", "prefix_index",
   * "stream_index", and "time_offset_us" fields will be ascending.
   *
   * The frequency of Entry messages is not defined; it is up to the Archivist
   * process to choose a frequency.
   */
  repeated Entry entries = 2;
}
