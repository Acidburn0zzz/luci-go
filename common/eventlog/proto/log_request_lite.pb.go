// Code generated by protoc-gen-go.
// source: log_request_lite.proto
// DO NOT EDIT!

package eventlog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Stripped-down version of LogRequest, for use on public systems.
type LogRequestLite struct {
	// "Now", in milliseconds, according to the same clock that was used to set
	// 'event_time_ms' values in the LogEventLite protos below.
	RequestTimeMs *int64 `protobuf:"varint,4,opt,name=request_time_ms,json=requestTimeMs" json:"request_time_ms,omitempty"`
	// The name of a LogRequest.LogSource enum value. The server converts it to
	// a proper enum value.
	LogSourceName    *string                        `protobuf:"bytes,6,opt,name=log_source_name,json=logSourceName" json:"log_source_name,omitempty"`
	LogEvent         []*LogRequestLite_LogEventLite `protobuf:"bytes,3,rep,name=log_event,json=logEvent" json:"log_event,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *LogRequestLite) Reset()                    { *m = LogRequestLite{} }
func (m *LogRequestLite) String() string            { return proto.CompactTextString(m) }
func (*LogRequestLite) ProtoMessage()               {}
func (*LogRequestLite) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *LogRequestLite) GetRequestTimeMs() int64 {
	if m != nil && m.RequestTimeMs != nil {
		return *m.RequestTimeMs
	}
	return 0
}

func (m *LogRequestLite) GetLogSourceName() string {
	if m != nil && m.LogSourceName != nil {
		return *m.LogSourceName
	}
	return ""
}

func (m *LogRequestLite) GetLogEvent() []*LogRequestLite_LogEventLite {
	if m != nil {
		return m.LogEvent
	}
	return nil
}

type LogRequestLite_LogEventLite struct {
	// Epoch time in milliseconds.
	EventTimeMs *int64 `protobuf:"varint,1,opt,name=event_time_ms,json=eventTimeMs" json:"event_time_ms,omitempty"`
	// Type of event. Different kinds of events inside a client app should have
	// different values of 'event_code'. Different client apps may have
	// overlapping sets of 'event_code' values; these values are only meant to
	// make sense within the context of a single client app, as identified by
	// the 'log_source_name' field of LogRequestLite.
	//
	// This enum type should be annotated with a LogEventRoutingConfig proto.
	EventCode *int32 `protobuf:"varint,11,opt,name=event_code,json=eventCode" json:"event_code,omitempty"`
	// Identifies a group of events that belong to the same flow or session of
	// user interaction, which is a client-specific concept.
	//
	// These IDs are used in the pipeline for computing latencies between pairs
	// of events, where it is necessary to ensure that both events belong to the
	// same flow.
	EventFlowId *int32 `protobuf:"varint,12,opt,name=event_flow_id,json=eventFlowId" json:"event_flow_id,omitempty"`
	// A source specific extension (typically a serialized proto). The type of
	// this data is determined by the log_source of the enclosing LogRequestLite.
	// The proto is derived by calling the ParseFromString method.
	SourceExtension  []byte `protobuf:"bytes,6,opt,name=source_extension,json=sourceExtension" json:"source_extension,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LogRequestLite_LogEventLite) Reset()                    { *m = LogRequestLite_LogEventLite{} }
func (m *LogRequestLite_LogEventLite) String() string            { return proto.CompactTextString(m) }
func (*LogRequestLite_LogEventLite) ProtoMessage()               {}
func (*LogRequestLite_LogEventLite) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

func (m *LogRequestLite_LogEventLite) GetEventTimeMs() int64 {
	if m != nil && m.EventTimeMs != nil {
		return *m.EventTimeMs
	}
	return 0
}

func (m *LogRequestLite_LogEventLite) GetEventCode() int32 {
	if m != nil && m.EventCode != nil {
		return *m.EventCode
	}
	return 0
}

func (m *LogRequestLite_LogEventLite) GetEventFlowId() int32 {
	if m != nil && m.EventFlowId != nil {
		return *m.EventFlowId
	}
	return 0
}

func (m *LogRequestLite_LogEventLite) GetSourceExtension() []byte {
	if m != nil {
		return m.SourceExtension
	}
	return nil
}

func init() {
	proto.RegisterType((*LogRequestLite)(nil), "eventlog.LogRequestLite")
	proto.RegisterType((*LogRequestLite_LogEventLite)(nil), "eventlog.LogRequestLite.LogEventLite")
}

func init() { proto.RegisterFile("log_request_lite.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x89, 0x55, 0xd9, 0x4e, 0x5b, 0x57, 0x72, 0x90, 0x20, 0x08, 0x65, 0x41, 0xa9, 0x97,
	0x1e, 0x7c, 0x04, 0x65, 0x05, 0x61, 0xf5, 0x10, 0xbd, 0x87, 0x65, 0x3b, 0x96, 0x40, 0xd2, 0xd1,
	0x26, 0xeb, 0xfa, 0x38, 0xbe, 0x8d, 0xaf, 0x25, 0x49, 0x5b, 0xd9, 0x3d, 0xfe, 0xdf, 0xfc, 0xf3,
	0xcf, 0x3f, 0x70, 0x61, 0xa8, 0x55, 0x3d, 0x7e, 0x6e, 0xd1, 0x79, 0x65, 0xb4, 0xc7, 0xfa, 0xa3,
	0x27, 0x4f, 0x7c, 0x86, 0x5f, 0xd8, 0x79, 0x43, 0xed, 0xe2, 0xf7, 0x08, 0xce, 0x56, 0xd4, 0xca,
	0xc1, 0xb3, 0xd2, 0x1e, 0xf9, 0x0d, 0xcc, 0xa7, 0x15, 0xaf, 0x2d, 0x2a, 0xeb, 0xc4, 0x71, 0xc9,
	0xaa, 0x44, 0x16, 0x23, 0x7e, 0xd3, 0x16, 0x9f, 0x5d, 0xf0, 0x85, 0x78, 0x47, 0xdb, 0x7e, 0x83,
	0xaa, 0x5b, 0x5b, 0x14, 0xa7, 0x25, 0xab, 0x52, 0x59, 0x18, 0x6a, 0x5f, 0x23, 0x7d, 0x59, 0x5b,
	0xe4, 0xf7, 0x90, 0x06, 0x5f, 0x3c, 0x29, 0x92, 0x32, 0xa9, 0xb2, 0xbb, 0xeb, 0x7a, 0x2a, 0x50,
	0x1f, 0x1e, 0x0f, 0x72, 0x19, 0x46, 0x41, 0xc8, 0x99, 0x19, 0xd5, 0xe5, 0x0f, 0x83, 0x7c, 0x7f,
	0xc4, 0x17, 0x50, 0xc4, 0x88, 0xff, 0x8a, 0x2c, 0x56, 0xcc, 0x22, 0x1c, 0x0b, 0x5e, 0x01, 0x0c,
	0x9e, 0x0d, 0x35, 0x28, 0xb2, 0x92, 0x55, 0x27, 0x32, 0x8d, 0xe4, 0x81, 0x9a, 0xbd, 0x88, 0x77,
	0x43, 0x3b, 0xa5, 0x1b, 0x91, 0x47, 0xc7, 0x10, 0xf1, 0x68, 0x68, 0xf7, 0xd4, 0xf0, 0x5b, 0x38,
	0x1f, 0xff, 0xc3, 0x6f, 0x8f, 0x9d, 0xd3, 0xd4, 0xc5, 0x27, 0x73, 0x39, 0x1f, 0xf8, 0x72, 0xc2,
	0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xd7, 0x5d, 0x35, 0x6c, 0x01, 0x00, 0x00,
}
