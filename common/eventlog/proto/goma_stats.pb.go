// Code generated by protoc-gen-go.
// source: goma_stats.proto
// DO NOT EDIT!

package eventlog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MachineInfo_OSType int32

const (
	MachineInfo_UNKNOWN MachineInfo_OSType = 0
	MachineInfo_LINUX   MachineInfo_OSType = 1
	MachineInfo_MAC     MachineInfo_OSType = 2
	MachineInfo_WIN     MachineInfo_OSType = 3
)

var MachineInfo_OSType_name = map[int32]string{
	0: "UNKNOWN",
	1: "LINUX",
	2: "MAC",
	3: "WIN",
}
var MachineInfo_OSType_value = map[string]int32{
	"UNKNOWN": 0,
	"LINUX":   1,
	"MAC":     2,
	"WIN":     3,
}

func (x MachineInfo_OSType) Enum() *MachineInfo_OSType {
	p := new(MachineInfo_OSType)
	*p = x
	return p
}
func (x MachineInfo_OSType) String() string {
	return proto.EnumName(MachineInfo_OSType_name, int32(x))
}
func (x *MachineInfo_OSType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MachineInfo_OSType_value, data, "MachineInfo_OSType")
	if err != nil {
		return err
	}
	*x = MachineInfo_OSType(value)
	return nil
}
func (MachineInfo_OSType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{20, 0} }

// Statistics of all compile requests (including compiled locally).
// NEXT ID TO USE: 9
type RequestStats struct {
	// Total number of compile requests came from gomacc.
	Total *int64 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	// Number of succeeded compile requests.
	Success *int64 `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	// Number of failed compile requests.
	// The number includes not only compile failure, but also
	// backend errors that were recovered by local fallback.
	Failure *int64 `protobuf:"varint,3,opt,name=failure" json:"failure,omitempty"`
	// Below this line: different kind of stats. A single one should be provided.
	// See the definition of each message type for a details description of
	// thier use.
	CompilerProxy    *CompilerProxyStats   `protobuf:"bytes,4,opt,name=compiler_proxy,json=compilerProxy" json:"compiler_proxy,omitempty"`
	CompilerInfo     *CompilerInfoStats    `protobuf:"bytes,5,opt,name=compiler_info,json=compilerInfo" json:"compiler_info,omitempty"`
	Goma             *GomaCompileStats     `protobuf:"bytes,6,opt,name=goma" json:"goma,omitempty"`
	Local            *LocalCompileStats    `protobuf:"bytes,7,opt,name=local" json:"local,omitempty"`
	FallbackInSetup  *FallbackInSetupStats `protobuf:"bytes,8,opt,name=fallback_in_setup,json=fallbackInSetup" json:"fallback_in_setup,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *RequestStats) Reset()                    { *m = RequestStats{} }
func (m *RequestStats) String() string            { return proto.CompactTextString(m) }
func (*RequestStats) ProtoMessage()               {}
func (*RequestStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RequestStats) GetTotal() int64 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *RequestStats) GetSuccess() int64 {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return 0
}

func (m *RequestStats) GetFailure() int64 {
	if m != nil && m.Failure != nil {
		return *m.Failure
	}
	return 0
}

func (m *RequestStats) GetCompilerProxy() *CompilerProxyStats {
	if m != nil {
		return m.CompilerProxy
	}
	return nil
}

func (m *RequestStats) GetCompilerInfo() *CompilerInfoStats {
	if m != nil {
		return m.CompilerInfo
	}
	return nil
}

func (m *RequestStats) GetGoma() *GomaCompileStats {
	if m != nil {
		return m.Goma
	}
	return nil
}

func (m *RequestStats) GetLocal() *LocalCompileStats {
	if m != nil {
		return m.Local
	}
	return nil
}

func (m *RequestStats) GetFallbackInSetup() *FallbackInSetupStats {
	if m != nil {
		return m.FallbackInSetup
	}
	return nil
}

// Statistics of compiler_proxy itself.
type CompilerProxyStats struct {
	// Number of compile requests failed by compiler_proxy error.
	Fail             *int64 `protobuf:"varint,1,opt,name=fail" json:"fail,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CompilerProxyStats) Reset()                    { *m = CompilerProxyStats{} }
func (m *CompilerProxyStats) String() string            { return proto.CompactTextString(m) }
func (*CompilerProxyStats) ProtoMessage()               {}
func (*CompilerProxyStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CompilerProxyStats) GetFail() int64 {
	if m != nil && m.Fail != nil {
		return *m.Fail
	}
	return 0
}

// Statistics of compiler info store.
//
// Compiler info store contains caches of compiler info to be used for
// listing up necessary files for compiles or dispatching compilers in
// backend.
// NEXT ID TO USE: 6
type CompilerInfoStats struct {
	// Number of times new compiler info were stored to the cache.
	Stores *int64 `protobuf:"varint,1,opt,name=stores" json:"stores,omitempty"`
	// Number of times compiler info were reused.
	StoreDups *int64 `protobuf:"varint,2,opt,name=store_dups,json=storeDups" json:"store_dups,omitempty"`
	// Number of times compiler were not found.
	Miss *int64 `protobuf:"varint,3,opt,name=miss" json:"miss,omitempty"`
	// Number of failures to get compiler info.
	// i.e. compiler can be found but failed to get compiler info.
	// e.g. not executable binary, unknown options are passed, etc.
	Fail *int64 `protobuf:"varint,4,opt,name=fail" json:"fail,omitempty"`
	// The size of CompilerInfoCache loaded from disk.
	LoadedSizeBytes  *int64 `protobuf:"varint,5,opt,name=loaded_size_bytes,json=loadedSizeBytes" json:"loaded_size_bytes,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CompilerInfoStats) Reset()                    { *m = CompilerInfoStats{} }
func (m *CompilerInfoStats) String() string            { return proto.CompactTextString(m) }
func (*CompilerInfoStats) ProtoMessage()               {}
func (*CompilerInfoStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CompilerInfoStats) GetStores() int64 {
	if m != nil && m.Stores != nil {
		return *m.Stores
	}
	return 0
}

func (m *CompilerInfoStats) GetStoreDups() int64 {
	if m != nil && m.StoreDups != nil {
		return *m.StoreDups
	}
	return 0
}

func (m *CompilerInfoStats) GetMiss() int64 {
	if m != nil && m.Miss != nil {
		return *m.Miss
	}
	return 0
}

func (m *CompilerInfoStats) GetFail() int64 {
	if m != nil && m.Fail != nil {
		return *m.Fail
	}
	return 0
}

func (m *CompilerInfoStats) GetLoadedSizeBytes() int64 {
	if m != nil && m.LoadedSizeBytes != nil {
		return *m.LoadedSizeBytes
	}
	return 0
}

// Statistics of compiles done in goma backend.
type GomaCompileStats struct {
	// Number of compiles requested to goma backend.
	Finished *int64 `protobuf:"varint,1,opt,name=finished" json:"finished,omitempty"`
	// The number of compiles returned from the cache in backend.
	CacheHit *int64 `protobuf:"varint,2,opt,name=cache_hit,json=cacheHit" json:"cache_hit,omitempty"`
	// The number of compiles returned from the cache in local output.
	LocalCacheHit *int64 `protobuf:"varint,6,opt,name=local_cache_hit,json=localCacheHit" json:"local_cache_hit,omitempty"`
	// Number of compiles aborted.
	// compiler_proxy does competition between local and remote, and if local
	// wins, remote compile is aborted.
	Aborted *int64 `protobuf:"varint,3,opt,name=aborted" json:"aborted,omitempty"`
	// Number of retries.
	// In case of retriable error, compiler proxy retries remote compile.
	// e.g. if files required for compile is missing, compiler_proxy send
	// missing files, and retries compile.
	Retry *int64 `protobuf:"varint,4,opt,name=retry" json:"retry,omitempty"`
	// Number of remote failures. This contains remote compile failure, backend
	// failure, etc. Note that local compile result does not matter.
	Fail             *int64 `protobuf:"varint,5,opt,name=fail" json:"fail,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GomaCompileStats) Reset()                    { *m = GomaCompileStats{} }
func (m *GomaCompileStats) String() string            { return proto.CompactTextString(m) }
func (*GomaCompileStats) ProtoMessage()               {}
func (*GomaCompileStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GomaCompileStats) GetFinished() int64 {
	if m != nil && m.Finished != nil {
		return *m.Finished
	}
	return 0
}

func (m *GomaCompileStats) GetCacheHit() int64 {
	if m != nil && m.CacheHit != nil {
		return *m.CacheHit
	}
	return 0
}

func (m *GomaCompileStats) GetLocalCacheHit() int64 {
	if m != nil && m.LocalCacheHit != nil {
		return *m.LocalCacheHit
	}
	return 0
}

func (m *GomaCompileStats) GetAborted() int64 {
	if m != nil && m.Aborted != nil {
		return *m.Aborted
	}
	return 0
}

func (m *GomaCompileStats) GetRetry() int64 {
	if m != nil && m.Retry != nil {
		return *m.Retry
	}
	return 0
}

func (m *GomaCompileStats) GetFail() int64 {
	if m != nil && m.Fail != nil {
		return *m.Fail
	}
	return 0
}

// Statistics of compiles done locally.
type LocalCompileStats struct {
	// Number of local compiles.
	Run *int64 `protobuf:"varint,1,opt,name=run" json:"run,omitempty"`
	// Number of local compiles killed.
	// compiler_proxy does competition between local and remote, and if remote
	// wins, local compile is killed.
	Killed *int64 `protobuf:"varint,2,opt,name=killed" json:"killed,omitempty"`
	// Number of local compiles finished.
	Finished         *int64 `protobuf:"varint,3,opt,name=finished" json:"finished,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LocalCompileStats) Reset()                    { *m = LocalCompileStats{} }
func (m *LocalCompileStats) String() string            { return proto.CompactTextString(m) }
func (*LocalCompileStats) ProtoMessage()               {}
func (*LocalCompileStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *LocalCompileStats) GetRun() int64 {
	if m != nil && m.Run != nil {
		return *m.Run
	}
	return 0
}

func (m *LocalCompileStats) GetKilled() int64 {
	if m != nil && m.Killed != nil {
		return *m.Killed
	}
	return 0
}

func (m *LocalCompileStats) GetFinished() int64 {
	if m != nil && m.Finished != nil {
		return *m.Finished
	}
	return 0
}

// Statistics on forced local fallbacks in setup step.
// NEXT ID TO USE: 7
type FallbackInSetupStats struct {
	// Number of fallbacks caused by failures to parse command line flags.
	FailedToParseFlags *int64 `protobuf:"varint,1,opt,name=failed_to_parse_flags,json=failedToParseFlags" json:"failed_to_parse_flags,omitempty"`
	// Number of fallbacks because remote compile is not supported.
	NoRemoteCompileSupported *int64 `protobuf:"varint,2,opt,name=no_remote_compile_supported,json=noRemoteCompileSupported" json:"no_remote_compile_supported,omitempty"`
	// Number of fallbacks caused by HTTP disabled.
	HttpDisabled *int64 `protobuf:"varint,3,opt,name=http_disabled,json=httpDisabled" json:"http_disabled,omitempty"`
	// Number of fallbacks caused by failures to get compiler info.
	FailToGetCompilerInfo *int64 `protobuf:"varint,4,opt,name=fail_to_get_compiler_info,json=failToGetCompilerInfo" json:"fail_to_get_compiler_info,omitempty"`
	// Number of fallbacks caused by compiler disabled.
	CompilerDisabled *int64 `protobuf:"varint,5,opt,name=compiler_disabled,json=compilerDisabled" json:"compiler_disabled,omitempty"`
	// Number of fallbacks requested by the user.
	RequestedByUser  *int64 `protobuf:"varint,6,opt,name=requested_by_user,json=requestedByUser" json:"requested_by_user,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FallbackInSetupStats) Reset()                    { *m = FallbackInSetupStats{} }
func (m *FallbackInSetupStats) String() string            { return proto.CompactTextString(m) }
func (*FallbackInSetupStats) ProtoMessage()               {}
func (*FallbackInSetupStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *FallbackInSetupStats) GetFailedToParseFlags() int64 {
	if m != nil && m.FailedToParseFlags != nil {
		return *m.FailedToParseFlags
	}
	return 0
}

func (m *FallbackInSetupStats) GetNoRemoteCompileSupported() int64 {
	if m != nil && m.NoRemoteCompileSupported != nil {
		return *m.NoRemoteCompileSupported
	}
	return 0
}

func (m *FallbackInSetupStats) GetHttpDisabled() int64 {
	if m != nil && m.HttpDisabled != nil {
		return *m.HttpDisabled
	}
	return 0
}

func (m *FallbackInSetupStats) GetFailToGetCompilerInfo() int64 {
	if m != nil && m.FailToGetCompilerInfo != nil {
		return *m.FailToGetCompilerInfo
	}
	return 0
}

func (m *FallbackInSetupStats) GetCompilerDisabled() int64 {
	if m != nil && m.CompilerDisabled != nil {
		return *m.CompilerDisabled
	}
	return 0
}

func (m *FallbackInSetupStats) GetRequestedByUser() int64 {
	if m != nil && m.RequestedByUser != nil {
		return *m.RequestedByUser
	}
	return 0
}

// Statistics of files used for remote compile.
type FileStats struct {
	// Number of files used for compile.
	Requested *int64 `protobuf:"varint,1,opt,name=requested" json:"requested,omitempty"`
	// Number of files uploaded to goma backend.
	Uploaded *int64 `protobuf:"varint,2,opt,name=uploaded" json:"uploaded,omitempty"`
	// Number of file hashes not found in goma backend.
	// A compile request to goma backend has a list of hashes of files
	// instead of contents.  If one of them are missing in goma backend,
	// the backend returns the list of missing hashes.  This field represents
	// number of hashes missed.
	Missed           *int64 `protobuf:"varint,3,opt,name=missed" json:"missed,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FileStats) Reset()                    { *m = FileStats{} }
func (m *FileStats) String() string            { return proto.CompactTextString(m) }
func (*FileStats) ProtoMessage()               {}
func (*FileStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *FileStats) GetRequested() int64 {
	if m != nil && m.Requested != nil {
		return *m.Requested
	}
	return 0
}

func (m *FileStats) GetUploaded() int64 {
	if m != nil && m.Uploaded != nil {
		return *m.Uploaded
	}
	return 0
}

func (m *FileStats) GetMissed() int64 {
	if m != nil && m.Missed != nil {
		return *m.Missed
	}
	return 0
}

// Statistics of output files.
//
// If remote compile succeeds, compiler_proxy outputs a result e.g. object
// file.  If output file size is small, compiler_proxy keeps a result in memory.
// If the size is large, the result is output to file, and renamed.
// Since compiler_proxy does competition between local and remote, and
// local compile output a file directly, we cannot directly write a result to
// a file.
type OutputStats struct {
	// Total number of files output.
	Files *int64 `protobuf:"varint,1,opt,name=files" json:"files,omitempty"`
	// Number of outputs renamed.
	Rename *int64 `protobuf:"varint,2,opt,name=rename" json:"rename,omitempty"`
	// Number of outputs kept in memory instead of written to files.
	Buf *int64 `protobuf:"varint,3,opt,name=buf" json:"buf,omitempty"`
	// Peak size of memory to keep outputs.
	PeakReq          *int64 `protobuf:"varint,4,opt,name=peak_req,json=peakReq" json:"peak_req,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *OutputStats) Reset()                    { *m = OutputStats{} }
func (m *OutputStats) String() string            { return proto.CompactTextString(m) }
func (*OutputStats) ProtoMessage()               {}
func (*OutputStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *OutputStats) GetFiles() int64 {
	if m != nil && m.Files != nil {
		return *m.Files
	}
	return 0
}

func (m *OutputStats) GetRename() int64 {
	if m != nil && m.Rename != nil {
		return *m.Rename
	}
	return 0
}

func (m *OutputStats) GetBuf() int64 {
	if m != nil && m.Buf != nil {
		return *m.Buf
	}
	return 0
}

func (m *OutputStats) GetPeakReq() int64 {
	if m != nil && m.PeakReq != nil {
		return *m.PeakReq
	}
	return 0
}

// Statistics about compiler_proxy memory.
type MemoryStats struct {
	// Memory consumed by compiler_proxy when stats was taken.
	Consuming        *int64 `protobuf:"varint,1,opt,name=consuming" json:"consuming,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MemoryStats) Reset()                    { *m = MemoryStats{} }
func (m *MemoryStats) String() string            { return proto.CompactTextString(m) }
func (*MemoryStats) ProtoMessage()               {}
func (*MemoryStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *MemoryStats) GetConsuming() int64 {
	if m != nil && m.Consuming != nil {
		return *m.Consuming
	}
	return 0
}

// Statistics about compiler_proxy time.
type TimeStats struct {
	// Uptime of compiler_proxy in seconds.
	Uptime           *int64 `protobuf:"varint,1,opt,name=uptime" json:"uptime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TimeStats) Reset()                    { *m = TimeStats{} }
func (m *TimeStats) String() string            { return proto.CompactTextString(m) }
func (*TimeStats) ProtoMessage()               {}
func (*TimeStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *TimeStats) GetUptime() int64 {
	if m != nil && m.Uptime != nil {
		return *m.Uptime
	}
	return 0
}

// Statistics of include processor.
//
// Include processor gets defined macros, search dirs, and a source file,
// and list up files required for compile.
type IncludeProcessorStats struct {
	// Number of files to be searched.
	Total *int64 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	// Number of files that was skipped to search.
	// If include guard exists, and the same file is read twice, we do not need
	// to go into the guard.
	Skipped *int64 `protobuf:"varint,2,opt,name=skipped" json:"skipped,omitempty"`
	// Total waiting time [ms] to start IncludeProcessor.
	// This doesn't include the running time of IncludeProcessor.
	TotalWaitTime *int64 `protobuf:"varint,3,opt,name=total_wait_time,json=totalWaitTime" json:"total_wait_time,omitempty"`
	// Total running time [ms] of IncludeProcessor.
	TotalRunTime     *int64 `protobuf:"varint,4,opt,name=total_run_time,json=totalRunTime" json:"total_run_time,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IncludeProcessorStats) Reset()                    { *m = IncludeProcessorStats{} }
func (m *IncludeProcessorStats) String() string            { return proto.CompactTextString(m) }
func (*IncludeProcessorStats) ProtoMessage()               {}
func (*IncludeProcessorStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *IncludeProcessorStats) GetTotal() int64 {
	if m != nil && m.Total != nil {
		return *m.Total
	}
	return 0
}

func (m *IncludeProcessorStats) GetSkipped() int64 {
	if m != nil && m.Skipped != nil {
		return *m.Skipped
	}
	return 0
}

func (m *IncludeProcessorStats) GetTotalWaitTime() int64 {
	if m != nil && m.TotalWaitTime != nil {
		return *m.TotalWaitTime
	}
	return 0
}

func (m *IncludeProcessorStats) GetTotalRunTime() int64 {
	if m != nil && m.TotalRunTime != nil {
		return *m.TotalRunTime
	}
	return 0
}

// Statistics for include cache.
//
// IncludeCache contains a file that include only preprocessor directives.
type IncludeCacheStats struct {
	// The number of entries in the include cache.
	TotalEntries *int64 `protobuf:"varint,1,opt,name=total_entries,json=totalEntries" json:"total_entries,omitempty"`
	// The total bytes of the contents in the include cache.
	TotalCacheSize *int64 `protobuf:"varint,2,opt,name=total_cache_size,json=totalCacheSize" json:"total_cache_size,omitempty"`
	// Cache hit count.
	Hit *int64 `protobuf:"varint,3,opt,name=hit" json:"hit,omitempty"`
	// Cache miss count.
	Missed *int64 `protobuf:"varint,4,opt,name=missed" json:"missed,omitempty"`
	// Cache update count.
	Updated *int64 `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	// Cache evicted count.
	Evicted *int64 `protobuf:"varint,6,opt,name=evicted" json:"evicted,omitempty"`
	// The total size of original (unfiltered) header files in byte.
	OriginalTotalSize *int64 `protobuf:"varint,7,opt,name=original_total_size,json=originalTotalSize" json:"original_total_size,omitempty"`
	// The max size ef the original header files in byte.
	OriginalMaxSize *int64 `protobuf:"varint,8,opt,name=original_max_size,json=originalMaxSize" json:"original_max_size,omitempty"`
	// The total size of filtered header files in byte.
	FilteredTotalSize *int64 `protobuf:"varint,9,opt,name=filtered_total_size,json=filteredTotalSize" json:"filtered_total_size,omitempty"`
	// The max size of filtered header files in byte.
	FilteredMaxSize  *int64 `protobuf:"varint,10,opt,name=filtered_max_size,json=filteredMaxSize" json:"filtered_max_size,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IncludeCacheStats) Reset()                    { *m = IncludeCacheStats{} }
func (m *IncludeCacheStats) String() string            { return proto.CompactTextString(m) }
func (*IncludeCacheStats) ProtoMessage()               {}
func (*IncludeCacheStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *IncludeCacheStats) GetTotalEntries() int64 {
	if m != nil && m.TotalEntries != nil {
		return *m.TotalEntries
	}
	return 0
}

func (m *IncludeCacheStats) GetTotalCacheSize() int64 {
	if m != nil && m.TotalCacheSize != nil {
		return *m.TotalCacheSize
	}
	return 0
}

func (m *IncludeCacheStats) GetHit() int64 {
	if m != nil && m.Hit != nil {
		return *m.Hit
	}
	return 0
}

func (m *IncludeCacheStats) GetMissed() int64 {
	if m != nil && m.Missed != nil {
		return *m.Missed
	}
	return 0
}

func (m *IncludeCacheStats) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *IncludeCacheStats) GetEvicted() int64 {
	if m != nil && m.Evicted != nil {
		return *m.Evicted
	}
	return 0
}

func (m *IncludeCacheStats) GetOriginalTotalSize() int64 {
	if m != nil && m.OriginalTotalSize != nil {
		return *m.OriginalTotalSize
	}
	return 0
}

func (m *IncludeCacheStats) GetOriginalMaxSize() int64 {
	if m != nil && m.OriginalMaxSize != nil {
		return *m.OriginalMaxSize
	}
	return 0
}

func (m *IncludeCacheStats) GetFilteredTotalSize() int64 {
	if m != nil && m.FilteredTotalSize != nil {
		return *m.FilteredTotalSize
	}
	return 0
}

func (m *IncludeCacheStats) GetFilteredMaxSize() int64 {
	if m != nil && m.FilteredMaxSize != nil {
		return *m.FilteredMaxSize
	}
	return 0
}

// Statistics of DepsCache.
//
// The result of the include processor is cached in DepsCache.
// It has two kinds of tables: deps_cache_table and id_table.
// deps_cache_table is a mapping from an identifier of a compile to list of
// files required for it.
// Since the same filename shows up to various number of entries in
// deps_cache_table, we give an unique id to each filename and deps_cache
// actually contains ids as value. id_table maintains mapping between the id
// and the filename.
type DepsCacheStats struct {
	// Size of deps_cache_table.
	DepsTableSize *int64 `protobuf:"varint,1,opt,name=deps_table_size,json=depsTableSize" json:"deps_table_size,omitempty"`
	// Maximum number of ids of an entry in deps_cache_table.
	MaxEntries *int64 `protobuf:"varint,2,opt,name=max_entries,json=maxEntries" json:"max_entries,omitempty"`
	// Total number of ids of all entries in deps_cache_table.
	TotalEntries *int64 `protobuf:"varint,3,opt,name=total_entries,json=totalEntries" json:"total_entries,omitempty"`
	// Size of id_table.
	IdtableSize *int64 `protobuf:"varint,4,opt,name=idtable_size,json=idtableSize" json:"idtable_size,omitempty"`
	// Number of hit of the table.
	Hit *int64 `protobuf:"varint,5,opt,name=hit" json:"hit,omitempty"`
	// Number of update of the table.
	Updated *int64 `protobuf:"varint,6,opt,name=updated" json:"updated,omitempty"`
	// Number of miss. i.e. newly added to the table.
	Missed           *int64 `protobuf:"varint,7,opt,name=missed" json:"missed,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DepsCacheStats) Reset()                    { *m = DepsCacheStats{} }
func (m *DepsCacheStats) String() string            { return proto.CompactTextString(m) }
func (*DepsCacheStats) ProtoMessage()               {}
func (*DepsCacheStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *DepsCacheStats) GetDepsTableSize() int64 {
	if m != nil && m.DepsTableSize != nil {
		return *m.DepsTableSize
	}
	return 0
}

func (m *DepsCacheStats) GetMaxEntries() int64 {
	if m != nil && m.MaxEntries != nil {
		return *m.MaxEntries
	}
	return 0
}

func (m *DepsCacheStats) GetTotalEntries() int64 {
	if m != nil && m.TotalEntries != nil {
		return *m.TotalEntries
	}
	return 0
}

func (m *DepsCacheStats) GetIdtableSize() int64 {
	if m != nil && m.IdtableSize != nil {
		return *m.IdtableSize
	}
	return 0
}

func (m *DepsCacheStats) GetHit() int64 {
	if m != nil && m.Hit != nil {
		return *m.Hit
	}
	return 0
}

func (m *DepsCacheStats) GetUpdated() int64 {
	if m != nil && m.Updated != nil {
		return *m.Updated
	}
	return 0
}

func (m *DepsCacheStats) GetMissed() int64 {
	if m != nil && m.Missed != nil {
		return *m.Missed
	}
	return 0
}

// Statistics for inlucde dir cache.
//
// Include dir cache is a cache for a directory to be used as an
// include directory.
type IncludeDirCacheStats struct {
	// Number of instances of include dir cache.
	Instances *int64 `protobuf:"varint,1,opt,name=instances" json:"instances,omitempty"`
	// Estimated size of memory consumed for include dir cache.
	Memory *int64 `protobuf:"varint,2,opt,name=memory" json:"memory,omitempty"`
	// Number of times new instance is created.
	Created *int64 `protobuf:"varint,3,opt,name=created" json:"created,omitempty"`
	// Number of times instance is reused.
	Reused           *int64 `protobuf:"varint,4,opt,name=reused" json:"reused,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IncludeDirCacheStats) Reset()                    { *m = IncludeDirCacheStats{} }
func (m *IncludeDirCacheStats) String() string            { return proto.CompactTextString(m) }
func (*IncludeDirCacheStats) ProtoMessage()               {}
func (*IncludeDirCacheStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *IncludeDirCacheStats) GetInstances() int64 {
	if m != nil && m.Instances != nil {
		return *m.Instances
	}
	return 0
}

func (m *IncludeDirCacheStats) GetMemory() int64 {
	if m != nil && m.Memory != nil {
		return *m.Memory
	}
	return 0
}

func (m *IncludeDirCacheStats) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *IncludeDirCacheStats) GetReused() int64 {
	if m != nil && m.Reused != nil {
		return *m.Reused
	}
	return 0
}

// Statistics for LocalOutputCache.
//
// LocalOutputCache is a cache for build output files.
// NEXT ID TO USE: 13
type LocalOutputCacheStats struct {
	// Number of new compile results successfully cached.
	SaveSuccess *int64 `protobuf:"varint,1,opt,name=save_success,json=saveSuccess" json:"save_success,omitempty"`
	// Total time to save all the files.
	SaveSuccessTimeMs *int64 `protobuf:"varint,2,opt,name=save_success_time_ms,json=saveSuccessTimeMs" json:"save_success_time_ms,omitempty"`
	// Number of compile results failed to get cached.
	SaveFailure *int64 `protobuf:"varint,3,opt,name=save_failure,json=saveFailure" json:"save_failure,omitempty"`
	// The number of cache hits
	LookupSuccess *int64 `protobuf:"varint,4,opt,name=lookup_success,json=lookupSuccess" json:"lookup_success,omitempty"`
	// The total time (in milliseconds) to find a cache (success case only).
	LookupSuccessTimeMs *int64 `protobuf:"varint,5,opt,name=lookup_success_time_ms,json=lookupSuccessTimeMs" json:"lookup_success_time_ms,omitempty"`
	// The number of cache misses
	LookupMiss *int64 `protobuf:"varint,6,opt,name=lookup_miss,json=lookupMiss" json:"lookup_miss,omitempty"`
	// The number of failed lookups due to an error (other than misses)
	LookupFailure *int64 `protobuf:"varint,7,opt,name=lookup_failure,json=lookupFailure" json:"lookup_failure,omitempty"`
	// The number of times a cache is correctly copied.
	CommitSuccess *int64 `protobuf:"varint,8,opt,name=commit_success,json=commitSuccess" json:"commit_success,omitempty"`
	// The total time to copy a cache (copy from cache dir to output dir).
	CommitSuccessTimeMs *int64 `protobuf:"varint,9,opt,name=commit_success_time_ms,json=commitSuccessTimeMs" json:"commit_success_time_ms,omitempty"`
	// The number of times a cache copy failed.
	CommitFailure *int64 `protobuf:"varint,10,opt,name=commit_failure,json=commitFailure" json:"commit_failure,omitempty"`
	// The number of times LocalOutputCache garbage collection was invoked.
	GcCount *int64 `protobuf:"varint,11,opt,name=gc_count,json=gcCount" json:"gc_count,omitempty"`
	// The total time of garbage collection.
	GcTotalTimeMs    *int64 `protobuf:"varint,12,opt,name=gc_total_time_ms,json=gcTotalTimeMs" json:"gc_total_time_ms,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LocalOutputCacheStats) Reset()                    { *m = LocalOutputCacheStats{} }
func (m *LocalOutputCacheStats) String() string            { return proto.CompactTextString(m) }
func (*LocalOutputCacheStats) ProtoMessage()               {}
func (*LocalOutputCacheStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *LocalOutputCacheStats) GetSaveSuccess() int64 {
	if m != nil && m.SaveSuccess != nil {
		return *m.SaveSuccess
	}
	return 0
}

func (m *LocalOutputCacheStats) GetSaveSuccessTimeMs() int64 {
	if m != nil && m.SaveSuccessTimeMs != nil {
		return *m.SaveSuccessTimeMs
	}
	return 0
}

func (m *LocalOutputCacheStats) GetSaveFailure() int64 {
	if m != nil && m.SaveFailure != nil {
		return *m.SaveFailure
	}
	return 0
}

func (m *LocalOutputCacheStats) GetLookupSuccess() int64 {
	if m != nil && m.LookupSuccess != nil {
		return *m.LookupSuccess
	}
	return 0
}

func (m *LocalOutputCacheStats) GetLookupSuccessTimeMs() int64 {
	if m != nil && m.LookupSuccessTimeMs != nil {
		return *m.LookupSuccessTimeMs
	}
	return 0
}

func (m *LocalOutputCacheStats) GetLookupMiss() int64 {
	if m != nil && m.LookupMiss != nil {
		return *m.LookupMiss
	}
	return 0
}

func (m *LocalOutputCacheStats) GetLookupFailure() int64 {
	if m != nil && m.LookupFailure != nil {
		return *m.LookupFailure
	}
	return 0
}

func (m *LocalOutputCacheStats) GetCommitSuccess() int64 {
	if m != nil && m.CommitSuccess != nil {
		return *m.CommitSuccess
	}
	return 0
}

func (m *LocalOutputCacheStats) GetCommitSuccessTimeMs() int64 {
	if m != nil && m.CommitSuccessTimeMs != nil {
		return *m.CommitSuccessTimeMs
	}
	return 0
}

func (m *LocalOutputCacheStats) GetCommitFailure() int64 {
	if m != nil && m.CommitFailure != nil {
		return *m.CommitFailure
	}
	return 0
}

func (m *LocalOutputCacheStats) GetGcCount() int64 {
	if m != nil && m.GcCount != nil {
		return *m.GcCount
	}
	return 0
}

func (m *LocalOutputCacheStats) GetGcTotalTimeMs() int64 {
	if m != nil && m.GcTotalTimeMs != nil {
		return *m.GcTotalTimeMs
	}
	return 0
}

// Statistics of HttpRPC.
//
// compiler_proxy calls goma backend via HttpRPC.
// NEXT ID TO USE: 11
type HttpRPCStats struct {
	// Status code for initial /pingz.
	// compiler_proxy accessis /pingz to confirm backend live.
	PingStatusCode *int32 `protobuf:"varint,1,opt,name=ping_status_code,json=pingStatusCode" json:"ping_status_code,omitempty"`
	// round trip time of initial /pingz in milliseconds.
	// negative value would be set if /pingz failed by network error.
	PingRoundTripTimeMs *int32 `protobuf:"varint,10,opt,name=ping_round_trip_time_ms,json=pingRoundTripTimeMs" json:"ping_round_trip_time_ms,omitempty"`
	// Number of HttpRPC called.
	Query *int64 `protobuf:"varint,2,opt,name=query" json:"query,omitempty"`
	// Number of active HttpRPC now.
	Active *int64 `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
	// Number of HttpRPC retries.
	Retry *int64 `protobuf:"varint,4,opt,name=retry" json:"retry,omitempty"`
	// Number of HttpRPC timeouts.
	Timeout *int64 `protobuf:"varint,5,opt,name=timeout" json:"timeout,omitempty"`
	// Number of HttpRPC errors.
	Error *int64 `protobuf:"varint,6,opt,name=error" json:"error,omitempty"`
	// Number of times detected network error and become network error mode.
	NetworkError *int64 `protobuf:"varint,7,opt,name=network_error,json=networkError" json:"network_error,omitempty"`
	// Number of times recovered from network error mode.
	NetworkRecovered *int64 `protobuf:"varint,8,opt,name=network_recovered,json=networkRecovered" json:"network_recovered,omitempty"`
	// Statistics of HTTP status code.
	//
	// Since we may get several kinds of status code from backend,
	// this is repeated field.
	StatusCode       []*HttpRPCStats_HttpStatus `protobuf:"bytes,9,rep,name=status_code,json=statusCode" json:"status_code,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *HttpRPCStats) Reset()                    { *m = HttpRPCStats{} }
func (m *HttpRPCStats) String() string            { return proto.CompactTextString(m) }
func (*HttpRPCStats) ProtoMessage()               {}
func (*HttpRPCStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *HttpRPCStats) GetPingStatusCode() int32 {
	if m != nil && m.PingStatusCode != nil {
		return *m.PingStatusCode
	}
	return 0
}

func (m *HttpRPCStats) GetPingRoundTripTimeMs() int32 {
	if m != nil && m.PingRoundTripTimeMs != nil {
		return *m.PingRoundTripTimeMs
	}
	return 0
}

func (m *HttpRPCStats) GetQuery() int64 {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return 0
}

func (m *HttpRPCStats) GetActive() int64 {
	if m != nil && m.Active != nil {
		return *m.Active
	}
	return 0
}

func (m *HttpRPCStats) GetRetry() int64 {
	if m != nil && m.Retry != nil {
		return *m.Retry
	}
	return 0
}

func (m *HttpRPCStats) GetTimeout() int64 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func (m *HttpRPCStats) GetError() int64 {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return 0
}

func (m *HttpRPCStats) GetNetworkError() int64 {
	if m != nil && m.NetworkError != nil {
		return *m.NetworkError
	}
	return 0
}

func (m *HttpRPCStats) GetNetworkRecovered() int64 {
	if m != nil && m.NetworkRecovered != nil {
		return *m.NetworkRecovered
	}
	return 0
}

func (m *HttpRPCStats) GetStatusCode() []*HttpRPCStats_HttpStatus {
	if m != nil {
		return m.StatusCode
	}
	return nil
}

type HttpRPCStats_HttpStatus struct {
	// HTTP status code e.g. 200, 302, 401, 503, etc.
	StatusCode *int32 `protobuf:"varint,1,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	// Number of times the status code were returned from backend.
	Count            *int64 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *HttpRPCStats_HttpStatus) Reset()                    { *m = HttpRPCStats_HttpStatus{} }
func (m *HttpRPCStats_HttpStatus) String() string            { return proto.CompactTextString(m) }
func (*HttpRPCStats_HttpStatus) ProtoMessage()               {}
func (*HttpRPCStats_HttpStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15, 0} }

func (m *HttpRPCStats_HttpStatus) GetStatusCode() int32 {
	if m != nil && m.StatusCode != nil {
		return *m.StatusCode
	}
	return 0
}

func (m *HttpRPCStats_HttpStatus) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// Statistics for errors in compile_task.
type GomaErrorStats struct {
	// The number of errors that were reported to the user.
	UserError *int64 `protobuf:"varint,1,opt,name=user_error,json=userError" json:"user_error,omitempty"`
	// Deprecated tikuta 7/2016.
	DEPRECATEDUserWarning *int64 `protobuf:"varint,2,opt,name=DEPRECATED_user_warning,json=DEPRECATEDUserWarning" json:"DEPRECATED_user_warning,omitempty"`
	// The number of errors that were written to the log file.
	LogError *int64 `protobuf:"varint,3,opt,name=log_error,json=logError" json:"log_error,omitempty"`
	// The number of warnings that were written to the log file.
	LogWarning       *int64 `protobuf:"varint,4,opt,name=log_warning,json=logWarning" json:"log_warning,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GomaErrorStats) Reset()                    { *m = GomaErrorStats{} }
func (m *GomaErrorStats) String() string            { return proto.CompactTextString(m) }
func (*GomaErrorStats) ProtoMessage()               {}
func (*GomaErrorStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *GomaErrorStats) GetUserError() int64 {
	if m != nil && m.UserError != nil {
		return *m.UserError
	}
	return 0
}

func (m *GomaErrorStats) GetDEPRECATEDUserWarning() int64 {
	if m != nil && m.DEPRECATEDUserWarning != nil {
		return *m.DEPRECATEDUserWarning
	}
	return 0
}

func (m *GomaErrorStats) GetLogError() int64 {
	if m != nil && m.LogError != nil {
		return *m.LogError
	}
	return 0
}

func (m *GomaErrorStats) GetLogWarning() int64 {
	if m != nil && m.LogWarning != nil {
		return *m.LogWarning
	}
	return 0
}

// Statistics for compilers/subprograms mismatches.
type GomaMismatchStats struct {
	// The number of compiler version mismatches.
	CommandVersionMismatch *int64 `protobuf:"varint,1,opt,name=command_version_mismatch,json=commandVersionMismatch" json:"command_version_mismatch,omitempty"`
	// The number of compiler binary hash mismatches.
	BinaryHashMismatch *int64 `protobuf:"varint,2,opt,name=binary_hash_mismatch,json=binaryHashMismatch" json:"binary_hash_mismatch,omitempty"`
	// The number of subprogram mismatches.
	SubprogramMismatch *int64 `protobuf:"varint,3,opt,name=subprogram_mismatch,json=subprogramMismatch" json:"subprogram_mismatch,omitempty"`
	XXX_unrecognized   []byte `json:"-"`
}

func (m *GomaMismatchStats) Reset()                    { *m = GomaMismatchStats{} }
func (m *GomaMismatchStats) String() string            { return proto.CompactTextString(m) }
func (*GomaMismatchStats) ProtoMessage()               {}
func (*GomaMismatchStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *GomaMismatchStats) GetCommandVersionMismatch() int64 {
	if m != nil && m.CommandVersionMismatch != nil {
		return *m.CommandVersionMismatch
	}
	return 0
}

func (m *GomaMismatchStats) GetBinaryHashMismatch() int64 {
	if m != nil && m.BinaryHashMismatch != nil {
		return *m.BinaryHashMismatch
	}
	return 0
}

func (m *GomaMismatchStats) GetSubprogramMismatch() int64 {
	if m != nil && m.SubprogramMismatch != nil {
		return *m.SubprogramMismatch
	}
	return 0
}

// General purpose protocol buffer type to represents distribution.
//
// logs made from histogram usually use this protocol buffer type.
type DistributionProto struct {
	// Number of elements.
	Count *int64 `protobuf:"varint,1,req,name=count" json:"count,omitempty"`
	// Sum of all elements.
	Sum *int64 `protobuf:"varint,2,req,name=sum" json:"sum,omitempty"`
	// Square sum of all elements.
	// This can be used to calculate variance.
	SumOfSquares *float64 `protobuf:"fixed64,3,req,name=sum_of_squares,json=sumOfSquares" json:"sum_of_squares,omitempty"`
	// minimum value of all elements.
	Min *int64 `protobuf:"varint,4,opt,name=min" json:"min,omitempty"`
	// maximum value of all elements.
	Max *int64 `protobuf:"varint,5,opt,name=max" json:"max,omitempty"`
	// histogram logbase.
	Logbase *float64 `protobuf:"fixed64,6,opt,name=logbase" json:"logbase,omitempty"`
	// Values of each bucket.
	// The bucket range is like [0,1), [1, logbase), [logbase, logbase^2), ...
	BucketValue      []int64 `protobuf:"varint,7,rep,name=bucket_value,json=bucketValue" json:"bucket_value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DistributionProto) Reset()                    { *m = DistributionProto{} }
func (m *DistributionProto) String() string            { return proto.CompactTextString(m) }
func (*DistributionProto) ProtoMessage()               {}
func (*DistributionProto) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *DistributionProto) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *DistributionProto) GetSum() int64 {
	if m != nil && m.Sum != nil {
		return *m.Sum
	}
	return 0
}

func (m *DistributionProto) GetSumOfSquares() float64 {
	if m != nil && m.SumOfSquares != nil {
		return *m.SumOfSquares
	}
	return 0
}

func (m *DistributionProto) GetMin() int64 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *DistributionProto) GetMax() int64 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

func (m *DistributionProto) GetLogbase() float64 {
	if m != nil && m.Logbase != nil {
		return *m.Logbase
	}
	return 0
}

func (m *DistributionProto) GetBucketValue() []int64 {
	if m != nil {
		return m.BucketValue
	}
	return nil
}

// Histograpms of compiler_proxy.
type GomaHistograms struct {
	// Histogram for HttpRPC call time in milliseconds.
	RpcCallTime *DistributionProto `protobuf:"bytes,1,opt,name=rpc_call_time,json=rpcCallTime" json:"rpc_call_time,omitempty"`
	// Histogram for goma executor run time in milliseconds.
	ExecutorRunTime  *DistributionProto `protobuf:"bytes,2,opt,name=executor_run_time,json=executorRunTime" json:"executor_run_time,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *GomaHistograms) Reset()                    { *m = GomaHistograms{} }
func (m *GomaHistograms) String() string            { return proto.CompactTextString(m) }
func (*GomaHistograms) ProtoMessage()               {}
func (*GomaHistograms) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *GomaHistograms) GetRpcCallTime() *DistributionProto {
	if m != nil {
		return m.RpcCallTime
	}
	return nil
}

func (m *GomaHistograms) GetExecutorRunTime() *DistributionProto {
	if m != nil {
		return m.ExecutorRunTime
	}
	return nil
}

type MachineInfo struct {
	// goma compiler_proxy's revision number.
	// value: <git commit>@<timestamp in Unix time>. (51 chars)
	GomaRevision *string `protobuf:"bytes,1,opt,name=goma_revision,json=gomaRevision" json:"goma_revision,omitempty"`
	// type of operating system.
	Os *MachineInfo_OSType `protobuf:"varint,2,opt,name=os,enum=eventlog.MachineInfo_OSType" json:"os,omitempty"`
	// Number of CPUs (cores) of the machine.
	Ncpus *int32 `protobuf:"varint,3,opt,name=ncpus" json:"ncpus,omitempty"`
	// Memory size of the machine in bytes.
	MemorySize *int64 `protobuf:"varint,4,opt,name=memory_size,json=memorySize" json:"memory_size,omitempty"`
	// Deprecated tikuta 7/2016.
	DEPRECATEDCpuCapability []uint32 `protobuf:"varint,5,rep,name=DEPRECATED_cpu_capability,json=DEPRECATEDCpuCapability" json:"DEPRECATED_cpu_capability,omitempty"`
	XXX_unrecognized        []byte   `json:"-"`
}

func (m *MachineInfo) Reset()                    { *m = MachineInfo{} }
func (m *MachineInfo) String() string            { return proto.CompactTextString(m) }
func (*MachineInfo) ProtoMessage()               {}
func (*MachineInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *MachineInfo) GetGomaRevision() string {
	if m != nil && m.GomaRevision != nil {
		return *m.GomaRevision
	}
	return ""
}

func (m *MachineInfo) GetOs() MachineInfo_OSType {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return MachineInfo_UNKNOWN
}

func (m *MachineInfo) GetNcpus() int32 {
	if m != nil && m.Ncpus != nil {
		return *m.Ncpus
	}
	return 0
}

func (m *MachineInfo) GetMemorySize() int64 {
	if m != nil && m.MemorySize != nil {
		return *m.MemorySize
	}
	return 0
}

func (m *MachineInfo) GetDEPRECATEDCpuCapability() []uint32 {
	if m != nil {
		return m.DEPRECATEDCpuCapability
	}
	return nil
}

// NEXT ID TO USE: 16
type GomaStats struct {
	// different kind of stats. A single one should be provided.
	// See the definition of each message type for a details description of
	// thier use.
	RequestStats          *RequestStats          `protobuf:"bytes,1,opt,name=request_stats,json=requestStats" json:"request_stats,omitempty"`
	FileStats             *FileStats             `protobuf:"bytes,2,opt,name=file_stats,json=fileStats" json:"file_stats,omitempty"`
	OutputStats           *OutputStats           `protobuf:"bytes,3,opt,name=output_stats,json=outputStats" json:"output_stats,omitempty"`
	MemoryStats           *MemoryStats           `protobuf:"bytes,4,opt,name=memory_stats,json=memoryStats" json:"memory_stats,omitempty"`
	TimeStats             *TimeStats             `protobuf:"bytes,5,opt,name=time_stats,json=timeStats" json:"time_stats,omitempty"`
	IncludeProcessorStats *IncludeProcessorStats `protobuf:"bytes,6,opt,name=include_processor_stats,json=includeProcessorStats" json:"include_processor_stats,omitempty"`
	DepscacheStats        *DepsCacheStats        `protobuf:"bytes,7,opt,name=depscache_stats,json=depscacheStats" json:"depscache_stats,omitempty"`
	// Deprecated 04/2017. IncludeDirCache has been removed from goma.
	IncdircacheStats      *IncludeDirCacheStats  `protobuf:"bytes,8,opt,name=incdircache_stats,json=incdircacheStats" json:"incdircache_stats,omitempty"`
	HttpRpcStats          *HttpRPCStats          `protobuf:"bytes,9,opt,name=http_rpc_stats,json=httpRpcStats" json:"http_rpc_stats,omitempty"`
	ErrorStats            *GomaErrorStats        `protobuf:"bytes,12,opt,name=error_stats,json=errorStats" json:"error_stats,omitempty"`
	MismatchStats         *GomaMismatchStats     `protobuf:"bytes,13,opt,name=mismatch_stats,json=mismatchStats" json:"mismatch_stats,omitempty"`
	IncludecacheStats     *IncludeCacheStats     `protobuf:"bytes,14,opt,name=includecache_stats,json=includecacheStats" json:"includecache_stats,omitempty"`
	LocalOutputCacheStats *LocalOutputCacheStats `protobuf:"bytes,15,opt,name=local_output_cache_stats,json=localOutputCacheStats" json:"local_output_cache_stats,omitempty"`
	Histogram             *GomaHistograms        `protobuf:"bytes,10,opt,name=histogram" json:"histogram,omitempty"`
	MachineInfo           *MachineInfo           `protobuf:"bytes,11,opt,name=machine_info,json=machineInfo" json:"machine_info,omitempty"`
	XXX_unrecognized      []byte                 `json:"-"`
}

func (m *GomaStats) Reset()                    { *m = GomaStats{} }
func (m *GomaStats) String() string            { return proto.CompactTextString(m) }
func (*GomaStats) ProtoMessage()               {}
func (*GomaStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *GomaStats) GetRequestStats() *RequestStats {
	if m != nil {
		return m.RequestStats
	}
	return nil
}

func (m *GomaStats) GetFileStats() *FileStats {
	if m != nil {
		return m.FileStats
	}
	return nil
}

func (m *GomaStats) GetOutputStats() *OutputStats {
	if m != nil {
		return m.OutputStats
	}
	return nil
}

func (m *GomaStats) GetMemoryStats() *MemoryStats {
	if m != nil {
		return m.MemoryStats
	}
	return nil
}

func (m *GomaStats) GetTimeStats() *TimeStats {
	if m != nil {
		return m.TimeStats
	}
	return nil
}

func (m *GomaStats) GetIncludeProcessorStats() *IncludeProcessorStats {
	if m != nil {
		return m.IncludeProcessorStats
	}
	return nil
}

func (m *GomaStats) GetDepscacheStats() *DepsCacheStats {
	if m != nil {
		return m.DepscacheStats
	}
	return nil
}

func (m *GomaStats) GetIncdircacheStats() *IncludeDirCacheStats {
	if m != nil {
		return m.IncdircacheStats
	}
	return nil
}

func (m *GomaStats) GetHttpRpcStats() *HttpRPCStats {
	if m != nil {
		return m.HttpRpcStats
	}
	return nil
}

func (m *GomaStats) GetErrorStats() *GomaErrorStats {
	if m != nil {
		return m.ErrorStats
	}
	return nil
}

func (m *GomaStats) GetMismatchStats() *GomaMismatchStats {
	if m != nil {
		return m.MismatchStats
	}
	return nil
}

func (m *GomaStats) GetIncludecacheStats() *IncludeCacheStats {
	if m != nil {
		return m.IncludecacheStats
	}
	return nil
}

func (m *GomaStats) GetLocalOutputCacheStats() *LocalOutputCacheStats {
	if m != nil {
		return m.LocalOutputCacheStats
	}
	return nil
}

func (m *GomaStats) GetHistogram() *GomaHistograms {
	if m != nil {
		return m.Histogram
	}
	return nil
}

func (m *GomaStats) GetMachineInfo() *MachineInfo {
	if m != nil {
		return m.MachineInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestStats)(nil), "eventlog.RequestStats")
	proto.RegisterType((*CompilerProxyStats)(nil), "eventlog.CompilerProxyStats")
	proto.RegisterType((*CompilerInfoStats)(nil), "eventlog.CompilerInfoStats")
	proto.RegisterType((*GomaCompileStats)(nil), "eventlog.GomaCompileStats")
	proto.RegisterType((*LocalCompileStats)(nil), "eventlog.LocalCompileStats")
	proto.RegisterType((*FallbackInSetupStats)(nil), "eventlog.FallbackInSetupStats")
	proto.RegisterType((*FileStats)(nil), "eventlog.FileStats")
	proto.RegisterType((*OutputStats)(nil), "eventlog.OutputStats")
	proto.RegisterType((*MemoryStats)(nil), "eventlog.MemoryStats")
	proto.RegisterType((*TimeStats)(nil), "eventlog.TimeStats")
	proto.RegisterType((*IncludeProcessorStats)(nil), "eventlog.IncludeProcessorStats")
	proto.RegisterType((*IncludeCacheStats)(nil), "eventlog.IncludeCacheStats")
	proto.RegisterType((*DepsCacheStats)(nil), "eventlog.DepsCacheStats")
	proto.RegisterType((*IncludeDirCacheStats)(nil), "eventlog.IncludeDirCacheStats")
	proto.RegisterType((*LocalOutputCacheStats)(nil), "eventlog.LocalOutputCacheStats")
	proto.RegisterType((*HttpRPCStats)(nil), "eventlog.HttpRPCStats")
	proto.RegisterType((*HttpRPCStats_HttpStatus)(nil), "eventlog.HttpRPCStats.HttpStatus")
	proto.RegisterType((*GomaErrorStats)(nil), "eventlog.GomaErrorStats")
	proto.RegisterType((*GomaMismatchStats)(nil), "eventlog.GomaMismatchStats")
	proto.RegisterType((*DistributionProto)(nil), "eventlog.DistributionProto")
	proto.RegisterType((*GomaHistograms)(nil), "eventlog.GomaHistograms")
	proto.RegisterType((*MachineInfo)(nil), "eventlog.MachineInfo")
	proto.RegisterType((*GomaStats)(nil), "eventlog.GomaStats")
	proto.RegisterEnum("eventlog.MachineInfo_OSType", MachineInfo_OSType_name, MachineInfo_OSType_value)
}

func init() { proto.RegisterFile("goma_stats.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 2183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x38, 0xcb, 0x73, 0x1b, 0x49,
	0xf9, 0x3f, 0x49, 0x56, 0x64, 0x7d, 0x7a, 0x58, 0x1a, 0xdb, 0x59, 0x65, 0x93, 0xfd, 0x25, 0x51,
	0x60, 0x71, 0x25, 0x94, 0x97, 0x0d, 0x14, 0x15, 0xde, 0x24, 0x72, 0x5e, 0xcb, 0x3a, 0x71, 0x8d,
	0x9d, 0xcd, 0x72, 0xa0, 0xa6, 0x5a, 0xa3, 0x96, 0xd4, 0xe5, 0x99, 0xe9, 0x49, 0x4f, 0x8f, 0x63,
	0xe7, 0xc0, 0x3f, 0x40, 0x15, 0x37, 0x2e, 0x1c, 0xb8, 0x73, 0xe3, 0xc6, 0x89, 0x2a, 0x8a, 0xff,
	0x05, 0xfe, 0x06, 0xb8, 0x51, 0xdd, 0x5f, 0x77, 0x4f, 0xcb, 0x32, 0xb5, 0xb7, 0xf9, 0xde, 0xef,
	0xee, 0xaf, 0x07, 0x06, 0x0b, 0x9e, 0x92, 0xa8, 0x90, 0x44, 0x16, 0xfb, 0xb9, 0xe0, 0x92, 0x07,
	0x9b, 0xf4, 0x8c, 0x66, 0x32, 0xe1, 0x8b, 0xf1, 0xef, 0x1b, 0xd0, 0x0d, 0xe9, 0xbb, 0x92, 0x16,
	0xf2, 0x58, 0x31, 0x04, 0x3b, 0xd0, 0x94, 0x5c, 0x92, 0x64, 0x54, 0xbb, 0x53, 0xdb, 0x6b, 0x84,
	0x08, 0x04, 0x23, 0x68, 0x15, 0x65, 0x1c, 0xd3, 0xa2, 0x18, 0xd5, 0x35, 0xde, 0x82, 0x8a, 0x32,
	0x27, 0x2c, 0x29, 0x05, 0x1d, 0x35, 0x90, 0x62, 0xc0, 0x60, 0x02, 0xfd, 0x98, 0xa7, 0x39, 0x4b,
	0xa8, 0x88, 0x72, 0xc1, 0xcf, 0x2f, 0x46, 0x1b, 0x77, 0x6a, 0x7b, 0x9d, 0x87, 0xb7, 0xf6, 0xad,
	0xf5, 0xfd, 0x89, 0xa1, 0x1f, 0x29, 0xb2, 0xb6, 0x1f, 0xf6, 0x62, 0x1f, 0x17, 0xfc, 0x12, 0x1c,
	0x22, 0x62, 0xd9, 0x9c, 0x8f, 0x9a, 0x5a, 0xc7, 0xcd, 0x75, 0x1d, 0x2f, 0xb3, 0x39, 0x47, 0x15,
	0xdd, 0xd8, 0x43, 0x05, 0xfb, 0xb0, 0xa1, 0xe2, 0x1f, 0x5d, 0xd3, 0x82, 0x1f, 0x57, 0x82, 0xcf,
	0x79, 0x4a, 0x8c, 0x30, 0xca, 0x69, 0xbe, 0xe0, 0x73, 0x68, 0x26, 0x3c, 0x26, 0xc9, 0xa8, 0x75,
	0xd9, 0xd2, 0x97, 0x0a, 0xbd, 0x22, 0x81, 0x9c, 0xc1, 0x17, 0x30, 0x9c, 0x93, 0x24, 0x99, 0x92,
	0xf8, 0x34, 0x62, 0x59, 0x54, 0x50, 0x59, 0xe6, 0xa3, 0x4d, 0x2d, 0xfe, 0xff, 0x95, 0xf8, 0x33,
	0xc3, 0xf2, 0x32, 0x3b, 0x56, 0x0c, 0xa8, 0x61, 0x6b, 0xbe, 0x8a, 0x1d, 0xef, 0x41, 0xb0, 0x9e,
	0x95, 0x20, 0x80, 0x0d, 0x95, 0x56, 0x53, 0x14, 0xfd, 0x3d, 0xfe, 0x53, 0x0d, 0x86, 0x6b, 0xc1,
	0x07, 0xd7, 0xe1, 0x5a, 0x21, 0xb9, 0xa0, 0x85, 0xe1, 0x35, 0x50, 0xf0, 0x09, 0x80, 0xfe, 0x8a,
	0x66, 0x65, 0x6e, 0x8b, 0xd8, 0xd6, 0x98, 0x83, 0x32, 0xd7, 0x06, 0x52, 0x56, 0x14, 0xa6, 0x86,
	0xfa, 0xdb, 0x19, 0xdd, 0xa8, 0x8c, 0x06, 0xf7, 0x61, 0x98, 0x70, 0x32, 0xa3, 0xb3, 0xa8, 0x60,
	0x1f, 0x68, 0x34, 0xbd, 0x90, 0xb4, 0xd0, 0x35, 0x69, 0x84, 0x5b, 0x48, 0x38, 0x66, 0x1f, 0xe8,
	0x13, 0x85, 0x1e, 0xff, 0xb5, 0x06, 0x83, 0xcb, 0x49, 0x0e, 0x3e, 0x86, 0xcd, 0x39, 0xcb, 0x58,
	0xb1, 0xa4, 0x33, 0xe3, 0xa1, 0x83, 0x83, 0x9b, 0xd0, 0x8e, 0x49, 0xbc, 0xa4, 0xd1, 0x92, 0x49,
	0xe3, 0xe2, 0xa6, 0x46, 0xbc, 0x60, 0x32, 0xf8, 0x14, 0xb6, 0x74, 0xb6, 0xa3, 0x8a, 0xe5, 0x9a,
	0x66, 0xe9, 0x69, 0xf4, 0xc4, 0xf2, 0x8d, 0xa0, 0x45, 0xa6, 0x5c, 0x48, 0x3a, 0xb3, 0x0d, 0x69,
	0x40, 0xd5, 0xda, 0x82, 0x4a, 0x71, 0x61, 0x02, 0x42, 0xc0, 0x45, 0xd9, 0xf4, 0x52, 0xfb, 0x6b,
	0x18, 0xae, 0x15, 0x3b, 0x18, 0x40, 0x43, 0x94, 0x99, 0x71, 0x5a, 0x7d, 0xaa, 0x5c, 0x9f, 0xb2,
	0x24, 0xa1, 0x33, 0xe3, 0xac, 0x81, 0x56, 0x62, 0x6c, 0xac, 0xc6, 0x38, 0xfe, 0x7b, 0x1d, 0x76,
	0xae, 0xea, 0x84, 0xe0, 0x73, 0xd8, 0x55, 0xb6, 0xe9, 0x2c, 0x92, 0x3c, 0xca, 0x89, 0x28, 0x68,
	0x34, 0x4f, 0xc8, 0xc2, 0xd6, 0x31, 0x40, 0xe2, 0x09, 0x3f, 0x52, 0xa4, 0x67, 0x8a, 0x12, 0xfc,
	0x0c, 0x6e, 0x66, 0x3c, 0x12, 0x34, 0xe5, 0x92, 0x46, 0xa6, 0xe9, 0xa3, 0xa2, 0xcc, 0x73, 0x0c,
	0x1f, 0x9d, 0x1a, 0x65, 0x3c, 0xd4, 0x1c, 0x36, 0x18, 0x4b, 0x0f, 0xee, 0x41, 0x6f, 0x29, 0x65,
	0x1e, 0xcd, 0x58, 0x41, 0xa6, 0x89, 0xf3, 0xb5, 0xab, 0x90, 0x07, 0x06, 0x17, 0x3c, 0x82, 0x1b,
	0xca, 0xb2, 0x72, 0x6a, 0x41, 0x65, 0xb4, 0x3a, 0x8c, 0x98, 0x48, 0xed, 0xf7, 0x09, 0x7f, 0x4e,
	0xa5, 0xdf, 0x8e, 0xc1, 0x03, 0x18, 0x3a, 0x6e, 0x67, 0x02, 0xb3, 0x3c, 0xb0, 0x04, 0x67, 0xe6,
	0x3e, 0x0c, 0x05, 0x1e, 0x43, 0x74, 0x16, 0x4d, 0x2f, 0xa2, 0xb2, 0xa0, 0xc2, 0xd4, 0x77, 0xcb,
	0x11, 0x9e, 0x5c, 0xbc, 0x29, 0xa8, 0x18, 0xff, 0x06, 0xda, 0xcf, 0x5c, 0x55, 0x6e, 0x41, 0xdb,
	0xd1, 0x4d, 0xaa, 0x2a, 0x84, 0xaa, 0x44, 0x99, 0x63, 0x5f, 0xda, 0x86, 0xb2, 0xb0, 0xaa, 0x9e,
	0x6a, 0x73, 0x17, 0xb7, 0x81, 0xc6, 0x4b, 0xe8, 0xbc, 0x2e, 0x65, 0x5e, 0x56, 0x07, 0xe2, 0x9c,
	0x25, 0x6e, 0x9e, 0x10, 0x50, 0xc2, 0x82, 0x66, 0x24, 0xa5, 0xb6, 0xf4, 0x08, 0xa9, 0x26, 0x99,
	0x96, 0x73, 0xa3, 0x51, 0x7d, 0x06, 0x37, 0x60, 0x33, 0xa7, 0xe4, 0x34, 0x12, 0xf4, 0x9d, 0xc9,
	0x57, 0x4b, 0xc1, 0x21, 0x7d, 0x37, 0x7e, 0x00, 0x9d, 0x43, 0x9a, 0x72, 0x71, 0xe1, 0x42, 0x89,
	0x79, 0x56, 0x94, 0x29, 0xcb, 0x16, 0x36, 0x14, 0x87, 0x18, 0xdf, 0x83, 0xf6, 0x09, 0x4b, 0xa9,
	0x9b, 0xf2, 0x32, 0x97, 0x2c, 0xa5, 0x76, 0xca, 0x11, 0x1a, 0xff, 0xa1, 0x06, 0xbb, 0x2f, 0xb3,
	0x38, 0x29, 0x67, 0xf4, 0x48, 0x70, 0x75, 0x40, 0x73, 0xf1, 0x4d, 0xe7, 0xfa, 0x29, 0xcb, 0x73,
	0x97, 0x1e, 0x0b, 0xaa, 0x71, 0xd3, 0x2c, 0xd1, 0x7b, 0xc2, 0x64, 0xa4, 0x4d, 0x61, 0x50, 0x3d,
	0x8d, 0x7e, 0x4b, 0x98, 0x54, 0xee, 0x04, 0xdf, 0x82, 0x3e, 0xf2, 0x89, 0x32, 0x43, 0x36, 0x0c,
	0xb2, 0xab, 0xb1, 0x61, 0x99, 0x29, 0xae, 0xf1, 0xbf, 0xeb, 0x30, 0x34, 0x7e, 0xe9, 0x41, 0x45,
	0x9f, 0xee, 0x01, 0x2a, 0x8b, 0x68, 0x26, 0x05, 0x73, 0x29, 0x46, 0xd1, 0xa7, 0x88, 0x0b, 0xf6,
	0x60, 0x80, 0x4c, 0x38, 0xf7, 0xea, 0xd8, 0x31, 0xbe, 0xa2, 0x61, 0xd4, 0xc7, 0x3e, 0xe8, 0xdc,
	0xab, 0x53, 0xc1, 0xe4, 0x7e, 0xc9, 0xa4, 0x57, 0xe2, 0x0d, 0xbf, 0xc4, 0x2a, 0xec, 0x32, 0x9f,
	0x11, 0xe9, 0x1a, 0xd2, 0x82, 0x8a, 0x42, 0xcf, 0x58, 0xac, 0x28, 0xd8, 0x7d, 0x16, 0x0c, 0xf6,
	0x61, 0x9b, 0x0b, 0xb6, 0x60, 0x19, 0x51, 0xc3, 0xa0, 0x1c, 0xd2, 0xae, 0xb4, 0x34, 0xd7, 0xd0,
	0x92, 0x4e, 0x14, 0x45, 0x7b, 0x73, 0x1f, 0x1c, 0x32, 0x4a, 0xc9, 0x39, 0x72, 0x6f, 0x62, 0x47,
	0x5b, 0xc2, 0x21, 0x39, 0xd7, 0xbc, 0xfb, 0xb0, 0x3d, 0x67, 0x89, 0xa4, 0x42, 0x4f, 0xbf, 0xd3,
	0xdd, 0x46, 0xdd, 0x96, 0xb4, 0xa2, 0xdb, 0xf1, 0x3b, 0xdd, 0x80, 0xba, 0x2d, 0xc1, 0xe8, 0x1e,
	0xff, 0xb3, 0x06, 0xfd, 0x03, 0x9a, 0x17, 0x5e, 0xde, 0x3f, 0x85, 0xad, 0x19, 0xcd, 0x8b, 0x48,
	0xaa, 0xd9, 0x43, 0x61, 0xcc, 0x7c, 0x4f, 0xa1, 0x4f, 0x14, 0x56, 0x9b, 0xb9, 0x0d, 0x1d, 0xa5,
	0xdd, 0x56, 0x07, 0xb3, 0x0e, 0x29, 0x39, 0xb7, 0xb5, 0x59, 0x2b, 0x60, 0xe3, 0x8a, 0x02, 0xde,
	0x85, 0x2e, 0x9b, 0x79, 0xa6, 0xb0, 0x14, 0x1d, 0x83, 0xf3, 0x2b, 0xd7, 0xac, 0x2a, 0xe7, 0x55,
	0xe8, 0xda, 0x6a, 0x85, 0xaa, 0x9a, 0xb6, 0x56, 0xc6, 0xf6, 0xb7, 0xb0, 0x63, 0x3a, 0xec, 0x80,
	0x09, 0x2f, 0xd8, 0x5b, 0xd0, 0x66, 0x59, 0x21, 0x49, 0x16, 0xbb, 0x06, 0xab, 0x10, 0x5a, 0x9b,
	0x1e, 0x41, 0x3b, 0xc7, 0x08, 0x29, 0xfb, 0xb1, 0xa0, 0xc4, 0xbb, 0x45, 0x0c, 0x88, 0x93, 0x5f,
	0x7a, 0x3d, 0x85, 0xd0, 0xf8, 0x3f, 0x0d, 0xd8, 0xd5, 0x97, 0x06, 0x1e, 0x1e, 0x9e, 0x07, 0x77,
	0xa1, 0x5b, 0x90, 0x33, 0x75, 0x32, 0xe3, 0x06, 0x85, 0x4e, 0x74, 0x14, 0xee, 0xd8, 0x6c, 0x51,
	0x9f, 0xc1, 0x8e, 0xcf, 0xa2, 0x07, 0x29, 0x4a, 0x6d, 0xca, 0x87, 0x1e, 0xab, 0x1a, 0xa7, 0xc3,
	0x4a, 0xe7, 0xea, 0xee, 0xa5, 0x75, 0x3e, 0x33, 0xfb, 0xd7, 0xb7, 0xa1, 0x9f, 0x70, 0x7e, 0x5a,
	0xe6, 0xce, 0xf0, 0x86, 0xbd, 0x2f, 0x15, 0xd6, 0x9a, 0xfe, 0x3e, 0x5c, 0x5f, 0x65, 0x73, 0xc6,
	0xb1, 0x1c, 0xdb, 0x2b, 0xec, 0xc6, 0xfc, 0x6d, 0xe8, 0x18, 0x21, 0xbd, 0x35, 0x60, 0x89, 0x00,
	0x51, 0x87, 0x6a, 0x77, 0xa8, 0x8c, 0x5b, 0x0f, 0x5b, 0xbe, 0x71, 0xcf, 0xc7, 0x98, 0xa7, 0x29,
	0x93, 0xce, 0x47, 0x9c, 0x90, 0x1e, 0x62, 0x3d, 0x1f, 0x57, 0xd9, 0x9c, 0x8f, 0x38, 0x22, 0xdb,
	0x2b, 0xec, 0xc6, 0xc7, 0x4a, 0xb7, 0x75, 0x01, 0x7c, 0xdd, 0xd6, 0x85, 0x1b, 0xb0, 0xb9, 0x88,
	0xa3, 0x98, 0x97, 0x99, 0x1c, 0x75, 0xb0, 0xd4, 0x8b, 0x78, 0xa2, 0xc0, 0xe0, 0x3b, 0x30, 0x58,
	0xc4, 0x66, 0x20, 0xad, 0xc1, 0x2e, 0xea, 0x58, 0xc4, 0x7a, 0x1a, 0xd1, 0xd4, 0xf8, 0x6f, 0x0d,
	0xe8, 0xbe, 0x90, 0x32, 0x0f, 0x8f, 0x26, 0x58, 0xf2, 0x3d, 0x18, 0xe4, 0x2c, 0x5b, 0xe8, 0xa5,
	0xbb, 0x2c, 0xa2, 0x98, 0xcf, 0x70, 0xc4, 0x9a, 0x61, 0x5f, 0xe1, 0x8f, 0x35, 0x7a, 0xc2, 0x67,
	0x34, 0xf8, 0x01, 0x7c, 0xa4, 0x39, 0x05, 0x2f, 0xb3, 0x59, 0x24, 0x05, 0xcb, 0x9d, 0x29, 0xd0,
	0x02, 0xdb, 0x8a, 0x1c, 0x2a, 0xea, 0x89, 0x60, 0xb9, 0x89, 0x6d, 0x07, 0x9a, 0xef, 0x4a, 0xea,
	0xba, 0x16, 0x01, 0xd5, 0x9a, 0x24, 0x96, 0xec, 0xcc, 0xb6, 0x83, 0x81, 0xfe, 0xc7, 0xe2, 0x33,
	0x82, 0x96, 0xb2, 0xc4, 0x4b, 0x3b, 0x78, 0x16, 0x54, 0xfc, 0x54, 0x08, 0x6e, 0x2f, 0x60, 0x04,
	0xd4, 0xb0, 0x67, 0x54, 0xbe, 0xe7, 0xe2, 0x34, 0x42, 0x2a, 0x56, 0xb4, 0x6b, 0x90, 0x4f, 0x35,
	0xd3, 0x03, 0x18, 0x5a, 0x26, 0x41, 0x63, 0x7e, 0xa6, 0x4e, 0x22, 0x53, 0xd3, 0x81, 0x21, 0x84,
	0x16, 0x1f, 0x3c, 0x81, 0x8e, 0x9f, 0xa0, 0xf6, 0x9d, 0xc6, 0x5e, 0xe7, 0xe1, 0xdd, 0x6a, 0x63,
	0xf6, 0x53, 0xaa, 0x01, 0xcc, 0x5b, 0x08, 0x85, 0xcb, 0xdf, 0xc7, 0x13, 0x80, 0x8a, 0xa2, 0xfa,
	0x72, 0x3d, 0xe5, 0x1e, 0xbb, 0x0a, 0x0d, 0x4b, 0x6d, 0x12, 0xa7, 0x81, 0xf1, 0x9f, 0x6b, 0xd0,
	0x57, 0x9b, 0xaa, 0x8e, 0x01, 0x2b, 0xf8, 0x09, 0x80, 0xda, 0x41, 0x4c, 0xa8, 0xe6, 0xdc, 0x50,
	0x18, 0x8c, 0xf3, 0xc7, 0xf0, 0xd1, 0xc1, 0xd3, 0xa3, 0xf0, 0xe9, 0xe4, 0xf1, 0xc9, 0xd3, 0x03,
	0xbd, 0xad, 0x44, 0xef, 0x89, 0xc8, 0xd4, 0xcd, 0xad, 0x35, 0x3f, 0xa9, 0x8f, 0x6a, 0xe1, 0x6e,
	0xc5, 0xa2, 0x16, 0x97, 0xb7, 0xc8, 0xa0, 0xd6, 0xdc, 0x84, 0x2f, 0x8c, 0x66, 0xb3, 0x1f, 0x26,
	0x7c, 0x81, 0x8a, 0xf5, 0x64, 0x2d, 0x9c, 0xb2, 0x0d, 0x3b, 0x59, 0x0b, 0x23, 0x3d, 0xfe, 0x4b,
	0x0d, 0x86, 0xca, 0xd7, 0x43, 0x56, 0xa4, 0x44, 0xc6, 0x4b, 0x74, 0xf7, 0x11, 0x8c, 0x54, 0x5b,
	0x93, 0x6c, 0x16, 0x9d, 0x51, 0x51, 0x30, 0x9e, 0xa9, 0xc9, 0xd4, 0x0c, 0xc6, 0xf9, 0xeb, 0x86,
	0xfe, 0x15, 0x92, 0xad, 0x78, 0xf0, 0x3d, 0xd8, 0x99, 0xb2, 0x8c, 0x88, 0x8b, 0x68, 0x49, 0x8a,
	0x65, 0x25, 0x85, 0x09, 0x0a, 0x90, 0xf6, 0x82, 0x14, 0x4b, 0x27, 0xf1, 0x19, 0x6c, 0x17, 0xe5,
	0x34, 0x17, 0x7c, 0x21, 0x48, 0x5a, 0x09, 0x60, 0x24, 0x41, 0x45, 0xb2, 0x02, 0xe3, 0x7f, 0xd4,
	0x60, 0x78, 0xc0, 0x0a, 0x29, 0xd8, 0xb4, 0x94, 0x8c, 0x67, 0x47, 0xfa, 0x11, 0xea, 0x4a, 0x51,
	0xbb, 0x53, 0x77, 0xa5, 0x50, 0x57, 0x41, 0x51, 0xa6, 0xa3, 0xba, 0xc6, 0xa9, 0x4f, 0xb5, 0x61,
	0x14, 0x65, 0x1a, 0xf1, 0x79, 0x54, 0xbc, 0x2b, 0x89, 0xd0, 0xb7, 0x4c, 0x7d, 0xaf, 0x16, 0x76,
	0x8b, 0x32, 0x7d, 0x3d, 0x3f, 0x46, 0x9c, 0x92, 0x4b, 0x59, 0x66, 0xf2, 0xa5, 0x3e, 0x35, 0x86,
	0x9c, 0xdb, 0x4b, 0x25, 0x25, 0xe7, 0xaa, 0xe3, 0x13, 0xbe, 0x98, 0x92, 0x82, 0xea, 0xce, 0xae,
	0x85, 0x16, 0x54, 0xc7, 0xe9, 0xb4, 0x8c, 0x4f, 0xa9, 0x8c, 0xce, 0x48, 0x52, 0xaa, 0xc3, 0xaa,
	0xa1, 0x8e, 0x53, 0xc4, 0x7d, 0xa5, 0x50, 0xe3, 0x3f, 0x9a, 0x1e, 0x79, 0xc1, 0x0a, 0xa9, 0xc3,
	0x2b, 0x82, 0x5f, 0x40, 0x4f, 0xe4, 0x71, 0x14, 0x93, 0x04, 0xcf, 0x07, 0x9d, 0xe9, 0x95, 0x27,
	0xe3, 0x5a, 0xd4, 0x61, 0x47, 0xe4, 0xf1, 0x84, 0x24, 0xfa, 0xe4, 0x08, 0x9e, 0xc3, 0x90, 0x9e,
	0xd3, 0xb8, 0x94, 0x5c, 0x54, 0xfb, 0x53, 0xfd, 0x9b, 0x95, 0x6c, 0x59, 0x29, 0xbb, 0x5f, 0xfd,
	0xae, 0x0e, 0x9d, 0x43, 0x12, 0x2f, 0x59, 0x46, 0xf5, 0xee, 0x7d, 0x0f, 0x7a, 0xfa, 0xd1, 0x2f,
	0xe8, 0x19, 0x53, 0xd5, 0xd6, 0x9e, 0xb5, 0xc3, 0xae, 0x42, 0x86, 0x06, 0x17, 0x7c, 0x17, 0xea,
	0x1c, 0xaf, 0x98, 0xbe, 0xff, 0x28, 0xf7, 0xf4, 0xec, 0xbf, 0x3e, 0x3e, 0xb9, 0xc8, 0x69, 0x58,
	0xe7, 0xfa, 0xc8, 0xc9, 0xe2, 0xbc, 0xc4, 0x3b, 0xbe, 0x19, 0x22, 0xa0, 0x57, 0x04, 0x7d, 0x63,
	0xfa, 0x77, 0x3b, 0x20, 0x4a, 0x5f, 0xed, 0x3f, 0x87, 0x1b, 0xde, 0xa0, 0xc4, 0x79, 0x19, 0xc5,
	0x24, 0x27, 0x53, 0x96, 0x30, 0x79, 0x31, 0x6a, 0xde, 0x69, 0xec, 0xf5, 0xf4, 0xa8, 0x78, 0xd3,
	0x34, 0xc9, 0xcb, 0x89, 0x63, 0x19, 0x3f, 0x84, 0x6b, 0xe8, 0x44, 0xd0, 0x81, 0xd6, 0x9b, 0x57,
	0xbf, 0x7a, 0xf5, 0xfa, 0xed, 0xab, 0xc1, 0xff, 0x05, 0x6d, 0x68, 0x7e, 0xf9, 0xf2, 0xd5, 0x9b,
	0xaf, 0x07, 0xb5, 0xa0, 0x05, 0x8d, 0xc3, 0xc7, 0x93, 0x41, 0x5d, 0x7d, 0xbc, 0x7d, 0xf9, 0x6a,
	0xd0, 0x18, 0xff, 0xab, 0x05, 0x6d, 0x55, 0x2a, 0x1c, 0x8d, 0x9f, 0x40, 0xcf, 0x3c, 0x08, 0xf0,
	0x1f, 0x88, 0xa9, 0xd2, 0xf5, 0x2a, 0x62, 0xff, 0x07, 0x48, 0xd8, 0x15, 0xfe, 0xef, 0x90, 0x87,
	0x00, 0x73, 0xfd, 0xaa, 0xd2, 0x92, 0x58, 0x9a, 0x6d, 0xef, 0x4d, 0xef, 0x7e, 0x05, 0xb4, 0xe7,
	0xee, 0x49, 0xf2, 0x08, 0xba, 0x5c, 0xef, 0x00, 0x46, 0xaa, 0xa1, 0xa5, 0x76, 0x2b, 0x29, 0xef,
	0x79, 0x11, 0x76, 0xb8, 0xf7, 0xd6, 0x78, 0x04, 0x5d, 0x9b, 0x4d, 0x2d, 0xb9, 0x71, 0x59, 0xd2,
	0x7b, 0x2e, 0x84, 0x26, 0xf1, 0xce, 0x4f, 0x7d, 0x6d, 0xa0, 0x5c, 0xf3, 0xb2, 0x9f, 0xee, 0xe5,
	0x10, 0xb6, 0xa5, 0x7b, 0x44, 0xbc, 0x85, 0x8f, 0x18, 0x6e, 0x4c, 0x51, 0x6e, 0x1f, 0x0b, 0x46,
	0x01, 0xfe, 0x2c, 0xb9, 0x5d, 0x29, 0xb8, 0xf2, 0x51, 0x11, 0xee, 0xb2, 0x2b, 0xdf, 0x1a, 0x8f,
	0x71, 0xbf, 0x34, 0x0b, 0xbb, 0x56, 0x88, 0x3f, 0x53, 0x46, 0x5e, 0x53, 0xaf, 0xac, 0xa4, 0x61,
	0xdf, 0x09, 0xa0, 0x8a, 0xd7, 0x30, 0x64, 0x59, 0x3c, 0x63, 0xc2, 0x57, 0xb2, 0xf6, 0x4b, 0xe5,
	0xaa, 0x85, 0x4f, 0xb7, 0xd3, 0xc0, 0x13, 0x46, 0x85, 0x3f, 0x85, 0xbe, 0x7e, 0xec, 0xaa, 0x81,
	0x45, 0x6d, 0xed, 0xcb, 0x6d, 0xe0, 0x5f, 0x37, 0xf8, 0x0a, 0x0e, 0xf3, 0x18, 0xa5, 0x7f, 0x04,
	0x1d, 0x7d, 0x5c, 0x1b, 0xd1, 0xee, 0xe5, 0x68, 0x56, 0x2f, 0x8f, 0x10, 0x68, 0x75, 0x91, 0x3c,
	0x81, 0xbe, 0x3d, 0x22, 0x8d, 0x74, 0xef, 0xf2, 0x80, 0xaf, 0x1d, 0xe7, 0x61, 0x2f, 0x5d, 0x39,
	0xdd, 0xbf, 0x80, 0xc0, 0x64, 0xda, 0x4f, 0x47, 0xff, 0xb2, 0x9e, 0xb5, 0x17, 0x56, 0x38, 0xf4,
	0xc5, 0x50, 0xd7, 0xd7, 0x30, 0xc2, 0xff, 0x28, 0xa6, 0x47, 0x7d, 0x8d, 0x5b, 0x97, 0xcb, 0x7e,
	0xe5, 0x42, 0x1b, 0xee, 0x26, 0x57, 0xee, 0xb9, 0x3f, 0x84, 0xf6, 0xd2, 0x1e, 0x8e, 0x7a, 0x79,
	0x59, 0x4b, 0x51, 0x75, 0x76, 0x86, 0x15, 0xab, 0xee, 0x7a, 0x3c, 0x73, 0xf0, 0xaf, 0x42, 0x67,
	0xad, 0xeb, 0xab, 0x13, 0x29, 0xec, 0xa4, 0x15, 0xf0, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xee,
	0xd2, 0x92, 0x2c, 0xda, 0x14, 0x00, 0x00,
}
