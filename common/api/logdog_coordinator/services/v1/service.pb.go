// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package logdog is a generated protocol buffer package.

It is generated from these files:
	service.proto
	state.proto

It has these top-level messages:
	GetConfigResponse
	RegisterStreamRequest
	TerminateStreamRequest
	LogStreamState
*/
package logdog

import prpccommon "github.com/luci/luci-go/common/prpc"
import prpc "github.com/luci/luci-go/server/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import logpb "github.com/luci/luci-go/common/proto/logdog/logpb"
import google_protobuf2 "github.com/luci/luci-go/common/proto/google"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// GetConfigResponse is the response structure for the user
// "GetConfig" endpoint.
type GetConfigResponse struct {
	// The API URL of the base "luci-config" service. If empty, the default
	// service URL will be used.
	ConfigServiceUrl string `protobuf:"bytes,1,opt,name=config_service_url" json:"config_service_url,omitempty"`
	// The name of the configuration set to load from.
	ConfigSet string `protobuf:"bytes,2,opt,name=config_set" json:"config_set,omitempty"`
	// The path of the text-serialized configuration protobuf.
	ConfigPath string `protobuf:"bytes,3,opt,name=config_path" json:"config_path,omitempty"`
}

func (m *GetConfigResponse) Reset()                    { *m = GetConfigResponse{} }
func (m *GetConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*GetConfigResponse) ProtoMessage()               {}
func (*GetConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// RegisterStreamRequest is the set of caller-supplied data for the
// RegisterStream Coordinator service endpoint.
type RegisterStreamRequest struct {
	// The log stream's path.
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// The log stream's secret.
	Secret []byte `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// The protobuf version string for this stream.
	ProtoVersion string `protobuf:"bytes,3,opt,name=proto_version" json:"proto_version,omitempty"`
	// The serialized LogStreamDescriptor protobuf for this stream.
	Desc *logpb.LogStreamDescriptor `protobuf:"bytes,4,opt,name=desc" json:"desc,omitempty"`
}

func (m *RegisterStreamRequest) Reset()                    { *m = RegisterStreamRequest{} }
func (m *RegisterStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterStreamRequest) ProtoMessage()               {}
func (*RegisterStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterStreamRequest) GetDesc() *logpb.LogStreamDescriptor {
	if m != nil {
		return m.Desc
	}
	return nil
}

// TerminateStreamRequest is the set of caller-supplied data for the
// TerminateStream Coordinator service endpoint.
type TerminateStreamRequest struct {
	// The log stream's path.
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// The log stream's secret.
	Secret []byte `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// The terminal index of the stream.
	TerminalIndex int64 `protobuf:"varint,3,opt,name=terminal_index" json:"terminal_index,omitempty"`
}

func (m *TerminateStreamRequest) Reset()                    { *m = TerminateStreamRequest{} }
func (m *TerminateStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*TerminateStreamRequest) ProtoMessage()               {}
func (*TerminateStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*GetConfigResponse)(nil), "logdog.GetConfigResponse")
	proto.RegisterType((*RegisterStreamRequest)(nil), "logdog.RegisterStreamRequest")
	proto.RegisterType((*TerminateStreamRequest)(nil), "logdog.TerminateStreamRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Services service

type ServicesClient interface {
	// GetConfig allows a service to retrieve the current service configuration
	// parameters.
	GetConfig(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*GetConfigResponse, error)
	// RegisterStream is an idempotent stream state register operation.
	RegisterStream(ctx context.Context, in *RegisterStreamRequest, opts ...grpc.CallOption) (*LogStreamState, error)
	// TerminateStream is an idempotent operation to update the stream's terminal
	// index.
	TerminateStream(ctx context.Context, in *TerminateStreamRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}
type servicesPRPCClient struct {
	client *prpccommon.Client
}

func NewServicesPRPCClient(client *prpccommon.Client) ServicesClient {
	return &servicesPRPCClient{client}
}

func (c *servicesPRPCClient) GetConfig(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.client.Call(ctx, "logdog.Services", "GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesPRPCClient) RegisterStream(ctx context.Context, in *RegisterStreamRequest, opts ...grpc.CallOption) (*LogStreamState, error) {
	out := new(LogStreamState)
	err := c.client.Call(ctx, "logdog.Services", "RegisterStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesPRPCClient) TerminateStream(ctx context.Context, in *TerminateStreamRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := c.client.Call(ctx, "logdog.Services", "TerminateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type servicesClient struct {
	cc *grpc.ClientConn
}

func NewServicesClient(cc *grpc.ClientConn) ServicesClient {
	return &servicesClient{cc}
}

func (c *servicesClient) GetConfig(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := grpc.Invoke(ctx, "/logdog.Services/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) RegisterStream(ctx context.Context, in *RegisterStreamRequest, opts ...grpc.CallOption) (*LogStreamState, error) {
	out := new(LogStreamState)
	err := grpc.Invoke(ctx, "/logdog.Services/RegisterStream", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) TerminateStream(ctx context.Context, in *TerminateStreamRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/logdog.Services/TerminateStream", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Services service

type ServicesServer interface {
	// GetConfig allows a service to retrieve the current service configuration
	// parameters.
	GetConfig(context.Context, *google_protobuf2.Empty) (*GetConfigResponse, error)
	// RegisterStream is an idempotent stream state register operation.
	RegisterStream(context.Context, *RegisterStreamRequest) (*LogStreamState, error)
	// TerminateStream is an idempotent operation to update the stream's terminal
	// index.
	TerminateStream(context.Context, *TerminateStreamRequest) (*google_protobuf2.Empty, error)
}

func RegisterServicesServer(s prpc.Registrar, srv ServicesServer) {
	s.RegisterService(&_Services_serviceDesc, srv)
}

func _Services_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ServicesServer).GetConfig(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Services_RegisterStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RegisterStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ServicesServer).RegisterStream(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Services_TerminateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(TerminateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ServicesServer).TerminateStream(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Services_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logdog.Services",
	HandlerType: (*ServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _Services_GetConfig_Handler,
		},
		{
			MethodName: "RegisterStream",
			Handler:    _Services_RegisterStream_Handler,
		},
		{
			MethodName: "TerminateStream",
			Handler:    _Services_TerminateStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0x4d, 0x4b, 0xeb, 0x40,
	0x14, 0x86, 0xe9, 0x6d, 0x29, 0xb7, 0xa7, 0x1f, 0x97, 0x3b, 0xd2, 0x10, 0x47, 0x14, 0xe9, 0xaa,
	0x1b, 0x27, 0x50, 0x97, 0x82, 0x1b, 0x95, 0x22, 0x88, 0x8b, 0xd6, 0x85, 0xbb, 0xd0, 0xa4, 0xa7,
	0xd3, 0x81, 0x24, 0x13, 0x67, 0x26, 0x45, 0xff, 0xac, 0xbf, 0xc5, 0x64, 0x26, 0x29, 0xa8, 0x75,
	0xe1, 0x66, 0xc2, 0xbc, 0xe7, 0x3d, 0x5f, 0x4f, 0x06, 0x86, 0x1a, 0xd5, 0x4e, 0xc4, 0xc8, 0x72,
	0x25, 0x8d, 0x24, 0xdd, 0x44, 0xf2, 0xb5, 0xe4, 0xb4, 0xaf, 0xcd, 0xca, 0xd4, 0x22, 0xbd, 0xe2,
	0xc2, 0x6c, 0x8b, 0x88, 0xc5, 0x32, 0x0d, 0x92, 0x22, 0x16, 0xf6, 0xb8, 0xe0, 0x32, 0x28, 0x85,
	0x54, 0x66, 0x81, 0x75, 0x05, 0x2e, 0xb3, 0xfa, 0xe4, 0x51, 0x75, 0xd6, 0xc9, 0x27, 0x5c, 0x4a,
	0x9e, 0xa0, 0x33, 0x45, 0xc5, 0x26, 0xc0, 0x34, 0x37, 0x6f, 0x2e, 0x38, 0x79, 0x86, 0xff, 0x73,
	0x34, 0x37, 0x32, 0xdb, 0x08, 0xbe, 0x40, 0x9d, 0xcb, 0x4c, 0x23, 0xa1, 0x40, 0x62, 0xab, 0x84,
	0xf5, 0x6c, 0x61, 0xa1, 0x12, 0xbf, 0x75, 0xde, 0x9a, 0xf6, 0x08, 0x01, 0xd8, 0xc7, 0x8c, 0xff,
	0xc7, 0x6a, 0x47, 0xd0, 0xaf, 0xb5, 0x7c, 0x65, 0xb6, 0x7e, 0xbb, 0x12, 0x27, 0x3b, 0x18, 0x2f,
	0x90, 0x0b, 0x6d, 0x50, 0x2d, 0x8d, 0xc2, 0x55, 0xba, 0xc0, 0x97, 0x02, 0xb5, 0x21, 0x03, 0xe8,
	0x58, 0x9b, 0xab, 0x37, 0x82, 0xae, 0xc6, 0x58, 0xd5, 0xb5, 0x06, 0x64, 0x0c, 0x43, 0x3b, 0x59,
	0xb8, 0x43, 0xa5, 0x85, 0xcc, 0x5c, 0x35, 0x32, 0x85, 0xce, 0x1a, 0x75, 0xec, 0x77, 0xca, 0x5b,
	0x7f, 0x46, 0x99, 0x5d, 0x92, 0x3d, 0x48, 0xee, 0x6a, 0xdf, 0x96, 0x31, 0x25, 0x72, 0x23, 0xd5,
	0xe4, 0x11, 0xbc, 0x27, 0x54, 0xa9, 0xc8, 0x4a, 0x7c, 0xbf, 0x69, 0xec, 0xc1, 0xc8, 0xb8, 0xbc,
	0x24, 0x14, 0xd9, 0x1a, 0x5f, 0x6d, 0xe7, 0xf6, 0xec, 0xbd, 0x05, 0x7f, 0x97, 0x0e, 0x83, 0x26,
	0xd7, 0xd0, 0xdb, 0xe3, 0x22, 0x1e, 0x73, 0x64, 0x59, 0x43, 0x96, 0xdd, 0x55, 0x64, 0xe9, 0x31,
	0x73, 0x7f, 0x82, 0x7d, 0x27, 0x3b, 0x87, 0xd1, 0x67, 0x28, 0xe4, 0xb4, 0x31, 0x1f, 0x84, 0x45,
	0xbd, 0x26, 0xbc, 0x5f, 0x75, 0x59, 0xbd, 0x0b, 0x72, 0x0f, 0xff, 0xbe, 0x6c, 0x49, 0xce, 0x1a,
	0xeb, 0xe1, 0xf5, 0xe9, 0x0f, 0xe3, 0x46, 0x5d, 0x7b, 0xbf, 0xfc, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x85, 0x0a, 0x8c, 0x3b, 0x89, 0x02, 0x00, 0x00,
}
