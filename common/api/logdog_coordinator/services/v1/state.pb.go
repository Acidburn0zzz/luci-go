// Code generated by protoc-gen-go.
// source: state.proto
// DO NOT EDIT!

package logdog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// LogStreamState is the log stream state value communicated to services.
type LogStreamState struct {
	// The log stream's project.
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	// Path is the log stream's path.
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// The log stream's secret.
	//
	// Note that the secret is returned! This is okay, since this endpoint is only
	// accessible to trusted services. The secret can be cached by services to
	// validate stream information without needing to ping the Coordinator in
	// between each update.
	Secret []byte `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	// ProtoVersion is the protobuf version for this stream.
	ProtoVersion string `protobuf:"bytes,4,opt,name=proto_version,json=protoVersion" json:"proto_version,omitempty"`
	// The stream index of the log stream's terminal message. If the value is -1,
	// the log is still streaming.
	TerminalIndex int64 `protobuf:"varint,5,opt,name=terminal_index,json=terminalIndex" json:"terminal_index,omitempty"`
	// If the log stream has been archived.
	Archived bool `protobuf:"varint,6,opt,name=archived" json:"archived,omitempty"`
	// If the log stream has been purged.
	Purged bool `protobuf:"varint,7,opt,name=purged" json:"purged,omitempty"`
}

func (m *LogStreamState) Reset()                    { *m = LogStreamState{} }
func (m *LogStreamState) String() string            { return proto.CompactTextString(m) }
func (*LogStreamState) ProtoMessage()               {}
func (*LogStreamState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func init() {
	proto.RegisterType((*LogStreamState)(nil), "logdog.LogStreamState")
}

var fileDescriptor1 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x3c, 0x8d, 0xb1, 0x4e, 0x80, 0x30,
	0x10, 0x86, 0x83, 0x60, 0xc1, 0x13, 0x18, 0x6e, 0x30, 0x8d, 0x93, 0xd1, 0x98, 0x38, 0xb9, 0xf8,
	0x14, 0x26, 0x4e, 0x25, 0x71, 0x25, 0x15, 0x2e, 0xa5, 0x06, 0x28, 0x29, 0x27, 0xf1, 0x49, 0x7d,
	0x1e, 0x4b, 0x05, 0xb7, 0x7e, 0xdf, 0x7d, 0xcd, 0x0f, 0xd7, 0x2b, 0x6b, 0xa6, 0xe7, 0xc5, 0x3b,
	0x76, 0x28, 0x46, 0x67, 0x7a, 0x67, 0xee, 0x7f, 0x12, 0xa8, 0xdf, 0x9c, 0x69, 0xd8, 0x93, 0x9e,
	0x9a, 0x3d, 0x40, 0x09, 0x79, 0x68, 0x3e, 0xa9, 0x63, 0x99, 0xdc, 0x25, 0x4f, 0x57, 0xea, 0x44,
	0x44, 0xc8, 0x16, 0xcd, 0x83, 0xbc, 0x88, 0x3a, 0xbe, 0xf1, 0x06, 0xc4, 0x4a, 0x9d, 0x27, 0x96,
	0x69, 0xb0, 0xa5, 0x3a, 0x08, 0x1f, 0xa0, 0x8a, 0x4b, 0xed, 0x46, 0x7e, 0xb5, 0x6e, 0x96, 0x59,
	0xfc, 0x54, 0x46, 0xf9, 0xfe, 0xe7, 0xf0, 0x11, 0x6a, 0x26, 0x3f, 0xd9, 0x59, 0x8f, 0xad, 0x9d,
	0x7b, 0xfa, 0x96, 0x97, 0xa1, 0x4a, 0x55, 0x75, 0xda, 0xd7, 0x5d, 0xe2, 0x2d, 0x14, 0xda, 0x77,
	0x83, 0xdd, 0xa8, 0x97, 0x22, 0x04, 0x85, 0xfa, 0xe7, 0x7d, 0x7f, 0xf9, 0xf2, 0x26, 0x5c, 0xf2,
	0x78, 0x39, 0xe8, 0x43, 0xc4, 0xa1, 0x97, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x78, 0x10,
	0xef, 0xf6, 0x00, 0x00, 0x00,
}
