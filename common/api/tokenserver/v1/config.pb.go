// Code generated by protoc-gen-go.
// source: config.proto
// DO NOT EDIT!

package tokenserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TokenServerConfig is read from tokenserver.cfg in luci-config.
type TokenServerConfig struct {
	// List of CAs we trust.
	CertificateAuthority []*CertificateAuthorityConfig `protobuf:"bytes,1,rep,name=certificate_authority" json:"certificate_authority,omitempty"`
}

func (m *TokenServerConfig) Reset()                    { *m = TokenServerConfig{} }
func (m *TokenServerConfig) String() string            { return proto.CompactTextString(m) }
func (*TokenServerConfig) ProtoMessage()               {}
func (*TokenServerConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *TokenServerConfig) GetCertificateAuthority() []*CertificateAuthorityConfig {
	if m != nil {
		return m.CertificateAuthority
	}
	return nil
}

// CertificateAuthorityConfig defines a single CA we trust.
type CertificateAuthorityConfig struct {
	Cn       string `protobuf:"bytes,1,opt,name=cn" json:"cn,omitempty"`
	CertPath string `protobuf:"bytes,2,opt,name=cert_path" json:"cert_path,omitempty"`
	CrlUrl   string `protobuf:"bytes,3,opt,name=crl_url" json:"crl_url,omitempty"`
	UseOauth bool   `protobuf:"varint,4,opt,name=use_oauth" json:"use_oauth,omitempty"`
}

func (m *CertificateAuthorityConfig) Reset()                    { *m = CertificateAuthorityConfig{} }
func (m *CertificateAuthorityConfig) String() string            { return proto.CompactTextString(m) }
func (*CertificateAuthorityConfig) ProtoMessage()               {}
func (*CertificateAuthorityConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*TokenServerConfig)(nil), "tokenserver.TokenServerConfig")
	proto.RegisterType((*CertificateAuthorityConfig)(nil), "tokenserver.CertificateAuthorityConfig")
}

var fileDescriptor1 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2e, 0xc9, 0xcf, 0x4e, 0xcd, 0x2b,
	0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x52, 0x8a, 0xe6, 0x12, 0x0c, 0x01, 0x71, 0x83, 0xc1, 0x5c, 0x67,
	0xb0, 0x3a, 0x21, 0x37, 0x2e, 0xd1, 0xe4, 0xd4, 0xa2, 0x92, 0xcc, 0xb4, 0xcc, 0xe4, 0xc4, 0x92,
	0xd4, 0xf8, 0xc4, 0xd2, 0x92, 0x8c, 0xfc, 0xa2, 0xcc, 0x92, 0x4a, 0x09, 0x46, 0x05, 0x66, 0x0d,
	0x6e, 0x23, 0x75, 0x3d, 0x24, 0x13, 0xf4, 0x9c, 0x11, 0x2a, 0x1d, 0x61, 0x0a, 0x21, 0xe6, 0x28,
	0xc5, 0x73, 0x49, 0xe1, 0x96, 0x15, 0xe2, 0xe2, 0x62, 0x4a, 0xce, 0x03, 0x1a, 0xc9, 0xa8, 0xc1,
	0x29, 0x24, 0xc8, 0xc5, 0x09, 0xb2, 0x31, 0xbe, 0x20, 0xb1, 0x24, 0x43, 0x82, 0x09, 0x2c, 0xc4,
	0xcf, 0xc5, 0x9e, 0x5c, 0x94, 0x13, 0x5f, 0x5a, 0x94, 0x23, 0xc1, 0x0c, 0x53, 0x53, 0x5a, 0x9c,
	0x1a, 0x9f, 0x0f, 0x72, 0x8e, 0x04, 0x0b, 0x50, 0x88, 0x23, 0x89, 0x0d, 0xec, 0x23, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x6e, 0xff, 0xc0, 0xe1, 0x00, 0x00, 0x00,
}
