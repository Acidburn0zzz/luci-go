// Code generated by protoc-gen-go.
// source: config.proto
// DO NOT EDIT!

package tokenserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TokenServerConfig is read from tokenserver.cfg in luci-config.
type TokenServerConfig struct {
	// List of CAs we trust.
	CertificateAuthority []*CertificateAuthorityConfig `protobuf:"bytes,1,rep,name=certificate_authority,json=certificateAuthority" json:"certificate_authority,omitempty"`
}

func (m *TokenServerConfig) Reset()                    { *m = TokenServerConfig{} }
func (m *TokenServerConfig) String() string            { return proto.CompactTextString(m) }
func (*TokenServerConfig) ProtoMessage()               {}
func (*TokenServerConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *TokenServerConfig) GetCertificateAuthority() []*CertificateAuthorityConfig {
	if m != nil {
		return m.CertificateAuthority
	}
	return nil
}

// CertificateAuthorityConfig defines a single CA we trust.
//
// Such CA issues certificates for nodes that use The Token Service. Each node
// has a private key and certificate with Common Name set to the FQDN of this
// node, e.g. "CN=slave43-c1.c.chromecompute.google.com.internal".
//
// The Token Server uses this CN to derive a name of a service account to
// associate with a node. It splits FQDN into a hostname ("slave43-c1") and
// a domain name ("c.chromecompute.google.com.internal"), searches for a domain
// name in "known_domains" set, and creates a service account in a Cloud Project
// specified there: <hostname>@<project-id>.iam.gserviceaccount.com.
//
// Note that we can't put FQDN in the service account email, since it is limited
// in length and doesn't allow '.' in it.
type CertificateAuthorityConfig struct {
	Cn       string `protobuf:"bytes,1,opt,name=cn" json:"cn,omitempty"`
	CertPath string `protobuf:"bytes,2,opt,name=cert_path,json=certPath" json:"cert_path,omitempty"`
	CrlUrl   string `protobuf:"bytes,3,opt,name=crl_url,json=crlUrl" json:"crl_url,omitempty"`
	UseOauth bool   `protobuf:"varint,4,opt,name=use_oauth,json=useOauth" json:"use_oauth,omitempty"`
	// KnownDomains describes what cloud project to use for nodes in particular
	// domains.
	KnownDomains []*DomainConfig `protobuf:"bytes,5,rep,name=known_domains,json=knownDomains" json:"known_domains,omitempty"`
}

func (m *CertificateAuthorityConfig) Reset()                    { *m = CertificateAuthorityConfig{} }
func (m *CertificateAuthorityConfig) String() string            { return proto.CompactTextString(m) }
func (*CertificateAuthorityConfig) ProtoMessage()               {}
func (*CertificateAuthorityConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CertificateAuthorityConfig) GetKnownDomains() []*DomainConfig {
	if m != nil {
		return m.KnownDomains
	}
	return nil
}

// DomainConfig is used inside CertificateAuthorityConfig.
type DomainConfig struct {
	// Domain is a domain name of hosts this config applies to.
	Domain string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	// CloudProjectName is a name of Google Cloud Project to create service
	// accounts in.
	//
	// The Token Server's own service account must have Editor permission in this
	// project.
	CloudProjectName string `protobuf:"bytes,2,opt,name=cloud_project_name,json=cloudProjectName" json:"cloud_project_name,omitempty"`
}

func (m *DomainConfig) Reset()                    { *m = DomainConfig{} }
func (m *DomainConfig) String() string            { return proto.CompactTextString(m) }
func (*DomainConfig) ProtoMessage()               {}
func (*DomainConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func init() {
	proto.RegisterType((*TokenServerConfig)(nil), "tokenserver.TokenServerConfig")
	proto.RegisterType((*CertificateAuthorityConfig)(nil), "tokenserver.CertificateAuthorityConfig")
	proto.RegisterType((*DomainConfig)(nil), "tokenserver.DomainConfig")
}

var fileDescriptor1 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x51, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x55, 0x5a, 0x08, 0xe9, 0x35, 0x20, 0xb0, 0xf8, 0x30, 0xb0, 0xa0, 0x2c, 0x74, 0x40, 0x19,
	0x60, 0x47, 0x42, 0x65, 0x86, 0x2a, 0x94, 0x0d, 0xc9, 0x32, 0xae, 0x4b, 0x4d, 0x53, 0xbb, 0x38,
	0x0e, 0x88, 0x5f, 0xc7, 0x5f, 0xc3, 0xbe, 0x04, 0x51, 0x24, 0xba, 0xf9, 0x7d, 0xdc, 0xf3, 0x3d,
	0x1b, 0x52, 0x61, 0xf4, 0x54, 0xbd, 0xe4, 0x4b, 0x6b, 0x9c, 0x21, 0x7d, 0x67, 0xe6, 0x52, 0x57,
	0xd2, 0xbe, 0x4b, 0x9b, 0xbd, 0xc1, 0xde, 0x38, 0xc0, 0x07, 0x84, 0x43, 0xf4, 0x91, 0x27, 0x38,
	0x10, 0xd2, 0x3a, 0x35, 0x55, 0x82, 0x3b, 0xc9, 0x78, 0xed, 0x66, 0xc6, 0x2a, 0xf7, 0x49, 0xa3,
	0xb3, 0xee, 0xa0, 0x7f, 0x79, 0x9e, 0xaf, 0x24, 0xe4, 0xc3, 0x5f, 0xe7, 0xcd, 0x8f, 0xb1, 0xc9,
	0x29, 0xf6, 0xc5, 0x3f, 0x5a, 0xf6, 0x15, 0xc1, 0xc9, 0xfa, 0x21, 0xb2, 0x03, 0x1d, 0xa1, 0xfd,
	0x4d, 0xd1, 0xa0, 0x57, 0xf8, 0x13, 0x39, 0x85, 0x5e, 0x88, 0x61, 0x4b, 0xee, 0x66, 0xb4, 0x83,
	0x74, 0x12, 0x88, 0x91, 0xc7, 0xe4, 0x08, 0xb6, 0x84, 0x2d, 0x59, 0x6d, 0x4b, 0xda, 0x45, 0x29,
	0xf6, 0xf0, 0xd1, 0x96, 0x61, 0xaa, 0xae, 0x24, 0x33, 0x61, 0x77, 0xba, 0xe1, 0xa5, 0xa4, 0x48,
	0x3c, 0x71, 0x1f, 0x30, 0xb9, 0x86, 0xed, 0xb9, 0x36, 0x1f, 0x9a, 0x4d, 0xcc, 0x82, 0x2b, 0x5d,
	0xd1, 0x4d, 0xec, 0x75, 0xfc, 0xa7, 0xd7, 0x2d, 0x6a, 0x6d, 0x93, 0x14, 0xfd, 0x0d, 0x55, 0x65,
	0x63, 0x48, 0x57, 0x55, 0x72, 0x08, 0x71, 0x93, 0xd4, 0xae, 0xdd, 0x22, 0x72, 0x01, 0x44, 0x94,
	0xa6, 0x9e, 0x30, 0xff, 0xf0, 0xaf, 0x52, 0x38, 0xa6, 0xf9, 0x42, 0xb6, 0x1d, 0x76, 0x51, 0x19,
	0x35, 0xc2, 0x9d, 0xe7, 0x9f, 0x63, 0xfc, 0x9e, 0xab, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe7,
	0xd3, 0xb9, 0xe2, 0xae, 0x01, 0x00, 0x00,
}
