// Code generated by svcdec; DO NOT EDIT

package tokenserver

import (
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"

	google_protobuf "github.com/luci/luci-go/common/proto/google"
)

type DecoratedCertificateAuthorities struct {
	// Service is the service to decorate.
	Service CertificateAuthoritiesServer
	// Prelude is called in each method before forwarding the call to Service.
	// If Prelude returns an error, it is returned without forwarding the call.
	Prelude func(c context.Context, methodName string, req proto.Message) (context.Context, error)
}

func (s *DecoratedCertificateAuthorities) ImportConfig(c context.Context, req *google_protobuf.Empty) (*ImportConfigResponse, error) {
	c, err := s.Prelude(c, "ImportConfig", req)
	if err != nil {
		return nil, err
	}
	return s.Service.ImportConfig(c, req)
}

func (s *DecoratedCertificateAuthorities) FetchCRL(c context.Context, req *FetchCRLRequest) (*FetchCRLResponse, error) {
	c, err := s.Prelude(c, "FetchCRL", req)
	if err != nil {
		return nil, err
	}
	return s.Service.FetchCRL(c, req)
}

func (s *DecoratedCertificateAuthorities) ListCAs(c context.Context, req *google_protobuf.Empty) (*ListCAsResponse, error) {
	c, err := s.Prelude(c, "ListCAs", req)
	if err != nil {
		return nil, err
	}
	return s.Service.ListCAs(c, req)
}

func (s *DecoratedCertificateAuthorities) GetCAStatus(c context.Context, req *GetCAStatusRequest) (*GetCAStatusResponse, error) {
	c, err := s.Prelude(c, "GetCAStatus", req)
	if err != nil {
		return nil, err
	}
	return s.Service.GetCAStatus(c, req)
}

func (s *DecoratedCertificateAuthorities) IsRevokedCert(c context.Context, req *IsRevokedCertRequest) (*IsRevokedCertResponse, error) {
	c, err := s.Prelude(c, "IsRevokedCert", req)
	if err != nil {
		return nil, err
	}
	return s.Service.IsRevokedCert(c, req)
}

func (s *DecoratedCertificateAuthorities) CheckCertificate(c context.Context, req *CheckCertificateRequest) (*CheckCertificateResponse, error) {
	c, err := s.Prelude(c, "CheckCertificate", req)
	if err != nil {
		return nil, err
	}
	return s.Service.CheckCertificate(c, req)
}
