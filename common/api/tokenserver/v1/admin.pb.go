// Code generated by protoc-gen-go.
// source: admin.proto
// DO NOT EDIT!

/*
Package tokenserver is a generated protocol buffer package.

It is generated from these files:
	admin.proto

It has these top-level messages:
	ReadConfigResponse
*/
package tokenserver

import prpccommon "github.com/luci/luci-go/common/prpc"
import prpc "github.com/luci/luci-go/server/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/luci/luci-go/common/proto/google"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ReadConfigResponse is returned by ReadConfig on success.
type ReadConfigResponse struct {
}

func (m *ReadConfigResponse) Reset()                    { *m = ReadConfigResponse{} }
func (m *ReadConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadConfigResponse) ProtoMessage()               {}
func (*ReadConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*ReadConfigResponse)(nil), "tokenserver.ReadConfigResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Admin service

type AdminClient interface {
	// ReadConfig makes the server read its config from luci-config right now.
	//
	// Note that regularly configs are read in background each 5 min. ReadConfig
	// can be used to force config reread right now. It will block until configs
	// are read.
	ReadConfig(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ReadConfigResponse, error)
}
type adminPRPCClient struct {
	client *prpccommon.Client
}

func NewAdminPRPCClient(client *prpccommon.Client) AdminClient {
	return &adminPRPCClient{client}
}

func (c *adminPRPCClient) ReadConfig(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ReadConfigResponse, error) {
	out := new(ReadConfigResponse)
	err := c.client.Call(ctx, "tokenserver.Admin", "ReadConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) ReadConfig(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ReadConfigResponse, error) {
	out := new(ReadConfigResponse)
	err := grpc.Invoke(ctx, "/tokenserver.Admin/ReadConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Admin service

type AdminServer interface {
	// ReadConfig makes the server read its config from luci-config right now.
	//
	// Note that regularly configs are read in background each 5 min. ReadConfig
	// can be used to force config reread right now. It will block until configs
	// are read.
	ReadConfig(context.Context, *google_protobuf.Empty) (*ReadConfigResponse, error)
}

func RegisterAdminServer(s prpc.Registrar, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_ReadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AdminServer).ReadConfig(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tokenserver.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadConfig",
			Handler:    _Admin_ReadConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4c, 0xc9, 0xcd,
	0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2e, 0xc9, 0xcf, 0x4e, 0xcd, 0x2b, 0x4e,
	0x2d, 0x2a, 0x4b, 0x2d, 0x92, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x4b, 0x25,
	0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x54, 0x2a, 0x89, 0x70, 0x09, 0x05, 0xa5,
	0x26, 0xa6, 0x38, 0xe7, 0xe7, 0xa5, 0x65, 0xa6, 0x07, 0xa5, 0x16, 0x17, 0xe4, 0x03, 0xb5, 0x19,
	0xf9, 0x71, 0xb1, 0x3a, 0x82, 0x8c, 0x13, 0x72, 0xe5, 0xe2, 0x42, 0x48, 0x0b, 0x89, 0xe9, 0x41,
	0x8c, 0xd2, 0x83, 0x19, 0xa5, 0xe7, 0x0a, 0x32, 0x4a, 0x4a, 0x5e, 0x0f, 0xc9, 0x3e, 0x3d, 0x4c,
	0xf3, 0x92, 0xd8, 0xc0, 0x1a, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x35, 0x42, 0x8e,
	0xa5, 0x00, 0x00, 0x00,
}
