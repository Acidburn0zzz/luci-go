// Code generated by protoc-gen-go.
// source: admin.proto
// DO NOT EDIT!

/*
Package tokenserver is a generated protocol buffer package.

It is generated from these files:
	admin.proto
	config.proto

It has these top-level messages:
	ImportConfigResponse
	GetCAStatusRequest
	GetCAStatusResponse
	TokenServerConfig
	CertificateAuthorityConfig
*/
package tokenserver

import prpccommon "github.com/luci/luci-go/common/prpc"
import prpc "github.com/luci/luci-go/server/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/luci/luci-go/common/proto/google"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ImportConfigResponse is returned by ImportConfig on success.
type ImportConfigResponse struct {
	Revision string `protobuf:"bytes,1,opt,name=revision" json:"revision,omitempty"`
}

func (m *ImportConfigResponse) Reset()                    { *m = ImportConfigResponse{} }
func (m *ImportConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ImportConfigResponse) ProtoMessage()               {}
func (*ImportConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// GetCAStatusRequest identifies a name of CA to fetch.
type GetCAStatusRequest struct {
	Cn string `protobuf:"bytes,1,opt,name=cn" json:"cn,omitempty"`
}

func (m *GetCAStatusRequest) Reset()                    { *m = GetCAStatusRequest{} }
func (m *GetCAStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCAStatusRequest) ProtoMessage()               {}
func (*GetCAStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// GetCAStatusResponse is returned by GetCAStatus method.
//
// If requested CA doesn't exist, all fields are empty.
type GetCAStatusResponse struct {
	Config     *CertificateAuthorityConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	Cert       string                      `protobuf:"bytes,2,opt,name=cert" json:"cert,omitempty"`
	Removed    bool                        `protobuf:"varint,3,opt,name=removed" json:"removed,omitempty"`
	AddedRev   string                      `protobuf:"bytes,4,opt,name=added_rev" json:"added_rev,omitempty"`
	UpdatedRev string                      `protobuf:"bytes,5,opt,name=updated_rev" json:"updated_rev,omitempty"`
	RemovedRev string                      `protobuf:"bytes,6,opt,name=removed_rev" json:"removed_rev,omitempty"`
}

func (m *GetCAStatusResponse) Reset()                    { *m = GetCAStatusResponse{} }
func (m *GetCAStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCAStatusResponse) ProtoMessage()               {}
func (*GetCAStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetCAStatusResponse) GetConfig() *CertificateAuthorityConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*ImportConfigResponse)(nil), "tokenserver.ImportConfigResponse")
	proto.RegisterType((*GetCAStatusRequest)(nil), "tokenserver.GetCAStatusRequest")
	proto.RegisterType((*GetCAStatusResponse)(nil), "tokenserver.GetCAStatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Admin service

type AdminClient interface {
	// ImportConfig makes the server read its config from luci-config right now.
	//
	// Note that regularly configs are read in background each 5 min. ImportConfig
	// can be used to force config reread immediately. It will block until configs
	// are read.
	ImportConfig(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ImportConfigResponse, error)
	// GetCAStatus returns configuration of some CA defined in the config.
	GetCAStatus(ctx context.Context, in *GetCAStatusRequest, opts ...grpc.CallOption) (*GetCAStatusResponse, error)
}
type adminPRPCClient struct {
	client *prpccommon.Client
}

func NewAdminPRPCClient(client *prpccommon.Client) AdminClient {
	return &adminPRPCClient{client}
}

func (c *adminPRPCClient) ImportConfig(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ImportConfigResponse, error) {
	out := new(ImportConfigResponse)
	err := c.client.Call(ctx, "tokenserver.Admin", "ImportConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPRPCClient) GetCAStatus(ctx context.Context, in *GetCAStatusRequest, opts ...grpc.CallOption) (*GetCAStatusResponse, error) {
	out := new(GetCAStatusResponse)
	err := c.client.Call(ctx, "tokenserver.Admin", "GetCAStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) ImportConfig(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ImportConfigResponse, error) {
	out := new(ImportConfigResponse)
	err := grpc.Invoke(ctx, "/tokenserver.Admin/ImportConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetCAStatus(ctx context.Context, in *GetCAStatusRequest, opts ...grpc.CallOption) (*GetCAStatusResponse, error) {
	out := new(GetCAStatusResponse)
	err := grpc.Invoke(ctx, "/tokenserver.Admin/GetCAStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Admin service

type AdminServer interface {
	// ImportConfig makes the server read its config from luci-config right now.
	//
	// Note that regularly configs are read in background each 5 min. ImportConfig
	// can be used to force config reread immediately. It will block until configs
	// are read.
	ImportConfig(context.Context, *google_protobuf.Empty) (*ImportConfigResponse, error)
	// GetCAStatus returns configuration of some CA defined in the config.
	GetCAStatus(context.Context, *GetCAStatusRequest) (*GetCAStatusResponse, error)
}

func RegisterAdminServer(s prpc.Registrar, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_ImportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AdminServer).ImportConfig(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Admin_GetCAStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetCAStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AdminServer).GetCAStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tokenserver.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportConfig",
			Handler:    _Admin_ImportConfig_Handler,
		},
		{
			MethodName: "GetCAStatus",
			Handler:    _Admin_GetCAStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x49, 0x6d, 0x6b, 0x3b, 0x29, 0xa8, 0x5b, 0x91, 0x10, 0x0f, 0xd6, 0x5e, 0xec, 0x69,
	0x0b, 0xf5, 0xe0, 0xb9, 0x14, 0x91, 0xde, 0xa4, 0xfe, 0x00, 0x49, 0xb3, 0x93, 0xb8, 0x68, 0xb2,
	0x71, 0x33, 0x09, 0xf4, 0xff, 0x78, 0xf2, 0x57, 0x9a, 0xec, 0x36, 0x90, 0xa0, 0x1e, 0xe7, 0xcd,
	0x7b, 0x8f, 0xc7, 0x07, 0x6e, 0x20, 0x12, 0x99, 0xf2, 0x4c, 0x2b, 0x52, 0xcc, 0x25, 0xf5, 0x8e,
	0x69, 0x8e, 0xba, 0x44, 0xed, 0x4f, 0x42, 0x95, 0x46, 0x32, 0xb6, 0x2f, 0xff, 0x3a, 0x56, 0x2a,
	0xfe, 0xc0, 0xa5, 0xb9, 0xf6, 0x45, 0xb4, 0xc4, 0x24, 0xa3, 0x83, 0x7d, 0xce, 0x17, 0x70, 0xb9,
	0x4d, 0x32, 0xa5, 0x69, 0x63, 0x22, 0x3b, 0xcc, 0x33, 0x55, 0xd5, 0xb0, 0x73, 0x18, 0x69, 0x2c,
	0x65, 0x2e, 0x55, 0xea, 0x39, 0x33, 0x67, 0x31, 0x9e, 0xcf, 0x80, 0x3d, 0x21, 0x6d, 0xd6, 0x2f,
	0x14, 0x50, 0x91, 0xef, 0xf0, 0xb3, 0xc0, 0x9c, 0x18, 0x40, 0x2f, 0x6c, 0x1c, 0xdf, 0x0e, 0x4c,
	0x3b, 0x96, 0x63, 0xd7, 0x03, 0x0c, 0xed, 0x20, 0xe3, 0x73, 0x57, 0x77, 0xbc, 0x35, 0x96, 0x6f,
	0x50, 0x93, 0x8c, 0x64, 0x18, 0x10, 0xae, 0x0b, 0x7a, 0x53, 0x5a, 0xd2, 0xc1, 0x8e, 0x61, 0x13,
	0xe8, 0x87, 0xd5, 0xd7, 0xeb, 0xd5, 0xf5, 0xec, 0x0c, 0x4e, 0x35, 0x26, 0xaa, 0x44, 0xe1, 0x9d,
	0x54, 0xc2, 0x88, 0x5d, 0xc0, 0x38, 0x10, 0x02, 0xc5, 0x6b, 0xb5, 0xd4, 0xeb, 0x1b, 0xcf, 0x14,
	0xdc, 0x22, 0x13, 0x55, 0x95, 0x15, 0x07, 0x8d, 0x78, 0x0c, 0x1a, 0x71, 0x58, 0x8b, 0xab, 0x2f,
	0x07, 0x06, 0xeb, 0x1a, 0x20, 0xdb, 0xc2, 0xa4, 0x8d, 0x80, 0x5d, 0x71, 0x0b, 0x8c, 0x37, 0xc0,
	0xf8, 0x63, 0x0d, 0xcc, 0xbf, 0xed, 0xcc, 0xfe, 0x93, 0xda, 0x33, 0xb8, 0x2d, 0x00, 0xec, 0xa6,
	0x93, 0xf8, 0x4d, 0xcf, 0x9f, 0xfd, 0x6f, 0xb0, 0x8d, 0xfb, 0xa1, 0x19, 0x71, 0xff, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x4f, 0x83, 0x1a, 0xec, 0xed, 0x01, 0x00, 0x00,
}
