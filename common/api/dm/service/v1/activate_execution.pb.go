// Code generated by protoc-gen-go.
// source: activate_execution.proto
// DO NOT EDIT!

/*
Package dm is a generated protocol buffer package.

It is generated from these files:
	activate_execution.proto
	add_deps.proto
	ensure_attempt.proto
	ensure_quests.proto
	finish_attempt.proto
	graph_data.proto
	graph_query.proto
	service.proto
	types.proto
	walk_graph.proto

It has these top-level messages:
	ActivateExecutionReq
	AddDepsReq
	AddDepsRsp
	EnsureAttemptReq
	EnsureQuestsReq
	EnsureQuestsRsp
	FinishAttemptReq
	Quest
	Attempt
	Execution
	GraphData
	GraphQuery
	MultiPropertyValue
	PropertyValue
	ExecutionAuth
	WalkGraphReq
*/
package dm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ActivateExecutionReq allows a currently-running Execution to activate itself.
// Doing this allows DM to know that the Execution has started, and also enables
// the Execution to access other APIs like WalkGraph, AddDeps, and
// FinishAttempt.
//
// ActivateExecution must be called with the ExecutionID and Activation token
// that DM provided when the Execution was started with the distributor.
//
// If the Execution has not been activated, the Execution will be marked as
// 'activating' and this will return an OK code. At this point, your client
// may use the ExecutionToken with any RPCs that have an ExecutionAuth field.
//
// This RPC may return:
//   * OK - The Execution is now activated.
//   * InvalidArgmument - The request was malformed. Retrying will not help.
//   * PermissionDenied - The provided activation token was incorrect.
//     Retrying will not help.
//   * AlreadyExists - The activation token was correct, but some other entity
//     already activated this Execution. The client should cease operations.
//     Retrying will not help.
//
// All other errors should be retried with the exact same ActivateExecutionReq
// data.
type ActivateExecutionReq struct {
	// Execution is the ExecutionID provided to the distributor when this
	// Execution was created.
	Execution *Execution_ID `protobuf:"bytes,1,opt,name=execution" json:"execution,omitempty"`
	// ActivationToken is an opaque nonce provided to the distributor when this
	// Execution was created.
	ActivationToken []byte `protobuf:"bytes,2,opt,name=activation_token,proto3" json:"activation_token,omitempty"`
	// ExecutionToken should be randomly generated by the machine running the
	// execution, or by the distributor service such that if two racing Executions
	// both attempt to Activate with the same ExecutionID and ActivationToken, the
	// ExecutionToken will (probably) be different for them so that only one will
	// win.
	ExecutionToken []byte `protobuf:"bytes,3,opt,name=execution_token,proto3" json:"execution_token,omitempty"`
}

func (m *ActivateExecutionReq) Reset()                    { *m = ActivateExecutionReq{} }
func (m *ActivateExecutionReq) String() string            { return proto.CompactTextString(m) }
func (*ActivateExecutionReq) ProtoMessage()               {}
func (*ActivateExecutionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ActivateExecutionReq) GetExecution() *Execution_ID {
	if m != nil {
		return m.Execution
	}
	return nil
}

func init() {
	proto.RegisterType((*ActivateExecutionReq)(nil), "dm.ActivateExecutionReq")
}

var fileDescriptor0 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x48, 0x4c, 0x2e, 0xc9,
	0x2c, 0x4b, 0x2c, 0x49, 0x8d, 0x4f, 0xad, 0x48, 0x4d, 0x2e, 0x2d, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4a, 0xc9, 0x95, 0x12, 0x48, 0x2f, 0x4a, 0x2c, 0xc8, 0x88,
	0x4f, 0x49, 0x2c, 0x49, 0x84, 0x88, 0x2a, 0xe5, 0x71, 0x89, 0x38, 0x42, 0x75, 0xb8, 0xc2, 0x34,
	0x04, 0xa5, 0x16, 0x0a, 0x29, 0x73, 0x71, 0xc2, 0x0d, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x36,
	0x12, 0xd0, 0x4b, 0xc9, 0xd5, 0x83, 0x2b, 0xd2, 0xf3, 0x74, 0x11, 0x92, 0xe0, 0x12, 0x80, 0x5a,
	0x07, 0x14, 0x88, 0x2f, 0xc9, 0xcf, 0x4e, 0xcd, 0x93, 0x60, 0x02, 0xaa, 0xe5, 0x11, 0x12, 0xe7,
	0xe2, 0x87, 0x6b, 0x87, 0x4a, 0x30, 0x83, 0x24, 0x92, 0xd8, 0xc0, 0xd6, 0x1a, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x2e, 0xc0, 0x04, 0x83, 0xa8, 0x00, 0x00, 0x00,
}
