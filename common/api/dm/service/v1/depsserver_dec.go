// Code generated by svcdec; DO NOT EDIT

package dm

import (
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"

	google_protobuf1 "github.com/luci/luci-go/common/proto/google"
)

type DecoratedDeps struct {
	// Service is the service to decorate.
	Service DepsServer
	// Prelude is called in each method before forwarding the call to Service.
	// If Prelude returns an error, it is returned without forwarding the call.
	Prelude func(c context.Context, methodName string, req proto.Message) (context.Context, error)
}

func (s *DecoratedDeps) EnsureGraphData(c context.Context, req *EnsureGraphDataReq) (*EnsureGraphDataRsp, error) {
	c, err := s.Prelude(c, "EnsureGraphData", req)
	if err != nil {
		return nil, err
	}
	return s.Service.EnsureGraphData(c, req)
}

func (s *DecoratedDeps) ActivateExecution(c context.Context, req *ActivateExecutionReq) (*google_protobuf1.Empty, error) {
	c, err := s.Prelude(c, "ActivateExecution", req)
	if err != nil {
		return nil, err
	}
	return s.Service.ActivateExecution(c, req)
}

func (s *DecoratedDeps) FinishAttempt(c context.Context, req *FinishAttemptReq) (*google_protobuf1.Empty, error) {
	c, err := s.Prelude(c, "FinishAttempt", req)
	if err != nil {
		return nil, err
	}
	return s.Service.FinishAttempt(c, req)
}

func (s *DecoratedDeps) WalkGraph(c context.Context, req *WalkGraphReq) (*GraphData, error) {
	c, err := s.Prelude(c, "WalkGraph", req)
	if err != nil {
		return nil, err
	}
	return s.Service.WalkGraph(c, req)
}

func (s *DecoratedDeps) ClaimExecution(c context.Context, req *google_protobuf1.Empty) (*ClaimExecutionRsp, error) {
	c, err := s.Prelude(c, "ClaimExecution", req)
	if err != nil {
		return nil, err
	}
	return s.Service.ClaimExecution(c, req)
}
