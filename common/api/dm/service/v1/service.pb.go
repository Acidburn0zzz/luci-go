// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

package dm

import prpc "github.com/luci/luci-go/server/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/luci/luci-go/common/proto/google"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Deps service

type DepsClient interface {
	ActivateExecution(ctx context.Context, in *ActivateExecutionReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	AddDeps(ctx context.Context, in *AddDepsReq, opts ...grpc.CallOption) (*AddDepsRsp, error)
	EnsureAttempt(ctx context.Context, in *EnsureAttemptReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	EnsureQuests(ctx context.Context, in *EnsureQuestsReq, opts ...grpc.CallOption) (*EnsureQuestsRsp, error)
	FinishAttempt(ctx context.Context, in *FinishAttemptReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	WalkGraph(ctx context.Context, in *WalkGraphReq, opts ...grpc.CallOption) (*GraphData, error)
}

type depsClient struct {
	cc *grpc.ClientConn
}

func NewDepsClient(cc *grpc.ClientConn) DepsClient {
	return &depsClient{cc}
}

func (c *depsClient) ActivateExecution(ctx context.Context, in *ActivateExecutionReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/dm.Deps/ActivateExecution", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsClient) AddDeps(ctx context.Context, in *AddDepsReq, opts ...grpc.CallOption) (*AddDepsRsp, error) {
	out := new(AddDepsRsp)
	err := grpc.Invoke(ctx, "/dm.Deps/AddDeps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsClient) EnsureAttempt(ctx context.Context, in *EnsureAttemptReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/dm.Deps/EnsureAttempt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsClient) EnsureQuests(ctx context.Context, in *EnsureQuestsReq, opts ...grpc.CallOption) (*EnsureQuestsRsp, error) {
	out := new(EnsureQuestsRsp)
	err := grpc.Invoke(ctx, "/dm.Deps/EnsureQuests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsClient) FinishAttempt(ctx context.Context, in *FinishAttemptReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/dm.Deps/FinishAttempt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsClient) WalkGraph(ctx context.Context, in *WalkGraphReq, opts ...grpc.CallOption) (*GraphData, error) {
	out := new(GraphData)
	err := grpc.Invoke(ctx, "/dm.Deps/WalkGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Deps service

type DepsServer interface {
	ActivateExecution(context.Context, *ActivateExecutionReq) (*google_protobuf1.Empty, error)
	AddDeps(context.Context, *AddDepsReq) (*AddDepsRsp, error)
	EnsureAttempt(context.Context, *EnsureAttemptReq) (*google_protobuf1.Empty, error)
	EnsureQuests(context.Context, *EnsureQuestsReq) (*EnsureQuestsRsp, error)
	FinishAttempt(context.Context, *FinishAttemptReq) (*google_protobuf1.Empty, error)
	WalkGraph(context.Context, *WalkGraphReq) (*GraphData, error)
}

func RegisterDepsServer(s prpc.Registrar, srv DepsServer) {
	s.RegisterService(&_Deps_serviceDesc, srv)
}

func _Deps_ActivateExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ActivateExecutionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DepsServer).ActivateExecution(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Deps_AddDeps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AddDepsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DepsServer).AddDeps(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Deps_EnsureAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EnsureAttemptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DepsServer).EnsureAttempt(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Deps_EnsureQuests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EnsureQuestsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DepsServer).EnsureQuests(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Deps_FinishAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(FinishAttemptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DepsServer).FinishAttempt(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Deps_WalkGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(WalkGraphReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DepsServer).WalkGraph(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Deps_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dm.Deps",
	HandlerType: (*DepsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActivateExecution",
			Handler:    _Deps_ActivateExecution_Handler,
		},
		{
			MethodName: "AddDeps",
			Handler:    _Deps_AddDeps_Handler,
		},
		{
			MethodName: "EnsureAttempt",
			Handler:    _Deps_EnsureAttempt_Handler,
		},
		{
			MethodName: "EnsureQuests",
			Handler:    _Deps_EnsureQuests_Handler,
		},
		{
			MethodName: "FinishAttempt",
			Handler:    _Deps_FinishAttempt_Handler,
		},
		{
			MethodName: "WalkGraph",
			Handler:    _Deps_WalkGraph_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor7 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x91, 0x51, 0x4b, 0xfb, 0x30,
	0x14, 0xc5, 0x61, 0xfc, 0xf9, 0x8b, 0xc1, 0x8e, 0x9a, 0x0d, 0x19, 0xf5, 0x13, 0x08, 0x92, 0x81,
	0xbe, 0xf8, 0xe2, 0x43, 0x61, 0xd5, 0x67, 0x7d, 0xf1, 0x31, 0x64, 0xcd, 0x5d, 0x17, 0x5c, 0x9b,
	0xac, 0x49, 0xa7, 0x7e, 0x59, 0x3f, 0x8b, 0xcd, 0x4d, 0x36, 0xa9, 0x83, 0x3d, 0xde, 0x5f, 0xcf,
	0xc9, 0x39, 0xf7, 0x96, 0x24, 0x16, 0xda, 0x9d, 0x2a, 0x81, 0x99, 0x56, 0x3b, 0x4d, 0x47, 0xb2,
	0xce, 0xae, 0x2b, 0xad, 0xab, 0x0d, 0xcc, 0x91, 0x2c, 0xbb, 0xd5, 0x1c, 0x6a, 0xe3, 0xbe, 0x82,
	0x20, 0x4b, 0xab, 0x56, 0x98, 0x35, 0x97, 0xc2, 0x89, 0x48, 0x66, 0xa2, 0x74, 0x6a, 0x27, 0x1c,
	0x70, 0xf8, 0x84, 0xb2, 0x73, 0x4a, 0x37, 0xf1, 0xcb, 0x58, 0x48, 0xc9, 0x25, 0x18, 0x1b, 0xe7,
	0x29, 0x34, 0xb6, 0x6b, 0x81, 0x0b, 0xe7, 0xfc, 0x93, 0x91, 0x4e, 0x22, 0xdd, 0x76, 0x60, 0xdd,
	0x41, 0xba, 0x52, 0x8d, 0xb2, 0xeb, 0x3f, 0xd2, 0xf4, 0x43, 0x6c, 0xde, 0x39, 0x36, 0x08, 0xe4,
	0xee, 0x7b, 0x44, 0xfe, 0x2d, 0xfa, 0x04, 0x5a, 0x90, 0xcb, 0x3c, 0xf6, 0x28, 0xf6, 0x35, 0xe8,
	0x8c, 0xc9, 0x9a, 0x1d, 0xe1, 0x57, 0xd8, 0x66, 0x57, 0x2c, 0x2c, 0xc9, 0xf6, 0x4b, 0xb2, 0xc2,
	0x2f, 0x49, 0x6f, 0xc8, 0x59, 0x2e, 0x25, 0xbe, 0x38, 0x46, 0x73, 0x18, 0xbc, 0x65, 0x30, 0x5b,
	0x43, 0x1f, 0x49, 0x52, 0x60, 0xf3, 0x3c, 0x74, 0xa4, 0x53, 0x2f, 0x18, 0xa0, 0x53, 0x49, 0x0f,
	0xe4, 0x22, 0x68, 0x5f, 0x70, 0x6f, 0x3a, 0xf9, 0x75, 0x07, 0xe2, 0xcd, 0xc7, 0x30, 0x04, 0x3f,
	0xe1, 0x75, 0x06, 0xc1, 0x03, 0x74, 0x2a, 0xf8, 0x96, 0x9c, 0xbf, 0xf5, 0x67, 0x7c, 0xf6, 0x57,
	0xa4, 0xa9, 0xb7, 0x1e, 0x46, 0x6f, 0x4b, 0x3c, 0xc1, 0x69, 0xd1, 0xff, 0xe3, 0xe5, 0x7f, 0x74,
	0xdf, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x25, 0x95, 0xca, 0x8c, 0x28, 0x02, 0x00, 0x00,
}
