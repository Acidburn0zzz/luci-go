// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "graph_data.proto";
import "graph_query.proto";
import "types.proto";

package dm;

// WalkGraphReq allows you to walk from one or more Quests through their
// Attempt's forward dependencies.
//
//
// The handler will evaluate all of the queries, executing them in parallel.
// For each attempt or quest produced by the query, it will queue a walk
// operation for that node, respecting the options set (max_depth, etc.).
message WalkGraphReq {
  // optional. See Include.AttemptResult for restrictions.
  dm.Execution.Auth auth = 1;

  // Queries specifies a list of queries to start the graph traversal on. The
  // traversal will occur as a union of the query results. Redundant
  // specification will not cause additional heavy work; every graph node will
  // be processed exactly once, regardless of how many times it appears in the
  // query results. However, redundancy in the queries will cause the server to
  // retrieve and discard more information.
  repeated GraphQuery queries = 2;

  message Mode {
    // DFS sets whether this is a Depth-first (ish) or a Breadth-first (ish) load.
    // Since the load operation is multi-threaded, the search order is best
    // effort, but will actually be some hybrid between DFS and BFS. This setting
    // controls the bias direction of the hybrid loading algorithm.
    bool dfs = 1;

    // Direction indicates that direction of dependencies that the request should
    // walk.
    enum Direction {
      Forwards = 0;
      Backwards = 1;
      Both = 2;
    }
    Direction direction = 2;
  }
  Mode mode = 3;

  message Limit {
    // MaxDepth sets the number of attempts to traverse; 0 means 'immediate'
    // (no dependencies), -1 means 'no limit', and >0 is a limit.
    //
    // Any negative value besides -1 is an error.
    int64 max_depth = 4;

    // MaxTime sets the maximum amount of time that the query processor should
    // take. Application of this deadline is 'best effort', which means the query
    // may take a bit longer than this timeout and still attempt to return data.
    //
    // This is different than the grpc timeout header, which will set a hard
    // deadline for the request.
    google.protobuf.Duration max_time = 5;
  }
  Limit limit = 4;

  message Include {
    // ObjectIds fills the 'Id' field of Quest, Attempt, and Execution objects.
    // If this is false, then those fields will be omitted.
    bool object_ids = 1;

    // QuestData instructs the request to omit the Data field
    // for Quests in GraphData.
    bool quest_data = 2;

    // AttemptData instructs the request to omit the Data field
    // for Attempts in GraphData.
    bool attempt_data = 3;

    // AttemptResult will include the Attempt result payloads for any
    // Attempts that it returns. This option also implies AttemptData.
    //
    // If the requestor is an execution, the query logic will only include
    // result for an Attempt if the execution's Attempt depends on it, otherwise
    // it will be blank. To view an AttemptResult, the querying Attempt must
    // first depend on it.
    bool attempt_result = 4;

    // ExpiredAttempts allows you to view attempts which have expired results,
    // which are normally excluded from the graph.
    bool expired_attempts = 5;

    // Executions is the number of Executions to include per Attempt. If this
    // is 0, then the execution data will be omitted completely.
    uint32 num_executions = 6;

    // FwdDeps instructs WalkGraph to omit forward dependency information
    // from the result. This only changes the presence of information in the
    // result; if the query is walking forward attempt dependencies, that will
    // still occur even if this is false.
    bool fwd_deps = 7;

    // BackDeps instructs WalkGraph to omit the backwards dependency
    // information. This only changes the presence of information in the
    // result; if the query is walking backward attempt dependencies, that will
    // still occur even if this is false.
    bool back_deps = 8;
  }
  // Include allows you to add additional information to the returned
  // GraphData which is typically medium-to-large sized.
  Include include = 5;
}
