// Code generated by protoc-gen-go.
// source: add_deps.proto
// DO NOT EDIT!

package dm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AddDepsReq allows an execution to cause its attempt to depend on the results
// of one or more other attempts.
//
// Any quests referred to by this method must already have been established with
// DM by calling EnsureQuests.
type AddDepsReq struct {
	// required
	Auth *ExecutionAuth `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	// To is the list of other attempts to depend on.
	To []*AttemptID `protobuf:"bytes,2,rep,name=to" json:"to,omitempty"`
}

func (m *AddDepsReq) Reset()                    { *m = AddDepsReq{} }
func (m *AddDepsReq) String() string            { return proto.CompactTextString(m) }
func (*AddDepsReq) ProtoMessage()               {}
func (*AddDepsReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *AddDepsReq) GetAuth() *ExecutionAuth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *AddDepsReq) GetTo() []*AttemptID {
	if m != nil {
		return m.To
	}
	return nil
}

type AddDepsRsp struct {
	// ShouldHalt informs the execution that it should halt. If this is true, then
	// it also implies that this Execution's activation has been revoked, and all
	// subsequent attemts to use that execution token will be rejected.
	ShouldHalt bool `protobuf:"varint,1,opt,name=should_halt" json:"should_halt,omitempty"`
}

func (m *AddDepsRsp) Reset()                    { *m = AddDepsRsp{} }
func (m *AddDepsRsp) String() string            { return proto.CompactTextString(m) }
func (*AddDepsRsp) ProtoMessage()               {}
func (*AddDepsRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*AddDepsReq)(nil), "dm.AddDepsReq")
	proto.RegisterType((*AddDepsRsp)(nil), "dm.AddDepsRsp")
}

var fileDescriptor1 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x4c, 0x49, 0x89,
	0x4f, 0x49, 0x2d, 0x28, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4a, 0xc9, 0x95, 0xe2,
	0x2e, 0xa9, 0x2c, 0x48, 0x85, 0x0a, 0x28, 0x79, 0x70, 0x71, 0x39, 0xa6, 0xa4, 0xb8, 0x00, 0x55,
	0x04, 0xa5, 0x16, 0x0a, 0xc9, 0x73, 0xb1, 0x24, 0x96, 0x96, 0x64, 0x48, 0x30, 0x2a, 0x30, 0x6a,
	0x70, 0x1b, 0x09, 0xea, 0xa5, 0xe4, 0xea, 0xb9, 0x56, 0xa4, 0x26, 0x97, 0x96, 0x64, 0xe6, 0xe7,
	0x39, 0x02, 0x25, 0x84, 0x24, 0xb9, 0x98, 0x4a, 0xf2, 0x25, 0x98, 0x14, 0x98, 0x81, 0xd2, 0xbc,
	0x20, 0x69, 0xc7, 0x92, 0x92, 0xd4, 0xdc, 0x82, 0x12, 0x4f, 0x17, 0x25, 0x45, 0x84, 0x49, 0xc5,
	0x05, 0x42, 0xc2, 0x5c, 0xdc, 0xc5, 0x19, 0xf9, 0xa5, 0x39, 0x29, 0xf1, 0x19, 0x89, 0x39, 0x25,
	0x60, 0x03, 0x39, 0x92, 0xd8, 0xc0, 0x76, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xfc,
	0x22, 0xa2, 0x96, 0x00, 0x00, 0x00,
}
