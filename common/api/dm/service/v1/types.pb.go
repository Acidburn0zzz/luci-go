// Code generated by protoc-gen-go.
// source: types.proto
// DO NOT EDIT!

package dm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/luci/luci-go/common/proto/google"
import google_protobuf1 "github.com/luci/luci-go/common/proto/google"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MultiPropertyValue struct {
	Values []*PropertyValue `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *MultiPropertyValue) Reset()                    { *m = MultiPropertyValue{} }
func (m *MultiPropertyValue) String() string            { return proto.CompactTextString(m) }
func (*MultiPropertyValue) ProtoMessage()               {}
func (*MultiPropertyValue) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *MultiPropertyValue) GetValues() []*PropertyValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type PropertyValue struct {
	// Types that are valid to be assigned to Value:
	//	*PropertyValue_Str
	//	*PropertyValue_Dat
	//	*PropertyValue_Num
	//	*PropertyValue_Bin
	//	*PropertyValue_Time
	//	*PropertyValue_Null
	Value isPropertyValue_Value `protobuf_oneof:"value"`
}

func (m *PropertyValue) Reset()                    { *m = PropertyValue{} }
func (m *PropertyValue) String() string            { return proto.CompactTextString(m) }
func (*PropertyValue) ProtoMessage()               {}
func (*PropertyValue) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

type isPropertyValue_Value interface {
	isPropertyValue_Value()
}

type PropertyValue_Str struct {
	Str string `protobuf:"bytes,1,opt,name=str,oneof"`
}
type PropertyValue_Dat struct {
	Dat []byte `protobuf:"bytes,2,opt,name=dat,proto3,oneof"`
}
type PropertyValue_Num struct {
	Num int64 `protobuf:"varint,3,opt,name=num,oneof"`
}
type PropertyValue_Bin struct {
	Bin bool `protobuf:"varint,5,opt,name=bin,oneof"`
}
type PropertyValue_Time struct {
	Time *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=time,oneof"`
}
type PropertyValue_Null struct {
	Null *google_protobuf1.Empty `protobuf:"bytes,7,opt,name=null,oneof"`
}

func (*PropertyValue_Str) isPropertyValue_Value()  {}
func (*PropertyValue_Dat) isPropertyValue_Value()  {}
func (*PropertyValue_Num) isPropertyValue_Value()  {}
func (*PropertyValue_Bin) isPropertyValue_Value()  {}
func (*PropertyValue_Time) isPropertyValue_Value() {}
func (*PropertyValue_Null) isPropertyValue_Value() {}

func (m *PropertyValue) GetValue() isPropertyValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PropertyValue) GetStr() string {
	if x, ok := m.GetValue().(*PropertyValue_Str); ok {
		return x.Str
	}
	return ""
}

func (m *PropertyValue) GetDat() []byte {
	if x, ok := m.GetValue().(*PropertyValue_Dat); ok {
		return x.Dat
	}
	return nil
}

func (m *PropertyValue) GetNum() int64 {
	if x, ok := m.GetValue().(*PropertyValue_Num); ok {
		return x.Num
	}
	return 0
}

func (m *PropertyValue) GetBin() bool {
	if x, ok := m.GetValue().(*PropertyValue_Bin); ok {
		return x.Bin
	}
	return false
}

func (m *PropertyValue) GetTime() *google_protobuf.Timestamp {
	if x, ok := m.GetValue().(*PropertyValue_Time); ok {
		return x.Time
	}
	return nil
}

func (m *PropertyValue) GetNull() *google_protobuf1.Empty {
	if x, ok := m.GetValue().(*PropertyValue_Null); ok {
		return x.Null
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PropertyValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _PropertyValue_OneofMarshaler, _PropertyValue_OneofUnmarshaler, []interface{}{
		(*PropertyValue_Str)(nil),
		(*PropertyValue_Dat)(nil),
		(*PropertyValue_Num)(nil),
		(*PropertyValue_Bin)(nil),
		(*PropertyValue_Time)(nil),
		(*PropertyValue_Null)(nil),
	}
}

func _PropertyValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PropertyValue)
	// value
	switch x := m.Value.(type) {
	case *PropertyValue_Str:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Str)
	case *PropertyValue_Dat:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Dat)
	case *PropertyValue_Num:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Num))
	case *PropertyValue_Bin:
		t := uint64(0)
		if x.Bin {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *PropertyValue_Time:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Time); err != nil {
			return err
		}
	case *PropertyValue_Null:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Null); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PropertyValue.Value has unexpected type %T", x)
	}
	return nil
}

func _PropertyValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PropertyValue)
	switch tag {
	case 1: // value.str
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &PropertyValue_Str{x}
		return true, err
	case 2: // value.dat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &PropertyValue_Dat{x}
		return true, err
	case 3: // value.num
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &PropertyValue_Num{int64(x)}
		return true, err
	case 5: // value.bin
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &PropertyValue_Bin{x != 0}
		return true, err
	case 6: // value.time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Timestamp)
		err := b.DecodeMessage(msg)
		m.Value = &PropertyValue_Time{msg}
		return true, err
	case 7: // value.null
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.Empty)
		err := b.DecodeMessage(msg)
		m.Value = &PropertyValue_Null{msg}
		return true, err
	default:
		return false, nil
	}
}

// AttemptList is logically a listing of unique attempts, which has a compact
// representation in the common scenario of listing multiple attempts of the
// same quest(s).
type AttemptList struct {
	// To is a map of quests-to-attempts to depend on. So if you want to depend
	// on the attempt "foo|1", "foo|2" and "bar|1", this would look like:
	//   {
	//     "foo": [1, 2],
	//     "bar": [1],
	//   }
	To map[string]*AttemptList_Nums `protobuf:"bytes,2,rep,name=to" json:"to,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AttemptList) Reset()                    { *m = AttemptList{} }
func (m *AttemptList) String() string            { return proto.CompactTextString(m) }
func (*AttemptList) ProtoMessage()               {}
func (*AttemptList) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *AttemptList) GetTo() map[string]*AttemptList_Nums {
	if m != nil {
		return m.To
	}
	return nil
}

type AttemptList_Nums struct {
	Nums []uint32 `protobuf:"varint,1,rep,packed,name=nums" json:"nums,omitempty"`
}

func (m *AttemptList_Nums) Reset()                    { *m = AttemptList_Nums{} }
func (m *AttemptList_Nums) String() string            { return proto.CompactTextString(m) }
func (*AttemptList_Nums) ProtoMessage()               {}
func (*AttemptList_Nums) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2, 0} }

func init() {
	proto.RegisterType((*MultiPropertyValue)(nil), "dm.MultiPropertyValue")
	proto.RegisterType((*PropertyValue)(nil), "dm.PropertyValue")
	proto.RegisterType((*AttemptList)(nil), "dm.AttemptList")
	proto.RegisterType((*AttemptList_Nums)(nil), "dm.AttemptList.Nums")
}

var fileDescriptor9 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x90, 0x5d, 0x4b, 0xc3, 0x30,
	0x14, 0x86, 0xd7, 0x8f, 0x7d, 0x78, 0xe2, 0x60, 0x06, 0xd1, 0x50, 0x2f, 0xd4, 0x09, 0x32, 0xbc,
	0xc8, 0x60, 0x5e, 0x28, 0xde, 0x88, 0x83, 0xc1, 0x10, 0x15, 0x2f, 0x86, 0xf7, 0x1b, 0x8d, 0xa3,
	0xd8, 0x34, 0xa5, 0x39, 0x11, 0xfa, 0x23, 0xfc, 0x2b, 0xfe, 0x46, 0x93, 0xc6, 0x81, 0x9b, 0x77,
	0x7d, 0x9a, 0x37, 0xe7, 0xbc, 0x4f, 0x80, 0x60, 0x5d, 0x0a, 0xcd, 0xcb, 0x4a, 0xa1, 0xa2, 0x61,
	0x2a, 0x93, 0xd3, 0xb5, 0x52, 0xeb, 0x5c, 0x8c, 0x9b, 0x3f, 0x2b, 0xf3, 0x3e, 0xc6, 0x4c, 0x0a,
	0x8d, 0x4b, 0x59, 0xfa, 0x50, 0x72, 0xb2, 0x1b, 0x10, 0xb2, 0xc4, 0xda, 0x1f, 0x0e, 0x6f, 0x80,
	0x3e, 0x9b, 0x1c, 0xb3, 0xd7, 0x4a, 0x95, 0xa2, 0xc2, 0xfa, 0x6d, 0x99, 0x1b, 0x41, 0xcf, 0xa1,
	0xf3, 0xe9, 0x3e, 0x34, 0x0b, 0xce, 0xa2, 0x11, 0x99, 0x1c, 0xf0, 0x54, 0xf2, 0xad, 0xc8, 0xf0,
	0x3b, 0x80, 0xfe, 0xf6, 0xa5, 0x3e, 0x44, 0x1a, 0x2b, 0x7b, 0x23, 0x18, 0xed, 0xcd, 0x5b, 0x0e,
	0xd3, 0x25, 0xb2, 0xd0, 0xe2, 0xbe, 0xc7, 0xc2, 0x48, 0x16, 0x59, 0x8c, 0x3c, 0xae, 0xb2, 0x82,
	0xb5, 0x2d, 0xf6, 0x2c, 0x5e, 0x41, 0xec, 0x6a, 0xb3, 0x8e, 0x65, 0x32, 0x49, 0xb8, 0xaf, 0xcc,
	0x37, 0x95, 0xf9, 0x62, 0xe3, 0x64, 0xb3, 0x97, 0x10, 0x17, 0x26, 0xcf, 0x59, 0xb7, 0xc9, 0x1e,
	0xfd, 0xcb, 0xce, 0x9c, 0xde, 0xbc, 0x35, 0xed, 0x42, 0xbb, 0x91, 0x78, 0x8c, 0x7b, 0xf1, 0xa0,
	0x3d, 0xfc, 0x0a, 0x80, 0x3c, 0x20, 0x3a, 0xf9, 0xa7, 0x4c, 0x23, 0xbd, 0x80, 0x10, 0x95, 0xad,
	0xe7, 0xfc, 0x8e, 0x9d, 0xdf, 0x9f, 0x43, 0xbe, 0x50, 0xb3, 0x02, 0xab, 0x3a, 0x61, 0x10, 0xbf,
	0x18, 0xa9, 0xe9, 0xc0, 0xed, 0x94, 0xfe, 0x39, 0xfa, 0xd3, 0x70, 0x10, 0x24, 0xf7, 0xd0, 0xfd,
	0x0d, 0x51, 0x02, 0xd1, 0x87, 0xa8, 0xbd, 0xb8, 0x1d, 0xeb, 0xb7, 0x36, 0xe2, 0x64, 0x72, 0xb8,
	0x3b, 0xd9, 0x8d, 0xbb, 0x0b, 0x6f, 0x83, 0x55, 0xa7, 0x29, 0x7c, 0xfd, 0x13, 0x00, 0x00, 0xff,
	0xff, 0x34, 0xa6, 0xa6, 0xe4, 0xd1, 0x01, 0x00, 0x00,
}
