// Code generated by protoc-gen-go.
// source: walk_graph.proto
// DO NOT EDIT!

package dm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/luci/luci-go/common/proto/google"
import _ "github.com/luci/luci-go/common/proto/google"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Direction indicates that direction of dependencies that the request should
// walk.
type WalkGraphReq_Mode_Direction int32

const (
	WalkGraphReq_Mode_Forwards  WalkGraphReq_Mode_Direction = 0
	WalkGraphReq_Mode_Backwards WalkGraphReq_Mode_Direction = 1
	WalkGraphReq_Mode_Both      WalkGraphReq_Mode_Direction = 2
)

var WalkGraphReq_Mode_Direction_name = map[int32]string{
	0: "Forwards",
	1: "Backwards",
	2: "Both",
}
var WalkGraphReq_Mode_Direction_value = map[string]int32{
	"Forwards":  0,
	"Backwards": 1,
	"Both":      2,
}

func (x WalkGraphReq_Mode_Direction) String() string {
	return proto.EnumName(WalkGraphReq_Mode_Direction_name, int32(x))
}
func (WalkGraphReq_Mode_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor10, []int{0, 0, 0}
}

// WalkGraphReq allows you to walk from one or more Quests through their
// Attempt's forward dependencies.
//
//
// The handler will evaluate all of the queries, executing them in parallel.
// For each attempt or quest produced by the query, it will queue a walk
// operation for that node, respecting the options set (max_depth, etc.).
type WalkGraphReq struct {
	// optional. See Include.AttemptResult for restrictions.
	Auth *Execution_Auth `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	// Queries specifies a list of queries to start the graph traversal on. The
	// traversal will occur as a union of the query results. Redundant
	// specification will not cause additional heavy work; every graph node will
	// be processed exactly once, regardless of how many times it appears in the
	// query results. However, redundancy in the queries will cause the server to
	// retrieve and discard more information.
	Queries []*GraphQuery       `protobuf:"bytes,2,rep,name=queries" json:"queries,omitempty"`
	Mode    *WalkGraphReq_Mode  `protobuf:"bytes,3,opt,name=mode" json:"mode,omitempty"`
	Limit   *WalkGraphReq_Limit `protobuf:"bytes,4,opt,name=limit" json:"limit,omitempty"`
	// Include allows you to add additional information to the returned
	// GraphData which is typically medium-to-large sized.
	Include *WalkGraphReq_Include `protobuf:"bytes,5,opt,name=include" json:"include,omitempty"`
}

func (m *WalkGraphReq) Reset()                    { *m = WalkGraphReq{} }
func (m *WalkGraphReq) String() string            { return proto.CompactTextString(m) }
func (*WalkGraphReq) ProtoMessage()               {}
func (*WalkGraphReq) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *WalkGraphReq) GetAuth() *Execution_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *WalkGraphReq) GetQueries() []*GraphQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *WalkGraphReq) GetMode() *WalkGraphReq_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (m *WalkGraphReq) GetLimit() *WalkGraphReq_Limit {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *WalkGraphReq) GetInclude() *WalkGraphReq_Include {
	if m != nil {
		return m.Include
	}
	return nil
}

type WalkGraphReq_Mode struct {
	// DFS sets whether this is a Depth-first (ish) or a Breadth-first (ish) load.
	// Since the load operation is multi-threaded, the search order is best
	// effort, but will actually be some hybrid between DFS and BFS. This setting
	// controls the bias direction of the hybrid loading algorithm.
	Dfs       bool                        `protobuf:"varint,1,opt,name=dfs" json:"dfs,omitempty"`
	Direction WalkGraphReq_Mode_Direction `protobuf:"varint,2,opt,name=direction,enum=dm.WalkGraphReq_Mode_Direction" json:"direction,omitempty"`
}

func (m *WalkGraphReq_Mode) Reset()                    { *m = WalkGraphReq_Mode{} }
func (m *WalkGraphReq_Mode) String() string            { return proto.CompactTextString(m) }
func (*WalkGraphReq_Mode) ProtoMessage()               {}
func (*WalkGraphReq_Mode) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0, 0} }

type WalkGraphReq_Limit struct {
	// MaxDepth sets the number of attempts to traverse; 0 means 'immediate'
	// (no dependencies), -1 means 'no limit', and >0 is a limit.
	//
	// Any negative value besides -1 is an error.
	MaxDepth int64 `protobuf:"varint,4,opt,name=max_depth" json:"max_depth,omitempty"`
	// MaxTime sets the maximum amount of time that the query processor should
	// take. Application of this deadline is 'best effort', which means the query
	// may take a bit longer than this timeout and still attempt to return data.
	//
	// This is different than the grpc timeout header, which will set a hard
	// deadline for the request.
	MaxTime *google_protobuf2.Duration `protobuf:"bytes,5,opt,name=max_time" json:"max_time,omitempty"`
}

func (m *WalkGraphReq_Limit) Reset()                    { *m = WalkGraphReq_Limit{} }
func (m *WalkGraphReq_Limit) String() string            { return proto.CompactTextString(m) }
func (*WalkGraphReq_Limit) ProtoMessage()               {}
func (*WalkGraphReq_Limit) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0, 1} }

func (m *WalkGraphReq_Limit) GetMaxTime() *google_protobuf2.Duration {
	if m != nil {
		return m.MaxTime
	}
	return nil
}

type WalkGraphReq_Include struct {
	// ObjectIds fills the 'Id' field of Quest, Attempt, and Execution objects.
	// If this is false, then those fields will be omitted.
	ObjectIds bool `protobuf:"varint,1,opt,name=object_ids" json:"object_ids,omitempty"`
	// QuestData instructs the request to omit the Data field
	// for Quests in GraphData.
	QuestData bool `protobuf:"varint,2,opt,name=quest_data" json:"quest_data,omitempty"`
	// AttemptData instructs the request to omit the Data field
	// for Attempts in GraphData.
	AttemptData bool `protobuf:"varint,3,opt,name=attempt_data" json:"attempt_data,omitempty"`
	// AttemptResult will include the Attempt result payloads for any
	// Attempts that it returns. This option also implies AttemptData.
	//
	// If the requestor is an execution, the query logic will only include
	// result for an Attempt if the execution's Attempt depends on it, otherwise
	// it will be blank. To view an AttemptResult, the querying Attempt must
	// first depend on it.
	AttemptResult bool `protobuf:"varint,4,opt,name=attempt_result" json:"attempt_result,omitempty"`
	// ExpiredAttempts allows you to view attempts which have expired results,
	// which are normally excluded from the graph.
	ExpiredAttempts bool `protobuf:"varint,5,opt,name=expired_attempts" json:"expired_attempts,omitempty"`
	// Executions is the number of Executions to include per Attempt. If this
	// is 0, then the execution data will be omitted completely.
	NumExecutions uint32 `protobuf:"varint,6,opt,name=num_executions" json:"num_executions,omitempty"`
	// FwdDeps instructs WalkGraph to omit forward dependency information
	// from the result. This only changes the presence of information in the
	// result; if the query is walking forward attempt dependencies, that will
	// still occur even if this is false.
	FwdDeps bool `protobuf:"varint,7,opt,name=fwd_deps" json:"fwd_deps,omitempty"`
	// BackDeps instructs WalkGraph to omit the backwards dependency
	// information. This only changes the presence of information in the
	// result; if the query is walking backward attempt dependencies, that will
	// still occur even if this is false.
	BackDeps bool `protobuf:"varint,8,opt,name=back_deps" json:"back_deps,omitempty"`
}

func (m *WalkGraphReq_Include) Reset()                    { *m = WalkGraphReq_Include{} }
func (m *WalkGraphReq_Include) String() string            { return proto.CompactTextString(m) }
func (*WalkGraphReq_Include) ProtoMessage()               {}
func (*WalkGraphReq_Include) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0, 2} }

func init() {
	proto.RegisterType((*WalkGraphReq)(nil), "dm.WalkGraphReq")
	proto.RegisterType((*WalkGraphReq_Mode)(nil), "dm.WalkGraphReq.Mode")
	proto.RegisterType((*WalkGraphReq_Limit)(nil), "dm.WalkGraphReq.Limit")
	proto.RegisterType((*WalkGraphReq_Include)(nil), "dm.WalkGraphReq.Include")
	proto.RegisterEnum("dm.WalkGraphReq_Mode_Direction", WalkGraphReq_Mode_Direction_name, WalkGraphReq_Mode_Direction_value)
}

var fileDescriptor10 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x51, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x25, 0x4d, 0xba, 0xa6, 0xb7, 0x5d, 0x95, 0x5d, 0xc1, 0x14, 0xf2, 0x40, 0xab, 0x21, 0xa4,
	0x21, 0xa4, 0x4c, 0x2a, 0x5f, 0xc0, 0x34, 0x98, 0x90, 0xe0, 0x01, 0x5e, 0x78, 0x8c, 0xdc, 0xda,
	0x6d, 0xc3, 0xe2, 0x3a, 0x8b, 0x1d, 0xb5, 0x13, 0xff, 0xc5, 0x2f, 0xf0, 0x5b, 0xd8, 0xd7, 0x09,
	0x42, 0x8c, 0xc7, 0x7b, 0xce, 0xf1, 0xf5, 0x39, 0xf7, 0x40, 0x72, 0x60, 0xd5, 0x5d, 0xb1, 0x6d,
	0x58, 0xbd, 0xcb, 0xeb, 0x46, 0x19, 0x85, 0x03, 0x2e, 0xb3, 0x17, 0x5b, 0xa5, 0xb6, 0x95, 0xb8,
	0x22, 0x64, 0xd5, 0x6e, 0xae, 0x78, 0xdb, 0x30, 0x53, 0xaa, 0xbd, 0xd7, 0x64, 0xf3, 0x7f, 0x79,
	0x53, 0x4a, 0xa1, 0x0d, 0x93, 0x75, 0x27, 0x48, 0x68, 0x63, 0xc1, 0x99, 0x61, 0x1d, 0x72, 0xe6,
	0x91, 0xfb, 0x56, 0x34, 0x0f, 0x1d, 0x34, 0x31, 0x0f, 0xb5, 0xd0, 0x7e, 0xb8, 0xf8, 0x15, 0xc1,
	0xf4, 0x9b, 0xf5, 0x72, 0xeb, 0x64, 0x5f, 0xc5, 0x3d, 0x2e, 0x20, 0x62, 0xad, 0xd9, 0xa5, 0xc1,
	0x22, 0xb8, 0x9c, 0x2c, 0x31, 0xe7, 0x32, 0x7f, 0x7f, 0x14, 0xeb, 0x96, 0x6c, 0xbc, 0xb3, 0x0c,
	0xce, 0x61, 0xe4, 0xd6, 0x95, 0x42, 0xa7, 0x83, 0x45, 0x68, 0x45, 0x33, 0x27, 0xa2, 0x05, 0x5f,
	0xdc, 0x37, 0xf8, 0x12, 0x22, 0xa9, 0xb8, 0x48, 0x43, 0x5a, 0xf1, 0xcc, 0xb1, 0x7f, 0x7f, 0x91,
	0x7f, 0xb6, 0x24, 0xbe, 0x82, 0x61, 0x55, 0xca, 0xd2, 0xa4, 0x11, 0xa9, 0xce, 0x1f, 0xa9, 0x3e,
	0x39, 0x16, 0x5f, 0xc3, 0xa8, 0xdc, 0xaf, 0xab, 0xd6, 0xae, 0x1b, 0x92, 0x30, 0x7d, 0x24, 0xfc,
	0xe8, 0xf9, 0xec, 0x07, 0x44, 0xb4, 0x79, 0x02, 0x21, 0xdf, 0x68, 0x0a, 0x10, 0xe3, 0x12, 0xc6,
	0xbc, 0x6c, 0xc4, 0xda, 0xd9, 0xb7, 0x76, 0x83, 0xcb, 0xd9, 0x72, 0xfe, 0x5f, 0x43, 0xf9, 0x4d,
	0x2f, 0xbb, 0xb0, 0x6f, 0xfe, 0x0c, 0x38, 0x85, 0xf8, 0x83, 0x6a, 0x0e, 0xac, 0xe1, 0x3a, 0x79,
	0x82, 0xa7, 0x30, 0xbe, 0x66, 0xeb, 0x3b, 0x3f, 0x06, 0x18, 0x43, 0x74, 0xad, 0xcc, 0x2e, 0x19,
	0x64, 0xb7, 0x30, 0xf4, 0x86, 0xcf, 0x60, 0x2c, 0xd9, 0xb1, 0xe0, 0xa2, 0xb6, 0x47, 0x74, 0xd9,
	0x42, 0x7c, 0x03, 0xb1, 0x83, 0x5c, 0x59, 0x5d, 0x88, 0xe7, 0xb9, 0x6f, 0x32, 0xef, 0x9b, 0xcc,
	0x6f, 0xba, 0xa6, 0xb3, 0x9f, 0x01, 0x8c, 0xba, 0x44, 0x88, 0x00, 0x6a, 0xf5, 0xdd, 0x1a, 0x29,
	0x4a, 0xde, 0x07, 0xb2, 0x98, 0xbd, 0xbe, 0x36, 0x54, 0x32, 0x25, 0x8a, 0xf1, 0x29, 0x4c, 0x99,
	0x31, 0x42, 0xd6, 0x1d, 0x1a, 0x12, 0x7a, 0x0e, 0xb3, 0x1e, 0x6d, 0x84, 0x6e, 0x2b, 0x7f, 0xea,
	0x18, 0x53, 0x48, 0xc4, 0xb1, 0xb6, 0x01, 0x79, 0xd1, 0xf1, 0x9a, 0x6c, 0xd1, 0x8b, 0x7d, 0x2b,
	0x0b, 0xd1, 0xf7, 0xad, 0xd3, 0x13, 0x8b, 0x9f, 0x62, 0x02, 0xf1, 0xe6, 0xc0, 0x5d, 0x26, 0x9d,
	0x8e, 0x48, 0x69, 0x53, 0xae, 0xec, 0x1d, 0x3c, 0x14, 0x3b, 0x68, 0x75, 0x42, 0x59, 0xde, 0xfe,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x16, 0x2d, 0xc1, 0xdb, 0x02, 0x00, 0x00,
}
