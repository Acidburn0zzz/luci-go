// Code generated by protoc-gen-go.
// source: graph_data.proto
// DO NOT EDIT!

package dm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/luci/luci-go/common/proto/google"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Attempt_State int32

const (
	Attempt_NEEDS_EXECUTION Attempt_State = 0
	Attempt_EXECUTING       Attempt_State = 1
	Attempt_ADDING_DEPS     Attempt_State = 2
	Attempt_BLOCKED         Attempt_State = 3
	Attempt_FINISHED        Attempt_State = 4
)

var Attempt_State_name = map[int32]string{
	0: "NEEDS_EXECUTION",
	1: "EXECUTING",
	2: "ADDING_DEPS",
	3: "BLOCKED",
	4: "FINISHED",
}
var Attempt_State_value = map[string]int32{
	"NEEDS_EXECUTION": 0,
	"EXECUTING":       1,
	"ADDING_DEPS":     2,
	"BLOCKED":         3,
	"FINISHED":        4,
}

func (x Attempt_State) String() string {
	return proto.EnumName(Attempt_State_name, int32(x))
}
func (Attempt_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{1, 0} }

type Attempt_Partial_Result int32

const (
	// LOADED implies that the result was, in fact, loaded.
	Attempt_Partial_LOADED Attempt_Partial_Result = 0
	// NOT_LOADED is set if the result failed to load because there was
	// a transient error or the request ran out of time.
	Attempt_Partial_NOT_LOADED Attempt_Partial_Result = 1
	// NOT_AUTHORIZED is set if the query was authenticated from an Execution
	// whose Attempt doesn't depend on this one.
	Attempt_Partial_NOT_AUTHORIZED Attempt_Partial_Result = 2
	// DATA_SIZE_LIMIT is set if the max_data_size limit was reached.
	Attempt_Partial_DATA_SIZE_LIMIT Attempt_Partial_Result = 3
)

var Attempt_Partial_Result_name = map[int32]string{
	0: "LOADED",
	1: "NOT_LOADED",
	2: "NOT_AUTHORIZED",
	3: "DATA_SIZE_LIMIT",
}
var Attempt_Partial_Result_value = map[string]int32{
	"LOADED":          0,
	"NOT_LOADED":      1,
	"NOT_AUTHORIZED":  2,
	"DATA_SIZE_LIMIT": 3,
}

func (x Attempt_Partial_Result) String() string {
	return proto.EnumName(Attempt_Partial_Result_name, int32(x))
}
func (Attempt_Partial_Result) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{1, 3, 0} }

type Execution_State int32

const (
	Execution_SCHEDULED Execution_State = 0
	Execution_RUNNING   Execution_State = 1
	Execution_REJECTED  Execution_State = 2
	Execution_FINISHED  Execution_State = 3
	Execution_CRASHED   Execution_State = 4
)

var Execution_State_name = map[int32]string{
	0: "SCHEDULED",
	1: "RUNNING",
	2: "REJECTED",
	3: "FINISHED",
	4: "CRASHED",
}
var Execution_State_value = map[string]int32{
	"SCHEDULED": 0,
	"RUNNING":   1,
	"REJECTED":  2,
	"FINISHED":  3,
	"CRASHED":   4,
}

func (x Execution_State) String() string {
	return proto.EnumName(Execution_State_name, int32(x))
}
func (Execution_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{2, 0} }

type Quest struct {
	Id *Quest_ID `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// DNE is set to true if this Quest does not exist. None of the following
	// fields are valid if this is set to true.
	DNE  bool        `protobuf:"varint,2,opt,name=DNE,json=dNE" json:"DNE,omitempty"`
	Data *Quest_Data `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	// key is the `id` field of the Attempt.ID
	Attempts map[uint32]*Attempt `protobuf:"bytes,4,rep,name=attempts" json:"attempts,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Partial is true iff the request asked for QuestData, but wasn't able to
	// completely fill it.
	Partial bool `protobuf:"varint,16,opt,name=partial" json:"partial,omitempty"`
}

func (m *Quest) Reset()                    { *m = Quest{} }
func (m *Quest) String() string            { return proto.CompactTextString(m) }
func (*Quest) ProtoMessage()               {}
func (*Quest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *Quest) GetId() *Quest_ID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Quest) GetData() *Quest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Quest) GetAttempts() map[uint32]*Attempt {
	if m != nil {
		return m.Attempts
	}
	return nil
}

type Quest_ID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Quest_ID) Reset()                    { *m = Quest_ID{} }
func (m *Quest_ID) String() string            { return proto.CompactTextString(m) }
func (*Quest_ID) ProtoMessage()               {}
func (*Quest_ID) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 0} }

type Quest_Desc struct {
	DistributorConfigName string `protobuf:"bytes,1,opt,name=distributor_config_name,json=distributorConfigName" json:"distributor_config_name,omitempty"`
	JsonPayload           string `protobuf:"bytes,2,opt,name=json_payload,json=jsonPayload" json:"json_payload,omitempty"`
}

func (m *Quest_Desc) Reset()                    { *m = Quest_Desc{} }
func (m *Quest_Desc) String() string            { return proto.CompactTextString(m) }
func (*Quest_Desc) ProtoMessage()               {}
func (*Quest_Desc) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 1} }

type Quest_Data struct {
	Created *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=created" json:"created,omitempty"`
	Desc    *Quest_Desc                `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
}

func (m *Quest_Data) Reset()                    { *m = Quest_Data{} }
func (m *Quest_Data) String() string            { return proto.CompactTextString(m) }
func (*Quest_Data) ProtoMessage()               {}
func (*Quest_Data) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 2} }

func (m *Quest_Data) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Quest_Data) GetDesc() *Quest_Desc {
	if m != nil {
		return m.Desc
	}
	return nil
}

type Attempt struct {
	Id *Attempt_ID `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// DNE is set to true if this Attempt does not exist. None of the following
	// fields are valid if this is set to true.
	DNE  bool          `protobuf:"varint,2,opt,name=DNE,json=dNE" json:"DNE,omitempty"`
	Data *Attempt_Data `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	// key is the `id` field of the Execution.ID
	Executions map[uint32]*Execution `protobuf:"bytes,4,rep,name=executions" json:"executions,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FwdDeps    *AttemptList          `protobuf:"bytes,5,opt,name=fwd_deps,json=fwdDeps" json:"fwd_deps,omitempty"`
	BackDeps   *AttemptList          `protobuf:"bytes,6,opt,name=back_deps,json=backDeps" json:"back_deps,omitempty"`
	// Partial values are true iff the request asked for AttemptData, Executions
	// or Deps, but wasn't able to completely fill them. If Partial is omitted,
	// it means that no partial data exists in this Attempt.
	Partial *Attempt_Partial `protobuf:"bytes,16,opt,name=partial" json:"partial,omitempty"`
}

func (m *Attempt) Reset()                    { *m = Attempt{} }
func (m *Attempt) String() string            { return proto.CompactTextString(m) }
func (*Attempt) ProtoMessage()               {}
func (*Attempt) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *Attempt) GetId() *Attempt_ID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Attempt) GetData() *Attempt_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Attempt) GetExecutions() map[uint32]*Execution {
	if m != nil {
		return m.Executions
	}
	return nil
}

func (m *Attempt) GetFwdDeps() *AttemptList {
	if m != nil {
		return m.FwdDeps
	}
	return nil
}

func (m *Attempt) GetBackDeps() *AttemptList {
	if m != nil {
		return m.BackDeps
	}
	return nil
}

func (m *Attempt) GetPartial() *Attempt_Partial {
	if m != nil {
		return m.Partial
	}
	return nil
}

type Attempt_ID struct {
	Quest string `protobuf:"bytes,1,opt,name=quest" json:"quest,omitempty"`
	Id    uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *Attempt_ID) Reset()                    { *m = Attempt_ID{} }
func (m *Attempt_ID) String() string            { return proto.CompactTextString(m) }
func (*Attempt_ID) ProtoMessage()               {}
func (*Attempt_ID) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1, 0} }

type Attempt_Data struct {
	Created       *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=created" json:"created,omitempty"`
	Modified      *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=modified" json:"modified,omitempty"`
	NumExecutions uint32                     `protobuf:"varint,3,opt,name=num_executions,json=numExecutions" json:"num_executions,omitempty"`
	// Types that are valid to be assigned to AttemptType:
	//	*Attempt_Data_NeedsExecution_
	//	*Attempt_Data_Executing_
	//	*Attempt_Data_AddingDeps_
	//	*Attempt_Data_Blocked_
	//	*Attempt_Data_Finished_
	AttemptType isAttempt_Data_AttemptType `protobuf_oneof:"attempt_type"`
}

func (m *Attempt_Data) Reset()                    { *m = Attempt_Data{} }
func (m *Attempt_Data) String() string            { return proto.CompactTextString(m) }
func (*Attempt_Data) ProtoMessage()               {}
func (*Attempt_Data) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1, 1} }

type isAttempt_Data_AttemptType interface {
	isAttempt_Data_AttemptType()
}

type Attempt_Data_NeedsExecution_ struct {
	NeedsExecution *Attempt_Data_NeedsExecution `protobuf:"bytes,4,opt,name=needs_execution,json=needsExecution,oneof"`
}
type Attempt_Data_Executing_ struct {
	Executing *Attempt_Data_Executing `protobuf:"bytes,5,opt,name=executing,oneof"`
}
type Attempt_Data_AddingDeps_ struct {
	AddingDeps *Attempt_Data_AddingDeps `protobuf:"bytes,6,opt,name=adding_deps,json=addingDeps,oneof"`
}
type Attempt_Data_Blocked_ struct {
	Blocked *Attempt_Data_Blocked `protobuf:"bytes,7,opt,name=blocked,oneof"`
}
type Attempt_Data_Finished_ struct {
	Finished *Attempt_Data_Finished `protobuf:"bytes,8,opt,name=finished,oneof"`
}

func (*Attempt_Data_NeedsExecution_) isAttempt_Data_AttemptType() {}
func (*Attempt_Data_Executing_) isAttempt_Data_AttemptType()      {}
func (*Attempt_Data_AddingDeps_) isAttempt_Data_AttemptType()     {}
func (*Attempt_Data_Blocked_) isAttempt_Data_AttemptType()        {}
func (*Attempt_Data_Finished_) isAttempt_Data_AttemptType()       {}

func (m *Attempt_Data) GetAttemptType() isAttempt_Data_AttemptType {
	if m != nil {
		return m.AttemptType
	}
	return nil
}

func (m *Attempt_Data) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Attempt_Data) GetModified() *google_protobuf.Timestamp {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *Attempt_Data) GetNeedsExecution() *Attempt_Data_NeedsExecution {
	if x, ok := m.GetAttemptType().(*Attempt_Data_NeedsExecution_); ok {
		return x.NeedsExecution
	}
	return nil
}

func (m *Attempt_Data) GetExecuting() *Attempt_Data_Executing {
	if x, ok := m.GetAttemptType().(*Attempt_Data_Executing_); ok {
		return x.Executing
	}
	return nil
}

func (m *Attempt_Data) GetAddingDeps() *Attempt_Data_AddingDeps {
	if x, ok := m.GetAttemptType().(*Attempt_Data_AddingDeps_); ok {
		return x.AddingDeps
	}
	return nil
}

func (m *Attempt_Data) GetBlocked() *Attempt_Data_Blocked {
	if x, ok := m.GetAttemptType().(*Attempt_Data_Blocked_); ok {
		return x.Blocked
	}
	return nil
}

func (m *Attempt_Data) GetFinished() *Attempt_Data_Finished {
	if x, ok := m.GetAttemptType().(*Attempt_Data_Finished_); ok {
		return x.Finished
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Attempt_Data) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Attempt_Data_OneofMarshaler, _Attempt_Data_OneofUnmarshaler, _Attempt_Data_OneofSizer, []interface{}{
		(*Attempt_Data_NeedsExecution_)(nil),
		(*Attempt_Data_Executing_)(nil),
		(*Attempt_Data_AddingDeps_)(nil),
		(*Attempt_Data_Blocked_)(nil),
		(*Attempt_Data_Finished_)(nil),
	}
}

func _Attempt_Data_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Attempt_Data)
	// attempt_type
	switch x := m.AttemptType.(type) {
	case *Attempt_Data_NeedsExecution_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NeedsExecution); err != nil {
			return err
		}
	case *Attempt_Data_Executing_:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Executing); err != nil {
			return err
		}
	case *Attempt_Data_AddingDeps_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddingDeps); err != nil {
			return err
		}
	case *Attempt_Data_Blocked_:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Blocked); err != nil {
			return err
		}
	case *Attempt_Data_Finished_:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Finished); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Attempt_Data.AttemptType has unexpected type %T", x)
	}
	return nil
}

func _Attempt_Data_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Attempt_Data)
	switch tag {
	case 4: // attempt_type.needs_execution
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Attempt_Data_NeedsExecution)
		err := b.DecodeMessage(msg)
		m.AttemptType = &Attempt_Data_NeedsExecution_{msg}
		return true, err
	case 5: // attempt_type.executing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Attempt_Data_Executing)
		err := b.DecodeMessage(msg)
		m.AttemptType = &Attempt_Data_Executing_{msg}
		return true, err
	case 6: // attempt_type.adding_deps
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Attempt_Data_AddingDeps)
		err := b.DecodeMessage(msg)
		m.AttemptType = &Attempt_Data_AddingDeps_{msg}
		return true, err
	case 7: // attempt_type.blocked
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Attempt_Data_Blocked)
		err := b.DecodeMessage(msg)
		m.AttemptType = &Attempt_Data_Blocked_{msg}
		return true, err
	case 8: // attempt_type.finished
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Attempt_Data_Finished)
		err := b.DecodeMessage(msg)
		m.AttemptType = &Attempt_Data_Finished_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Attempt_Data_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Attempt_Data)
	// attempt_type
	switch x := m.AttemptType.(type) {
	case *Attempt_Data_NeedsExecution_:
		s := proto.Size(x.NeedsExecution)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attempt_Data_Executing_:
		s := proto.Size(x.Executing)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attempt_Data_AddingDeps_:
		s := proto.Size(x.AddingDeps)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attempt_Data_Blocked_:
		s := proto.Size(x.Blocked)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attempt_Data_Finished_:
		s := proto.Size(x.Finished)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Attempt_Data_NeedsExecution struct {
	Pending *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=pending" json:"pending,omitempty"`
}

func (m *Attempt_Data_NeedsExecution) Reset()         { *m = Attempt_Data_NeedsExecution{} }
func (m *Attempt_Data_NeedsExecution) String() string { return proto.CompactTextString(m) }
func (*Attempt_Data_NeedsExecution) ProtoMessage()    {}
func (*Attempt_Data_NeedsExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor6, []int{1, 1, 0}
}

func (m *Attempt_Data_NeedsExecution) GetPending() *google_protobuf.Timestamp {
	if m != nil {
		return m.Pending
	}
	return nil
}

type Attempt_Data_Executing struct {
	CurExecutionId uint32 `protobuf:"varint,1,opt,name=cur_execution_id,json=curExecutionId" json:"cur_execution_id,omitempty"`
}

func (m *Attempt_Data_Executing) Reset()                    { *m = Attempt_Data_Executing{} }
func (m *Attempt_Data_Executing) String() string            { return proto.CompactTextString(m) }
func (*Attempt_Data_Executing) ProtoMessage()               {}
func (*Attempt_Data_Executing) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1, 1, 1} }

type Attempt_Data_AddingDeps struct {
	NumAdding  uint32 `protobuf:"varint,1,opt,name=num_adding,json=numAdding" json:"num_adding,omitempty"`
	NumWaiting uint32 `protobuf:"varint,2,opt,name=num_waiting,json=numWaiting" json:"num_waiting,omitempty"`
}

func (m *Attempt_Data_AddingDeps) Reset()                    { *m = Attempt_Data_AddingDeps{} }
func (m *Attempt_Data_AddingDeps) String() string            { return proto.CompactTextString(m) }
func (*Attempt_Data_AddingDeps) ProtoMessage()               {}
func (*Attempt_Data_AddingDeps) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1, 1, 2} }

type Attempt_Data_Blocked struct {
	NumWaiting uint32 `protobuf:"varint,1,opt,name=num_waiting,json=numWaiting" json:"num_waiting,omitempty"`
}

func (m *Attempt_Data_Blocked) Reset()                    { *m = Attempt_Data_Blocked{} }
func (m *Attempt_Data_Blocked) String() string            { return proto.CompactTextString(m) }
func (*Attempt_Data_Blocked) ProtoMessage()               {}
func (*Attempt_Data_Blocked) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1, 1, 3} }

type Attempt_Data_Finished struct {
	Expiration     *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=expiration" json:"expiration,omitempty"`
	JsonResultSize uint32                     `protobuf:"varint,2,opt,name=json_result_size,json=jsonResultSize" json:"json_result_size,omitempty"`
	JsonResult     string                     `protobuf:"bytes,3,opt,name=json_result,json=jsonResult" json:"json_result,omitempty"`
}

func (m *Attempt_Data_Finished) Reset()                    { *m = Attempt_Data_Finished{} }
func (m *Attempt_Data_Finished) String() string            { return proto.CompactTextString(m) }
func (*Attempt_Data_Finished) ProtoMessage()               {}
func (*Attempt_Data_Finished) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1, 1, 4} }

func (m *Attempt_Data_Finished) GetExpiration() *google_protobuf.Timestamp {
	if m != nil {
		return m.Expiration
	}
	return nil
}

type Attempt_Partial struct {
	// Data is true iff the AttemptData should have been filled, but wasn't
	Data bool `protobuf:"varint,1,opt,name=data" json:"data,omitempty"`
	// Executions is true iff the Executions were requested, but not all of
	// them could be loaded.
	Executions bool `protobuf:"varint,2,opt,name=executions" json:"executions,omitempty"`
	// FwdDeps is true iff FwdDeps were requested, but not all of them could be
	// loaded.
	FwdDeps bool `protobuf:"varint,3,opt,name=fwd_deps,json=fwdDeps" json:"fwd_deps,omitempty"`
	// BackDeps is true iff BackDeps were requested, but not all of them could be
	// loaded.
	BackDeps bool `protobuf:"varint,4,opt,name=back_deps,json=backDeps" json:"back_deps,omitempty"`
	// result is set if AttemptResults were requested, and the attempt_type is
	// Finished, but for some reason the result but wasn't loaded.
	Result Attempt_Partial_Result `protobuf:"varint,5,opt,name=result,enum=dm.Attempt_Partial_Result" json:"result,omitempty"`
}

func (m *Attempt_Partial) Reset()                    { *m = Attempt_Partial{} }
func (m *Attempt_Partial) String() string            { return proto.CompactTextString(m) }
func (*Attempt_Partial) ProtoMessage()               {}
func (*Attempt_Partial) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1, 3} }

type Execution struct {
	Id    *Execution_ID   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	State Execution_State `protobuf:"varint,2,opt,name=state,enum=dm.Execution_State" json:"state,omitempty"`
	Data  *Execution_Data `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	// Partial is true iff the request asked for Executions, but wasn't able to
	// completely fill them.
	Partial bool `protobuf:"varint,16,opt,name=partial" json:"partial,omitempty"`
}

func (m *Execution) Reset()                    { *m = Execution{} }
func (m *Execution) String() string            { return proto.CompactTextString(m) }
func (*Execution) ProtoMessage()               {}
func (*Execution) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *Execution) GetId() *Execution_ID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Execution) GetData() *Execution_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

// Execution_Auth is a tuple of the requesting ExecutionID and the activated
// Execution Token (see the ActivateExecution rpc).
type Execution_Auth struct {
	Id    *Execution_ID `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Token []byte        `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *Execution_Auth) Reset()                    { *m = Execution_Auth{} }
func (m *Execution_Auth) String() string            { return proto.CompactTextString(m) }
func (*Execution_Auth) ProtoMessage()               {}
func (*Execution_Auth) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2, 0} }

func (m *Execution_Auth) GetId() *Execution_ID {
	if m != nil {
		return m.Id
	}
	return nil
}

type Execution_ID struct {
	Quest   string `protobuf:"bytes,1,opt,name=quest" json:"quest,omitempty"`
	Attempt uint32 `protobuf:"varint,2,opt,name=attempt" json:"attempt,omitempty"`
	Id      uint32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (m *Execution_ID) Reset()                    { *m = Execution_ID{} }
func (m *Execution_ID) String() string            { return proto.CompactTextString(m) }
func (*Execution_ID) ProtoMessage()               {}
func (*Execution_ID) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2, 1} }

type Execution_Data struct {
	Created            *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=created" json:"created,omitempty"`
	DistributorToken   string                     `protobuf:"bytes,2,opt,name=distributor_token,json=distributorToken" json:"distributor_token,omitempty"`
	DistributorInfoUrl string                     `protobuf:"bytes,3,opt,name=distributor_info_url,json=distributorInfoUrl" json:"distributor_info_url,omitempty"`
}

func (m *Execution_Data) Reset()                    { *m = Execution_Data{} }
func (m *Execution_Data) String() string            { return proto.CompactTextString(m) }
func (*Execution_Data) ProtoMessage()               {}
func (*Execution_Data) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2, 2} }

func (m *Execution_Data) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

// GraphData defines all of the DM graph data that may be returned from DM.
//
// Currently only WalkGraph returns GraphData, but in the future other APIs will
// explore the graph in other ways, and they'll return this same data structure.
//
// The design of this message is intended to allow clients to easily accumulate
// various GraphData from different sources in order to maintain an in-memory
// cache of data that exists in DM, where that data is discovered across
// multiple RPCs.
type GraphData struct {
	// Quests is the main entry point for all the graph data.
	// key is the `id` field of the QuestID
	Quests map[string]*Quest `protobuf:"bytes,1,rep,name=quests" json:"quests,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// HadErrors is set to true if the data represented here is a partial view
	// of the requested data due to internal errors. The request may be repeated
	// or the client may chose to make smaller queries into the portions of the
	// graph that are missing.
	//
	// If HadErrors is set HadMore will also be set.
	HadErrors bool `protobuf:"varint,2,opt,name=had_errors,json=hadErrors" json:"had_errors,omitempty"`
	// HadMore is set to true if the request stopped short of the full query
	// result set due to things like:
	//   * max response size limit
	//   * max time limit (e.g. WalkGraphReq.MaxTime) being hit
	//   * non-terminal errors encountered during the request (HadErrors will also
	//     be true in this case).
	//
	// Note that this is different than the Partial booleans: This refers
	// specifically to situations when Queries do not run to completion.
	HadMore bool `protobuf:"varint,3,opt,name=had_more,json=hadMore" json:"had_more,omitempty"`
}

func (m *GraphData) Reset()                    { *m = GraphData{} }
func (m *GraphData) String() string            { return proto.CompactTextString(m) }
func (*GraphData) ProtoMessage()               {}
func (*GraphData) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *GraphData) GetQuests() map[string]*Quest {
	if m != nil {
		return m.Quests
	}
	return nil
}

func init() {
	proto.RegisterType((*Quest)(nil), "dm.Quest")
	proto.RegisterType((*Quest_ID)(nil), "dm.Quest.ID")
	proto.RegisterType((*Quest_Desc)(nil), "dm.Quest.Desc")
	proto.RegisterType((*Quest_Data)(nil), "dm.Quest.Data")
	proto.RegisterType((*Attempt)(nil), "dm.Attempt")
	proto.RegisterType((*Attempt_ID)(nil), "dm.Attempt.ID")
	proto.RegisterType((*Attempt_Data)(nil), "dm.Attempt.Data")
	proto.RegisterType((*Attempt_Data_NeedsExecution)(nil), "dm.Attempt.Data.NeedsExecution")
	proto.RegisterType((*Attempt_Data_Executing)(nil), "dm.Attempt.Data.Executing")
	proto.RegisterType((*Attempt_Data_AddingDeps)(nil), "dm.Attempt.Data.AddingDeps")
	proto.RegisterType((*Attempt_Data_Blocked)(nil), "dm.Attempt.Data.Blocked")
	proto.RegisterType((*Attempt_Data_Finished)(nil), "dm.Attempt.Data.Finished")
	proto.RegisterType((*Attempt_Partial)(nil), "dm.Attempt.Partial")
	proto.RegisterType((*Execution)(nil), "dm.Execution")
	proto.RegisterType((*Execution_Auth)(nil), "dm.Execution.Auth")
	proto.RegisterType((*Execution_ID)(nil), "dm.Execution.ID")
	proto.RegisterType((*Execution_Data)(nil), "dm.Execution.Data")
	proto.RegisterType((*GraphData)(nil), "dm.GraphData")
	proto.RegisterEnum("dm.Attempt_State", Attempt_State_name, Attempt_State_value)
	proto.RegisterEnum("dm.Attempt_Partial_Result", Attempt_Partial_Result_name, Attempt_Partial_Result_value)
	proto.RegisterEnum("dm.Execution_State", Execution_State_name, Execution_State_value)
}

var fileDescriptor6 = []byte{
	// 1222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x72, 0xdb, 0x54,
	0x10, 0xae, 0x2d, 0xff, 0x69, 0x6d, 0x2b, 0xe6, 0xb4, 0x4c, 0x5d, 0x05, 0x9a, 0x60, 0x7e, 0xa6,
	0x14, 0x70, 0x21, 0x85, 0xc2, 0x94, 0x99, 0xce, 0xb8, 0x96, 0xda, 0xb8, 0x38, 0x4e, 0x90, 0x9d,
	0x29, 0xc3, 0x8d, 0x50, 0x2c, 0x25, 0x11, 0xb1, 0x25, 0x23, 0xc9, 0x94, 0xf0, 0x0c, 0xdc, 0x70,
	0xcd, 0xbb, 0xf0, 0x0a, 0x3c, 0x06, 0x97, 0xdc, 0x72, 0xc9, 0x9e, 0x1f, 0x49, 0x47, 0x49, 0x5b,
	0x3a, 0xd3, 0x3b, 0xed, 0xee, 0xb7, 0xe7, 0xec, 0xd9, 0xef, 0x3b, 0x7b, 0x04, 0x9d, 0x93, 0xc8,
	0x59, 0x9d, 0xda, 0xae, 0x93, 0x38, 0xfd, 0x55, 0x14, 0x26, 0x21, 0x29, 0xbb, 0x4b, 0x7d, 0xeb,
	0x24, 0x0c, 0x4f, 0x16, 0xde, 0x1d, 0xe6, 0x39, 0x5a, 0x1f, 0xdf, 0x49, 0xfc, 0xa5, 0x17, 0x27,
	0xce, 0x72, 0xc5, 0x41, 0x7a, 0x33, 0x39, 0x5f, 0x79, 0x31, 0x37, 0x7a, 0x7f, 0x29, 0x50, 0xfd,
	0x76, 0x8d, 0x71, 0xf2, 0x16, 0x94, 0x7d, 0xb7, 0x5b, 0xda, 0x2e, 0xdd, 0x6a, 0xee, 0xb4, 0xfa,
	0xee, 0xb2, 0xcf, 0xdc, 0xfd, 0x91, 0x61, 0xa1, 0x9f, 0x74, 0x40, 0x31, 0x26, 0x66, 0xb7, 0x8c,
	0xe1, 0x86, 0xa5, 0xb8, 0x13, 0x93, 0xf4, 0xa0, 0x42, 0x77, 0xee, 0x2a, 0x2c, 0x43, 0xcb, 0x33,
	0x0c, 0xf4, 0x5a, 0x2c, 0x46, 0xee, 0x42, 0xc3, 0x49, 0x12, 0x6f, 0xb9, 0x4a, 0xe2, 0x6e, 0x65,
	0x5b, 0x41, 0xdc, 0xf5, 0x1c, 0x37, 0x10, 0x11, 0x33, 0x48, 0xa2, 0x73, 0x2b, 0x03, 0x92, 0x2e,
	0xd4, 0x57, 0x4e, 0x94, 0xf8, 0xce, 0xa2, 0xdb, 0x61, 0xdb, 0xa5, 0xa6, 0x7e, 0x0d, 0xca, 0x23,
	0x83, 0x68, 0x59, 0xa1, 0x2a, 0x2d, 0x4d, 0x77, 0xa0, 0x62, 0x78, 0xf1, 0x9c, 0xdc, 0x83, 0xeb,
	0xae, 0x1f, 0x27, 0x91, 0x7f, 0xb4, 0x4e, 0xc2, 0xc8, 0x9e, 0x87, 0xc1, 0xb1, 0x7f, 0x62, 0x07,
	0xce, 0xd2, 0x13, 0xe0, 0x37, 0xa5, 0xf0, 0x90, 0x45, 0x27, 0x18, 0x24, 0xef, 0x40, 0xeb, 0xc7,
	0x38, 0x0c, 0xec, 0x95, 0x73, 0xbe, 0x08, 0x1d, 0x97, 0x9d, 0x51, 0xb5, 0x9a, 0xd4, 0x77, 0xc0,
	0x5d, 0xfa, 0x0f, 0xb8, 0x05, 0x3d, 0xcf, 0xe7, 0x50, 0x9f, 0x47, 0x9e, 0x93, 0x78, 0x69, 0xa3,
	0xf4, 0x3e, 0xef, 0x76, 0x3f, 0xed, 0x76, 0x7f, 0x96, 0x76, 0xdb, 0x4a, 0xa1, 0xac, 0x53, 0x58,
	0x20, 0x5b, 0xb8, 0xd8, 0x29, 0xf4, 0x5a, 0x2c, 0xa6, 0xef, 0x42, 0xbb, 0xd0, 0x0f, 0xda, 0xf0,
	0x33, 0xef, 0x9c, 0x6d, 0xd3, 0xb6, 0xe8, 0x27, 0xd6, 0x59, 0xfd, 0xd9, 0x59, 0xac, 0x3d, 0xb1,
	0x4e, 0x93, 0xae, 0x23, 0x72, 0x2c, 0x1e, 0xb9, 0x5f, 0xfe, 0xaa, 0xd4, 0xfb, 0xbb, 0x05, 0x75,
	0xe1, 0x26, 0x37, 0x25, 0x4e, 0x35, 0x09, 0xff, 0x62, 0x56, 0xdf, 0x2b, 0xb0, 0xda, 0x91, 0x73,
	0x24, 0x5e, 0xbf, 0x06, 0xf0, 0x7e, 0xf1, 0xe6, 0xeb, 0xc4, 0x0f, 0x83, 0x94, 0xd9, 0x4d, 0x19,
	0x6b, 0x66, 0x51, 0xce, 0xae, 0x04, 0x27, 0xb7, 0xa1, 0x71, 0xfc, 0xcc, 0xb5, 0x5d, 0x6f, 0x15,
	0x77, 0xab, 0x6c, 0x9b, 0x0d, 0x29, 0x75, 0x8c, 0x1c, 0x59, 0x75, 0x04, 0x18, 0x18, 0x27, 0x1f,
	0x83, 0x7a, 0xe4, 0xcc, 0xcf, 0x38, 0xb8, 0xf6, 0x7c, 0x70, 0x83, 0x22, 0x18, 0xfa, 0x93, 0xa2,
	0x72, 0x9a, 0x3b, 0x57, 0xe5, 0x9a, 0x0e, 0x78, 0x28, 0x97, 0xd3, 0x6d, 0x26, 0xa7, 0x6b, 0x50,
	0xfd, 0x89, 0xb2, 0x21, 0x44, 0xc2, 0x0d, 0x21, 0xb2, 0x32, 0xeb, 0x3e, 0x15, 0xd9, 0x3f, 0xb5,
	0xd7, 0x92, 0xc0, 0x3d, 0x68, 0x2c, 0x43, 0xd7, 0x3f, 0xf6, 0x3d, 0x57, 0xd0, 0xf7, 0xb2, 0xb4,
	0x0c, 0x4b, 0xde, 0x07, 0x2d, 0x58, 0x2f, 0x6d, 0xa9, 0xd9, 0x0a, 0x2b, 0xa9, 0x8d, 0xde, 0xbc,
	0xc7, 0xe4, 0x09, 0x6c, 0x04, 0x9e, 0xe7, 0xc6, 0x39, 0x10, 0x49, 0xa1, 0xbb, 0x6c, 0x5d, 0x24,
	0xb0, 0x3f, 0xa1, 0xb8, 0x2c, 0x75, 0xf7, 0x8a, 0xa5, 0x05, 0x05, 0x0f, 0xb9, 0x0f, 0xaa, 0x58,
	0x25, 0x38, 0x11, 0xfc, 0xe8, 0x97, 0x56, 0x31, 0x53, 0x04, 0x2e, 0x90, 0xc3, 0xc9, 0x03, 0x68,
	0x3a, 0xae, 0x8b, 0x5f, 0x32, 0x61, 0x9b, 0x97, 0xb2, 0x07, 0x0c, 0x43, 0x29, 0xc3, 0x74, 0x70,
	0x32, 0x8b, 0x36, 0xf7, 0x68, 0x11, 0xce, 0xcf, 0xb0, 0x4b, 0x75, 0x96, 0xdb, 0xbd, 0x94, 0xfb,
	0x90, 0xc7, 0x31, 0x31, 0x85, 0x92, 0x2f, 0x51, 0x50, 0x7e, 0xe0, 0xc7, 0xa7, 0x98, 0xd6, 0x60,
	0x69, 0x37, 0x2e, 0xa5, 0x3d, 0x12, 0x00, 0xcc, 0xcb, 0xc0, 0xfa, 0x23, 0xd0, 0x8a, 0xed, 0xa0,
	0x05, 0xac, 0xbc, 0x80, 0xd6, 0xf3, 0x2a, 0xec, 0x0a, 0xa8, 0xfe, 0x05, 0xa8, 0x59, 0x43, 0xc8,
	0x2d, 0xe8, 0xcc, 0xd7, 0x51, 0xce, 0x84, 0x2d, 0x6e, 0x60, 0xdb, 0xd2, 0xd0, 0x9f, 0x6d, 0x35,
	0x72, 0xf5, 0x31, 0x40, 0xde, 0x09, 0xf2, 0x36, 0x00, 0xa5, 0x9a, 0x77, 0x43, 0x64, 0xa8, 0xe8,
	0xe1, 0x10, 0xb2, 0x05, 0x4d, 0x1a, 0x7e, 0xe6, 0xf8, 0x8c, 0x18, 0xae, 0x4c, 0x9a, 0xf1, 0x94,
	0x7b, 0x50, 0xcd, 0x75, 0xd1, 0x9b, 0x8b, 0xd8, 0xd2, 0x25, 0xec, 0xef, 0x25, 0x68, 0xa4, 0x1d,
	0x41, 0xc2, 0xf1, 0x76, 0xae, 0xfc, 0xc8, 0x61, 0xba, 0xf9, 0xff, 0x63, 0x4b, 0x68, 0x7a, 0x58,
	0x36, 0x3b, 0x23, 0x2f, 0x5e, 0x2f, 0x12, 0x3b, 0xf6, 0x7f, 0xf5, 0x44, 0x69, 0x1a, 0xf5, 0x5b,
	0xcc, 0x3d, 0x45, 0x2f, 0xad, 0x49, 0x42, 0x32, 0x19, 0xab, 0x16, 0xe4, 0xa0, 0x87, 0x1a, 0xb4,
	0xc4, 0x13, 0x60, 0xd3, 0x07, 0x0a, 0xbb, 0xb3, 0x71, 0x61, 0x8a, 0x3c, 0x67, 0x26, 0xbe, 0x5b,
	0x9c, 0x89, 0x6d, 0xca, 0x7b, 0x96, 0x25, 0x4d, 0x45, 0xfd, 0xdf, 0x12, 0xd4, 0xc5, 0x00, 0x20,
	0x44, 0xcc, 0xb8, 0x12, 0x1b, 0x7b, 0x7c, 0xa2, 0xdd, 0x2c, 0x4c, 0x34, 0x3e, 0x10, 0xe5, 0xa1,
	0x75, 0x43, 0x1a, 0x5a, 0x0a, 0x7f, 0x95, 0xd2, 0x19, 0xb5, 0x29, 0xcf, 0xa8, 0x0a, 0x8b, 0xe5,
	0x23, 0x69, 0x07, 0x6a, 0xe2, 0xc4, 0xf4, 0x2a, 0x69, 0xc5, 0xab, 0x24, 0x0a, 0xea, 0xf3, 0x0e,
	0x58, 0x02, 0xd9, 0xdb, 0x83, 0x1a, 0xf7, 0x10, 0x80, 0xda, 0x78, 0x7f, 0x60, 0x98, 0x46, 0xe7,
	0x0a, 0x4e, 0x24, 0x98, 0xec, 0xcf, 0x6c, 0x61, 0x97, 0xf0, 0x14, 0x1a, 0xb5, 0x07, 0x87, 0xb3,
	0xdd, 0x7d, 0x6b, 0xf4, 0x3d, 0xfa, 0xca, 0xe4, 0x2a, 0x6c, 0x18, 0x83, 0xd9, 0xc0, 0x9e, 0xa2,
	0x6d, 0x8f, 0x47, 0x7b, 0xa3, 0x59, 0x47, 0xe9, 0x3d, 0x85, 0xea, 0x34, 0xc1, 0x29, 0x44, 0xa3,
	0x13, 0xd3, 0x34, 0xa6, 0xb6, 0xf9, 0x9d, 0x39, 0x3c, 0x9c, 0x8d, 0xf6, 0x27, 0xb8, 0x6c, 0x1b,
	0xb5, 0xcb, 0xcd, 0xc9, 0x63, 0x5c, 0x75, 0x03, 0x9a, 0x03, 0xc3, 0xc0, 0x6f, 0xdb, 0x30, 0x0f,
	0xa6, 0xb8, 0x64, 0x13, 0x65, 0x35, 0xde, 0x1f, 0x7e, 0x83, 0xeb, 0x2b, 0xa4, 0x85, 0xb2, 0x19,
	0x4d, 0x46, 0xd3, 0x5d, 0xb4, 0x2a, 0xbd, 0xdf, 0x2a, 0x99, 0xee, 0x51, 0x0a, 0xdb, 0xd2, 0x5b,
	0xd3, 0x29, 0xf0, 0x90, 0xbe, 0x36, 0x1f, 0x42, 0x35, 0xa6, 0x85, 0xb0, 0xf6, 0x6a, 0x7c, 0x38,
	0xe7, 0x20, 0x56, 0xa3, 0xc5, 0x11, 0xe4, 0x83, 0xc2, 0x33, 0x44, 0x8a, 0x48, 0xe9, 0x21, 0x7a,
	0xf1, 0xbf, 0xc2, 0x03, 0xa8, 0x0c, 0xd6, 0xc9, 0xe9, 0x2b, 0x94, 0x85, 0x0f, 0x40, 0x12, 0x9e,
	0x79, 0x01, 0x2b, 0xab, 0x65, 0x71, 0x43, 0x37, 0x5e, 0xf2, 0x38, 0xe0, 0xae, 0x42, 0xaa, 0x42,
	0xec, 0xa9, 0x29, 0x9e, 0x0d, 0x25, 0x7b, 0x36, 0xfe, 0x28, 0xbd, 0xd6, 0xb3, 0xf1, 0x11, 0xbc,
	0x21, 0xff, 0xd2, 0xe4, 0x65, 0xaa, 0x56, 0x47, 0x0a, 0xcc, 0xa8, 0x9f, 0x7c, 0x0a, 0xd7, 0x64,
	0xb0, 0x1f, 0x1c, 0x87, 0xf6, 0x3a, 0x5a, 0x88, 0xab, 0x46, 0xa4, 0xd8, 0x08, 0x43, 0x87, 0xd1,
	0xa2, 0x37, 0x4e, 0x95, 0x81, 0x22, 0x98, 0x0e, 0x91, 0xd4, 0xc3, 0x31, 0x93, 0x1a, 0x72, 0x6e,
	0x1d, 0x4e, 0x26, 0x5c, 0x11, 0xc8, 0xb9, 0x65, 0x3e, 0x31, 0x87, 0x33, 0xa6, 0x30, 0x59, 0x01,
	0x0a, 0x05, 0x0e, 0xad, 0x81, 0x90, 0xc3, 0x9f, 0x25, 0x50, 0x1f, 0xd3, 0x3f, 0x52, 0x76, 0xe0,
	0xcf, 0xa0, 0xc6, 0x9a, 0x15, 0xe3, 0x79, 0x95, 0x74, 0x24, 0x67, 0x61, 0xfe, 0x03, 0x24, 0x7e,
	0x0e, 0x04, 0x90, 0x4e, 0xc0, 0x53, 0xc7, 0xb5, 0xbd, 0x28, 0x0a, 0xa3, 0xf4, 0x0e, 0xaa, 0xe8,
	0x31, 0x99, 0x83, 0x5e, 0x41, 0x1a, 0x5e, 0x86, 0x91, 0x97, 0x5e, 0x41, 0xb4, 0xf7, 0xd0, 0x44,
	0xb2, 0x9a, 0xd2, 0x82, 0xf2, 0x9c, 0x50, 0xf9, 0x9c, 0xd8, 0x2a, 0xce, 0x09, 0x35, 0xfb, 0x07,
	0x93, 0x66, 0xc4, 0x51, 0x8d, 0x51, 0x71, 0xf7, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0x74,
	0x95, 0xe5, 0x58, 0x0b, 0x00, 0x00,
}
