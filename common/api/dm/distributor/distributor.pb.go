// Code generated by protoc-gen-go.
// source: distributor.proto
// DO NOT EDIT!

/*
Package distributor is a generated protocol buffer package.

It is generated from these files:
	distributor.proto

It has these top-level messages:
	Alias
	Distributor
	Config
*/
package distributor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Alias struct {
	OtherConfig string `protobuf:"bytes,1,opt,name=other_config,json=otherConfig" json:"other_config,omitempty"`
}

func (m *Alias) Reset()                    { *m = Alias{} }
func (m *Alias) String() string            { return proto.CompactTextString(m) }
func (*Alias) ProtoMessage()               {}
func (*Alias) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Distributor struct {
	// TODO(iannucci): Maybe something like Any or extensions would be a better
	// fit here? The ultimate goal is that users will be able to use the proto
	// text format for luci-config. I suspect that Any or extensions would lose
	// the ability to validate such text-formatted protobufs, but maybe that's
	// not the case.
	//
	// Types that are valid to be assigned to DistributorType:
	//	*Distributor_Alias
	DistributorType isDistributor_DistributorType `protobuf_oneof:"distributor_type"`
}

func (m *Distributor) Reset()                    { *m = Distributor{} }
func (m *Distributor) String() string            { return proto.CompactTextString(m) }
func (*Distributor) ProtoMessage()               {}
func (*Distributor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isDistributor_DistributorType interface {
	isDistributor_DistributorType()
}

type Distributor_Alias struct {
	Alias *Alias `protobuf:"bytes,1,opt,name=alias,oneof"`
}

func (*Distributor_Alias) isDistributor_DistributorType() {}

func (m *Distributor) GetDistributorType() isDistributor_DistributorType {
	if m != nil {
		return m.DistributorType
	}
	return nil
}

func (m *Distributor) GetAlias() *Alias {
	if x, ok := m.GetDistributorType().(*Distributor_Alias); ok {
		return x.Alias
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Distributor) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Distributor_OneofMarshaler, _Distributor_OneofUnmarshaler, _Distributor_OneofSizer, []interface{}{
		(*Distributor_Alias)(nil),
	}
}

func _Distributor_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Distributor)
	// distributor_type
	switch x := m.DistributorType.(type) {
	case *Distributor_Alias:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Alias); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Distributor.DistributorType has unexpected type %T", x)
	}
	return nil
}

func _Distributor_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Distributor)
	switch tag {
	case 1: // distributor_type.alias
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Alias)
		err := b.DecodeMessage(msg)
		m.DistributorType = &Distributor_Alias{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Distributor_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Distributor)
	// distributor_type
	switch x := m.DistributorType.(type) {
	case *Distributor_Alias:
		s := proto.Size(x.Alias)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Config struct {
	DistributorConfigs map[string]*Distributor `protobuf:"bytes,1,rep,name=distributor_configs,json=distributorConfigs" json:"distributor_configs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Config) GetDistributorConfigs() map[string]*Distributor {
	if m != nil {
		return m.DistributorConfigs
	}
	return nil
}

func init() {
	proto.RegisterType((*Alias)(nil), "distributor.Alias")
	proto.RegisterType((*Distributor)(nil), "distributor.Distributor")
	proto.RegisterType((*Config)(nil), "distributor.Config")
}

func init() { proto.RegisterFile("distributor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xc9, 0x2c, 0x2e,
	0x29, 0xca, 0x4c, 0x2a, 0x2d, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x52, 0xd2, 0xe2, 0x62, 0x75, 0xcc, 0xc9, 0x4c, 0x2c, 0x16, 0x52, 0xe4, 0xe2, 0xc9, 0x2f,
	0xc9, 0x48, 0x2d, 0x8a, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0xe2, 0x06, 0x8b, 0x39, 0x83, 0x85, 0x94, 0xd2, 0xb9, 0xb8, 0x5d, 0x10, 0x5a, 0x85, 0x80,
	0x5a, 0x13, 0x41, 0x5a, 0xc1, 0x4a, 0xb9, 0x8d, 0x84, 0xf4, 0x90, 0xad, 0x02, 0x1b, 0xea, 0xc1,
	0x10, 0x04, 0x51, 0xe2, 0x24, 0xc4, 0x25, 0x80, 0x24, 0x1b, 0x5f, 0x52, 0x59, 0x90, 0xea, 0xc5,
	0xc2, 0xc1, 0x24, 0xc0, 0x0c, 0x24, 0x99, 0x05, 0x58, 0x80, 0x24, 0x8b, 0x00, 0xab, 0x17, 0x1b,
	0x47, 0x83, 0x80, 0x40, 0xa3, 0x80, 0xd2, 0x71, 0x46, 0x2e, 0x36, 0x88, 0x9d, 0x42, 0x31, 0x5c,
	0xc2, 0xc8, 0x1a, 0x21, 0x8e, 0x03, 0x59, 0xc9, 0x0c, 0xb4, 0x52, 0x1b, 0xc5, 0x4a, 0x88, 0x0e,
	0x3d, 0x24, 0x27, 0x42, 0x44, 0x8a, 0x5d, 0xf3, 0x4a, 0x8a, 0x2a, 0x83, 0x84, 0x52, 0x30, 0x24,
	0xa4, 0xe2, 0xb9, 0xc4, 0x71, 0x28, 0x17, 0x12, 0xe0, 0x62, 0xce, 0x4e, 0xad, 0x84, 0x06, 0x03,
	0x88, 0x29, 0xa4, 0xc7, 0xc5, 0x5a, 0x96, 0x98, 0x53, 0x9a, 0x2a, 0xc1, 0x04, 0xf6, 0xaf, 0x04,
	0x8a, 0xe5, 0x48, 0xc6, 0x04, 0x41, 0x94, 0x59, 0x31, 0x59, 0x30, 0x26, 0xb1, 0x81, 0x83, 0xdc,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x27, 0x31, 0xd6, 0x87, 0x01, 0x00, 0x00,
}
