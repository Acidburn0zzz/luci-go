// Code generated by protoc-gen-go.
// source: github.com/luci/luci-go/common/data/text/templateproto/template.proto
// DO NOT EDIT!

/*
Package templateproto is a generated protocol buffer package.

It is generated from these files:
	github.com/luci/luci-go/common/data/text/templateproto/template.proto

It has these top-level messages:
	Value
	Schema
	File
	Specifier
*/
package templateproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/luci/luci-go/common/proto/google"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Value defines a specific value for a parameter, and is used at Template
// expansion time.
type Value struct {
	// Types that are valid to be assigned to Value:
	//	*Value_Int
	//	*Value_Uint
	//	*Value_Float
	//	*Value_Bool
	//	*Value_Str
	//	*Value_Bytes
	//	*Value_Object
	//	*Value_Array
	//	*Value_Null
	Value isValue_Value `protobuf_oneof:"value"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isValue_Value interface {
	isValue_Value()
}

type Value_Int struct {
	Int int64 `protobuf:"varint,1,opt,name=int,oneof"`
}
type Value_Uint struct {
	Uint uint64 `protobuf:"varint,2,opt,name=uint,oneof"`
}
type Value_Float struct {
	Float float64 `protobuf:"fixed64,3,opt,name=float,oneof"`
}
type Value_Bool struct {
	Bool bool `protobuf:"varint,4,opt,name=bool,oneof"`
}
type Value_Str struct {
	Str string `protobuf:"bytes,5,opt,name=str,oneof"`
}
type Value_Bytes struct {
	Bytes []byte `protobuf:"bytes,6,opt,name=bytes,proto3,oneof"`
}
type Value_Object struct {
	Object string `protobuf:"bytes,7,opt,name=object,oneof"`
}
type Value_Array struct {
	Array string `protobuf:"bytes,8,opt,name=array,oneof"`
}
type Value_Null struct {
	Null *google_protobuf.Empty `protobuf:"bytes,9,opt,name=null,oneof"`
}

func (*Value_Int) isValue_Value()    {}
func (*Value_Uint) isValue_Value()   {}
func (*Value_Float) isValue_Value()  {}
func (*Value_Bool) isValue_Value()   {}
func (*Value_Str) isValue_Value()    {}
func (*Value_Bytes) isValue_Value()  {}
func (*Value_Object) isValue_Value() {}
func (*Value_Array) isValue_Value()  {}
func (*Value_Null) isValue_Value()   {}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Value) GetInt() int64 {
	if x, ok := m.GetValue().(*Value_Int); ok {
		return x.Int
	}
	return 0
}

func (m *Value) GetUint() uint64 {
	if x, ok := m.GetValue().(*Value_Uint); ok {
		return x.Uint
	}
	return 0
}

func (m *Value) GetFloat() float64 {
	if x, ok := m.GetValue().(*Value_Float); ok {
		return x.Float
	}
	return 0
}

func (m *Value) GetBool() bool {
	if x, ok := m.GetValue().(*Value_Bool); ok {
		return x.Bool
	}
	return false
}

func (m *Value) GetStr() string {
	if x, ok := m.GetValue().(*Value_Str); ok {
		return x.Str
	}
	return ""
}

func (m *Value) GetBytes() []byte {
	if x, ok := m.GetValue().(*Value_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (m *Value) GetObject() string {
	if x, ok := m.GetValue().(*Value_Object); ok {
		return x.Object
	}
	return ""
}

func (m *Value) GetArray() string {
	if x, ok := m.GetValue().(*Value_Array); ok {
		return x.Array
	}
	return ""
}

func (m *Value) GetNull() *google_protobuf.Empty {
	if x, ok := m.GetValue().(*Value_Null); ok {
		return x.Null
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_Int)(nil),
		(*Value_Uint)(nil),
		(*Value_Float)(nil),
		(*Value_Bool)(nil),
		(*Value_Str)(nil),
		(*Value_Bytes)(nil),
		(*Value_Object)(nil),
		(*Value_Array)(nil),
		(*Value_Null)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// value
	switch x := m.Value.(type) {
	case *Value_Int:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int))
	case *Value_Uint:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Uint))
	case *Value_Float:
		b.EncodeVarint(3<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Float))
	case *Value_Bool:
		t := uint64(0)
		if x.Bool {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Value_Str:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Str)
	case *Value_Bytes:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Bytes)
	case *Value_Object:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Object)
	case *Value_Array:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Array)
	case *Value_Null:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Null); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Value.Value has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 1: // value.int
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Value_Int{int64(x)}
		return true, err
	case 2: // value.uint
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Value_Uint{x}
		return true, err
	case 3: // value.float
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Value_Float{math.Float64frombits(x)}
		return true, err
	case 4: // value.bool
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Value_Bool{x != 0}
		return true, err
	case 5: // value.str
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Value_Str{x}
		return true, err
	case 6: // value.bytes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &Value_Bytes{x}
		return true, err
	case 7: // value.object
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Value_Object{x}
		return true, err
	case 8: // value.array
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Value_Array{x}
		return true, err
	case 9: // value.null
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Empty)
		err := b.DecodeMessage(msg)
		m.Value = &Value_Null{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// value
	switch x := m.Value.(type) {
	case *Value_Int:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int))
	case *Value_Uint:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Uint))
	case *Value_Float:
		n += proto.SizeVarint(3<<3 | proto.WireFixed64)
		n += 8
	case *Value_Bool:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case *Value_Str:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Str)))
		n += len(x.Str)
	case *Value_Bytes:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Bytes)))
		n += len(x.Bytes)
	case *Value_Object:
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Object)))
		n += len(x.Object)
	case *Value_Array:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Array)))
		n += len(x.Array)
	case *Value_Null:
		s := proto.Size(x.Null)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Schema struct {
	// Types that are valid to be assigned to Schema:
	//	*Schema_Int
	//	*Schema_Uint
	//	*Schema_Float
	//	*Schema_Bool
	//	*Schema_Str
	//	*Schema_Bytes
	//	*Schema_Enum
	//	*Schema_Object
	//	*Schema_Array
	Schema isSchema_Schema `protobuf_oneof:"schema"`
}

func (m *Schema) Reset()                    { *m = Schema{} }
func (m *Schema) String() string            { return proto.CompactTextString(m) }
func (*Schema) ProtoMessage()               {}
func (*Schema) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isSchema_Schema interface {
	isSchema_Schema()
}

type Schema_Int struct {
	Int *Schema_Atom `protobuf:"bytes,1,opt,name=int,oneof"`
}
type Schema_Uint struct {
	Uint *Schema_Atom `protobuf:"bytes,2,opt,name=uint,oneof"`
}
type Schema_Float struct {
	Float *Schema_Atom `protobuf:"bytes,3,opt,name=float,oneof"`
}
type Schema_Bool struct {
	Bool *Schema_Atom `protobuf:"bytes,4,opt,name=bool,oneof"`
}
type Schema_Str struct {
	Str *Schema_Sequence `protobuf:"bytes,5,opt,name=str,oneof"`
}
type Schema_Bytes struct {
	Bytes *Schema_Sequence `protobuf:"bytes,6,opt,name=bytes,oneof"`
}
type Schema_Enum struct {
	Enum *Schema_Set `protobuf:"bytes,7,opt,name=enum,oneof"`
}
type Schema_Object struct {
	Object *Schema_JSON `protobuf:"bytes,8,opt,name=object,oneof"`
}
type Schema_Array struct {
	Array *Schema_JSON `protobuf:"bytes,9,opt,name=array,oneof"`
}

func (*Schema_Int) isSchema_Schema()    {}
func (*Schema_Uint) isSchema_Schema()   {}
func (*Schema_Float) isSchema_Schema()  {}
func (*Schema_Bool) isSchema_Schema()   {}
func (*Schema_Str) isSchema_Schema()    {}
func (*Schema_Bytes) isSchema_Schema()  {}
func (*Schema_Enum) isSchema_Schema()   {}
func (*Schema_Object) isSchema_Schema() {}
func (*Schema_Array) isSchema_Schema()  {}

func (m *Schema) GetSchema() isSchema_Schema {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *Schema) GetInt() *Schema_Atom {
	if x, ok := m.GetSchema().(*Schema_Int); ok {
		return x.Int
	}
	return nil
}

func (m *Schema) GetUint() *Schema_Atom {
	if x, ok := m.GetSchema().(*Schema_Uint); ok {
		return x.Uint
	}
	return nil
}

func (m *Schema) GetFloat() *Schema_Atom {
	if x, ok := m.GetSchema().(*Schema_Float); ok {
		return x.Float
	}
	return nil
}

func (m *Schema) GetBool() *Schema_Atom {
	if x, ok := m.GetSchema().(*Schema_Bool); ok {
		return x.Bool
	}
	return nil
}

func (m *Schema) GetStr() *Schema_Sequence {
	if x, ok := m.GetSchema().(*Schema_Str); ok {
		return x.Str
	}
	return nil
}

func (m *Schema) GetBytes() *Schema_Sequence {
	if x, ok := m.GetSchema().(*Schema_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (m *Schema) GetEnum() *Schema_Set {
	if x, ok := m.GetSchema().(*Schema_Enum); ok {
		return x.Enum
	}
	return nil
}

func (m *Schema) GetObject() *Schema_JSON {
	if x, ok := m.GetSchema().(*Schema_Object); ok {
		return x.Object
	}
	return nil
}

func (m *Schema) GetArray() *Schema_JSON {
	if x, ok := m.GetSchema().(*Schema_Array); ok {
		return x.Array
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Schema) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Schema_OneofMarshaler, _Schema_OneofUnmarshaler, _Schema_OneofSizer, []interface{}{
		(*Schema_Int)(nil),
		(*Schema_Uint)(nil),
		(*Schema_Float)(nil),
		(*Schema_Bool)(nil),
		(*Schema_Str)(nil),
		(*Schema_Bytes)(nil),
		(*Schema_Enum)(nil),
		(*Schema_Object)(nil),
		(*Schema_Array)(nil),
	}
}

func _Schema_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Schema)
	// schema
	switch x := m.Schema.(type) {
	case *Schema_Int:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int); err != nil {
			return err
		}
	case *Schema_Uint:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Uint); err != nil {
			return err
		}
	case *Schema_Float:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Float); err != nil {
			return err
		}
	case *Schema_Bool:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bool); err != nil {
			return err
		}
	case *Schema_Str:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Str); err != nil {
			return err
		}
	case *Schema_Bytes:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bytes); err != nil {
			return err
		}
	case *Schema_Enum:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Enum); err != nil {
			return err
		}
	case *Schema_Object:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Object); err != nil {
			return err
		}
	case *Schema_Array:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Array); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Schema.Schema has unexpected type %T", x)
	}
	return nil
}

func _Schema_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Schema)
	switch tag {
	case 1: // schema.int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Schema_Atom)
		err := b.DecodeMessage(msg)
		m.Schema = &Schema_Int{msg}
		return true, err
	case 2: // schema.uint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Schema_Atom)
		err := b.DecodeMessage(msg)
		m.Schema = &Schema_Uint{msg}
		return true, err
	case 3: // schema.float
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Schema_Atom)
		err := b.DecodeMessage(msg)
		m.Schema = &Schema_Float{msg}
		return true, err
	case 4: // schema.bool
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Schema_Atom)
		err := b.DecodeMessage(msg)
		m.Schema = &Schema_Bool{msg}
		return true, err
	case 5: // schema.str
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Schema_Sequence)
		err := b.DecodeMessage(msg)
		m.Schema = &Schema_Str{msg}
		return true, err
	case 6: // schema.bytes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Schema_Sequence)
		err := b.DecodeMessage(msg)
		m.Schema = &Schema_Bytes{msg}
		return true, err
	case 7: // schema.enum
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Schema_Set)
		err := b.DecodeMessage(msg)
		m.Schema = &Schema_Enum{msg}
		return true, err
	case 8: // schema.object
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Schema_JSON)
		err := b.DecodeMessage(msg)
		m.Schema = &Schema_Object{msg}
		return true, err
	case 9: // schema.array
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Schema_JSON)
		err := b.DecodeMessage(msg)
		m.Schema = &Schema_Array{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Schema_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Schema)
	// schema
	switch x := m.Schema.(type) {
	case *Schema_Int:
		s := proto.Size(x.Int)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Schema_Uint:
		s := proto.Size(x.Uint)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Schema_Float:
		s := proto.Size(x.Float)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Schema_Bool:
		s := proto.Size(x.Bool)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Schema_Str:
		s := proto.Size(x.Str)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Schema_Bytes:
		s := proto.Size(x.Bytes)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Schema_Enum:
		s := proto.Size(x.Enum)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Schema_Object:
		s := proto.Size(x.Object)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Schema_Array:
		s := proto.Size(x.Array)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Schema_Set struct {
	// entry lists the possible tokens that this set can have.
	Entry []*Schema_Set_Entry `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
}

func (m *Schema_Set) Reset()                    { *m = Schema_Set{} }
func (m *Schema_Set) String() string            { return proto.CompactTextString(m) }
func (*Schema_Set) ProtoMessage()               {}
func (*Schema_Set) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Schema_Set) GetEntry() []*Schema_Set_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type Schema_Set_Entry struct {
	// Markdown-formatted documentation for this schema entry.
	Doc   string `protobuf:"bytes,1,opt,name=doc" json:"doc,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *Schema_Set_Entry) Reset()                    { *m = Schema_Set_Entry{} }
func (m *Schema_Set_Entry) String() string            { return proto.CompactTextString(m) }
func (*Schema_Set_Entry) ProtoMessage()               {}
func (*Schema_Set_Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0, 0} }

type Schema_JSON struct {
	// restricts the maximum amount of bytes that a Value for this field may
	// take.
	MaxLength uint32 `protobuf:"varint,1,opt,name=max_length,json=maxLength" json:"max_length,omitempty"`
}

func (m *Schema_JSON) Reset()                    { *m = Schema_JSON{} }
func (m *Schema_JSON) String() string            { return proto.CompactTextString(m) }
func (*Schema_JSON) ProtoMessage()               {}
func (*Schema_JSON) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

type Schema_Sequence struct {
	// restricts the maximum amount of bytes that a Value for this field may
	// take.
	MaxLength uint32 `protobuf:"varint,1,opt,name=max_length,json=maxLength" json:"max_length,omitempty"`
}

func (m *Schema_Sequence) Reset()                    { *m = Schema_Sequence{} }
func (m *Schema_Sequence) String() string            { return proto.CompactTextString(m) }
func (*Schema_Sequence) ProtoMessage()               {}
func (*Schema_Sequence) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 2} }

type Schema_Atom struct {
}

func (m *Schema_Atom) Reset()                    { *m = Schema_Atom{} }
func (m *Schema_Atom) String() string            { return proto.CompactTextString(m) }
func (*Schema_Atom) ProtoMessage()               {}
func (*Schema_Atom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 3} }

// File represents a file full of template definitions.
type File struct {
	Template map[string]*File_Template `protobuf:"bytes,1,rep,name=template" json:"template,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *File) GetTemplate() map[string]*File_Template {
	if m != nil {
		return m.Template
	}
	return nil
}

// Template defines a single template.
type File_Template struct {
	// Markdown-formatted documentation for this schema entry.
	Doc string `protobuf:"bytes,1,opt,name=doc" json:"doc,omitempty"`
	// body is the main JSON output for this template. It must have the form
	// of valid json, modulo the substitution parameters. In order for this
	// Template to be valid, body must parse as valid JSON, after all
	// substitutions have been applied.
	Body string `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	// param is a listing of all of the parameterized bits in the Template body.
	// The key must match the regex /\${[^}]+}/. So "${foo}" would be ok, but
	// "foo", "$foo", or "${}" would not.
	//
	// params provided here must be present in Body at least once in order
	// for the Template to be valid.
	Param map[string]*File_Template_Parameter `protobuf:"bytes,3,rep,name=param" json:"param,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *File_Template) Reset()                    { *m = File_Template{} }
func (m *File_Template) String() string            { return proto.CompactTextString(m) }
func (*File_Template) ProtoMessage()               {}
func (*File_Template) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *File_Template) GetParam() map[string]*File_Template_Parameter {
	if m != nil {
		return m.Param
	}
	return nil
}

type File_Template_Parameter struct {
	// Markdown-formatted documentation for this schema entry.
	Doc     string `protobuf:"bytes,1,opt,name=doc" json:"doc,omitempty"`
	Default *Value `protobuf:"bytes,2,opt,name=default" json:"default,omitempty"`
	// nullable indicates if 'null' is a valid value for this parameter. This
	// can be used to distinguish e.g. "" from not-supplied. If default is
	// Value{null: {}}, this must be true.
	Nullable bool    `protobuf:"varint,3,opt,name=nullable" json:"nullable,omitempty"`
	Schema   *Schema `protobuf:"bytes,4,opt,name=schema" json:"schema,omitempty"`
}

func (m *File_Template_Parameter) Reset()                    { *m = File_Template_Parameter{} }
func (m *File_Template_Parameter) String() string            { return proto.CompactTextString(m) }
func (*File_Template_Parameter) ProtoMessage()               {}
func (*File_Template_Parameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0, 0} }

func (m *File_Template_Parameter) GetDefault() *Value {
	if m != nil {
		return m.Default
	}
	return nil
}

func (m *File_Template_Parameter) GetSchema() *Schema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type Specifier struct {
	TemplateName string            `protobuf:"bytes,1,opt,name=template_name,json=templateName" json:"template_name,omitempty"`
	Params       map[string]*Value `protobuf:"bytes,2,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Specifier) Reset()                    { *m = Specifier{} }
func (m *Specifier) String() string            { return proto.CompactTextString(m) }
func (*Specifier) ProtoMessage()               {}
func (*Specifier) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Specifier) GetParams() map[string]*Value {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*Value)(nil), "templateproto.Value")
	proto.RegisterType((*Schema)(nil), "templateproto.Schema")
	proto.RegisterType((*Schema_Set)(nil), "templateproto.Schema.Set")
	proto.RegisterType((*Schema_Set_Entry)(nil), "templateproto.Schema.Set.Entry")
	proto.RegisterType((*Schema_JSON)(nil), "templateproto.Schema.JSON")
	proto.RegisterType((*Schema_Sequence)(nil), "templateproto.Schema.Sequence")
	proto.RegisterType((*Schema_Atom)(nil), "templateproto.Schema.Atom")
	proto.RegisterType((*File)(nil), "templateproto.File")
	proto.RegisterType((*File_Template)(nil), "templateproto.File.Template")
	proto.RegisterType((*File_Template_Parameter)(nil), "templateproto.File.Template.Parameter")
	proto.RegisterType((*Specifier)(nil), "templateproto.Specifier")
}

func init() {
	proto.RegisterFile("github.com/luci/luci-go/common/data/text/templateproto/template.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0x25, 0x8d, 0xed, 0xda, 0x93, 0x56, 0x42, 0xab, 0x52, 0x19, 0x73, 0x0f, 0x77, 0x44, 0xed,
	0xca, 0x5c, 0x84, 0x10, 0x3c, 0x50, 0xa9, 0x08, 0x21, 0xd4, 0x22, 0x07, 0x21, 0xf1, 0x54, 0x6c,
	0x67, 0x93, 0x86, 0xda, 0xde, 0xe0, 0xac, 0x51, 0xf3, 0x15, 0xbc, 0xf2, 0x0d, 0xfc, 0x04, 0x3f,
	0xc4, 0x23, 0x1f, 0xc0, 0xce, 0x7a, 0x9d, 0x38, 0x95, 0xdb, 0xf4, 0xc5, 0xf2, 0x1c, 0x9f, 0xd9,
	0x99, 0x73, 0x8e, 0x6d, 0xd8, 0x1d, 0x8e, 0xf8, 0x61, 0x11, 0xb9, 0x31, 0x4b, 0xbd, 0xa4, 0x88,
	0x47, 0xf2, 0xb2, 0x35, 0x64, 0x9e, 0x00, 0x52, 0x96, 0x79, 0xfd, 0x90, 0x87, 0x1e, 0xa7, 0xc7,
	0x5c, 0x5c, 0xd2, 0x71, 0x12, 0x72, 0x3a, 0xce, 0x19, 0x67, 0xb3, 0xca, 0x95, 0x25, 0x59, 0x5f,
	0x78, 0xea, 0x5c, 0x19, 0x32, 0x36, 0x4c, 0xa8, 0x27, 0xab, 0xa8, 0x18, 0x78, 0xe2, 0x29, 0x9f,
	0x96, 0xdc, 0xee, 0xbf, 0x16, 0xe8, 0x9f, 0xc3, 0xa4, 0xa0, 0x84, 0x40, 0x7b, 0x94, 0x71, 0xbb,
	0x75, 0xb3, 0xf5, 0xa0, 0xfd, 0xee, 0x42, 0x80, 0x05, 0xd9, 0x00, 0xad, 0x40, 0x70, 0x45, 0x80,
	0x9a, 0x00, 0x65, 0x45, 0x36, 0x41, 0x1f, 0x24, 0x2c, 0xe4, 0x76, 0x5b, 0xc0, 0x2d, 0x01, 0x97,
	0x25, 0xb2, 0x23, 0xc6, 0x12, 0x5b, 0x13, 0xb0, 0x89, 0x6c, 0xac, 0xf0, 0xdc, 0x09, 0xcf, 0x6d,
	0x5d, 0x80, 0x16, 0x9e, 0x2b, 0x0a, 0x3c, 0x21, 0x9a, 0x72, 0x3a, 0xb1, 0x0d, 0x81, 0xae, 0xe1,
	0x09, 0xb2, 0x24, 0x36, 0x18, 0x2c, 0xfa, 0x46, 0x63, 0x6e, 0xaf, 0x2a, 0xba, 0xaa, 0xb1, 0x23,
	0xcc, 0xf3, 0x70, 0x6a, 0x9b, 0xea, 0x41, 0x59, 0x92, 0xc7, 0xa0, 0x65, 0x45, 0x92, 0xd8, 0x96,
	0x80, 0x3b, 0xfe, 0xa6, 0x5b, 0x6a, 0x75, 0x2b, 0xad, 0xee, 0x2e, 0x6a, 0xc5, 0x5d, 0x90, 0xb5,
	0xb3, 0x0a, 0xfa, 0x0f, 0x14, 0xdb, 0xfd, 0xad, 0x83, 0xd1, 0x8b, 0x0f, 0x69, 0x1a, 0x12, 0x77,
	0xae, 0xbb, 0xe3, 0x3b, 0xee, 0x82, 0x77, 0x6e, 0xc9, 0x71, 0xdf, 0x70, 0x96, 0x56, 0x9e, 0x6c,
	0xd7, 0x3c, 0x59, 0xd6, 0x50, 0xfa, 0xe5, 0xd7, 0xfd, 0x5a, 0xd6, 0xa2, 0xbc, 0xdc, 0xae, 0x79,
	0xb9, 0x74, 0x8a, 0xf4, 0xd9, 0x9f, 0xfb, 0xdc, 0xf1, 0xaf, 0x37, 0x37, 0xf4, 0xe8, 0xf7, 0x82,
	0x66, 0x31, 0xad, 0x72, 0x78, 0x5e, 0xcf, 0xe1, 0x3c, 0x5d, 0x2a, 0x27, 0x0f, 0x34, 0x9a, 0x15,
	0xa9, 0x4c, 0xa9, 0xe3, 0x5f, 0x3e, 0xad, 0x8d, 0xe3, 0x72, 0x48, 0x24, 0x4f, 0x67, 0xc1, 0x9a,
	0x67, 0x09, 0x7a, 0xdf, 0xdb, 0xdf, 0xab, 0x85, 0xee, 0x57, 0xa1, 0x5b, 0xe7, 0x68, 0x2a, 0xa9,
	0x4e, 0x0a, 0x6d, 0x31, 0x98, 0x3c, 0x03, 0x9d, 0x66, 0x3c, 0x9f, 0x8a, 0x5c, 0xdb, 0xa2, 0xf5,
	0xc6, 0xa9, 0x2b, 0xba, 0xbb, 0x48, 0x0b, 0x4a, 0xb6, 0xe3, 0x81, 0x2e, 0x6b, 0x72, 0x11, 0xda,
	0x7d, 0x16, 0xcb, 0xb7, 0xc2, 0x0a, 0xf0, 0x56, 0xbc, 0xdd, 0x3a, 0x67, 0x47, 0x34, 0x93, 0xc1,
	0x5b, 0x41, 0x59, 0x38, 0x77, 0x41, 0xc3, 0xf9, 0xe4, 0x1a, 0x40, 0x1a, 0x1e, 0x1f, 0x24, 0x34,
	0x1b, 0xf2, 0x43, 0xd9, 0xb6, 0x1e, 0x58, 0x02, 0xf9, 0x20, 0x01, 0xe7, 0x21, 0x98, 0x95, 0x8b,
	0xcb, 0xa8, 0x06, 0x68, 0x98, 0xeb, 0x8e, 0x09, 0xc6, 0x44, 0x6e, 0xd9, 0xfd, 0xa9, 0x81, 0xf6,
	0x76, 0x94, 0x50, 0xf2, 0x1a, 0xcc, 0x4a, 0x86, 0xd2, 0x75, 0xeb, 0x84, 0x2e, 0xa4, 0xb9, 0x9f,
	0x14, 0x54, 0x2a, 0x9b, 0xb5, 0x38, 0x7f, 0x57, 0xc0, 0xac, 0x9e, 0x35, 0x08, 0x24, 0xf8, 0xca,
	0xf5, 0xa7, 0x4a, 0x9f, 0xbc, 0x17, 0x13, 0xf5, 0x71, 0x98, 0x87, 0xa9, 0x78, 0x75, 0x71, 0xdc,
	0xfd, 0xb3, 0xc6, 0xb9, 0x1f, 0x91, 0xa9, 0xec, 0x94, 0x5d, 0xce, 0xaf, 0x16, 0x58, 0x12, 0xa5,
	0x9c, 0xe6, 0x0d, 0x23, 0x5d, 0x58, 0xed, 0xd3, 0x41, 0x58, 0x24, 0xd5, 0xe7, 0xb4, 0x71, 0x62,
	0x80, 0xfc, 0x35, 0x05, 0x15, 0x89, 0x38, 0x60, 0xe2, 0x77, 0x1c, 0x46, 0x09, 0x95, 0x1f, 0x93,
	0x19, 0xcc, 0x6a, 0xb2, 0x55, 0xf9, 0xa5, 0xbe, 0x99, 0x4b, 0x8d, 0x91, 0x07, 0x8a, 0xe4, 0x7c,
	0x05, 0x98, 0xef, 0x8b, 0xab, 0x1d, 0xd1, 0x69, 0xb5, 0x9a, 0xb8, 0x25, 0xaf, 0xd4, 0xaf, 0x42,
	0x2d, 0x76, 0x6f, 0xb9, 0x72, 0xd4, 0x18, 0x94, 0x4d, 0x2f, 0x57, 0x5e, 0xb4, 0x9c, 0x2f, 0xb0,
	0xbe, 0x90, 0x44, 0xc3, 0x10, 0x7f, 0x71, 0xc8, 0xd5, 0xb3, 0x86, 0xd4, 0x8e, 0xee, 0xfe, 0x11,
	0xbe, 0xf6, 0xc6, 0x34, 0x1e, 0x0d, 0x46, 0xc2, 0xd7, 0xdb, 0x30, 0xfb, 0xe3, 0x1f, 0x64, 0x62,
	0x0f, 0x35, 0x61, 0xad, 0x02, 0xf7, 0x04, 0x26, 0xf4, 0x18, 0x32, 0x93, 0x89, 0x98, 0x85, 0x51,
	0xde, 0x39, 0x69, 0x4f, 0x75, 0x5c, 0x29, 0x66, 0x52, 0xe6, 0xa8, 0x7a, 0x9c, 0x7d, 0xe8, 0xd4,
	0xe0, 0x06, 0x25, 0x8f, 0x16, 0x95, 0x34, 0xe7, 0x38, 0x57, 0x10, 0x19, 0x12, 0x7f, 0xf2, 0x3f,
	0x00, 0x00, 0xff, 0xff, 0xd8, 0x6d, 0x3f, 0xb0, 0xf3, 0x06, 0x00, 0x00,
}
