// Code generated by svcdec; DO NOT EDIT

package logdog

import (
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
)

type DecoratedLogs struct {
	// Service is the service to decorate.
	Service LogsServer
	// Prelude is called in each method before forwarding the call to Service.
	// If Prelude returns an error, it is returned without forwarding the call.
	Prelude func(c context.Context, methodName string, req proto.Message) (context.Context, error)
}

func (s *DecoratedLogs) Get(c context.Context, req *GetRequest) (*GetResponse, error) {
	c, err := s.Prelude(c, "Get", req)
	if err != nil {
		return nil, err
	}
	return s.Service.Get(c, req)
}

func (s *DecoratedLogs) Tail(c context.Context, req *TailRequest) (*GetResponse, error) {
	c, err := s.Prelude(c, "Tail", req)
	if err != nil {
		return nil, err
	}
	return s.Service.Tail(c, req)
}

func (s *DecoratedLogs) Query(c context.Context, req *QueryRequest) (*QueryResponse, error) {
	c, err := s.Prelude(c, "Query", req)
	if err != nil {
		return nil, err
	}
	return s.Service.Query(c, req)
}

func (s *DecoratedLogs) List(c context.Context, req *ListRequest) (*ListResponse, error) {
	c, err := s.Prelude(c, "List", req)
	if err != nil {
		return nil, err
	}
	return s.Service.List(c, req)
}
