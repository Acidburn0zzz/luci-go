// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/logdog/api/endpoints/coordinator/services/v1/service.proto

/*
Package logdog is a generated protocol buffer package.

It is generated from these files:
	go.chromium.org/luci/logdog/api/endpoints/coordinator/services/v1/service.proto
	go.chromium.org/luci/logdog/api/endpoints/coordinator/services/v1/state.proto
	go.chromium.org/luci/logdog/api/endpoints/coordinator/services/v1/tasks.proto

It has these top-level messages:
	Error
	GetConfigResponse
	RegisterStreamRequest
	RegisterStreamResponse
	LoadStreamRequest
	LoadStreamResponse
	TerminateStreamRequest
	ArchiveStreamRequest
	BatchRequest
	BatchResponse
	LogStreamState
	ArchiveDispatchTask
	ArchiveTask
*/
package logdog

import prpc "go.chromium.org/luci/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Error is a projection of a gRPC error.
//
// NOTE: This and its helper functions may be useful more generally. Maybe
// transplant this to a more general place such as "//grpc" if it ends up being
// useful.
type Error struct {
	// The gRPC code for this error.
	GrpcCode int32 `protobuf:"varint,1,opt,name=grpc_code,json=grpcCode" json:"grpc_code,omitempty"`
	// Transient is true if this is a transient error.
	Transient bool `protobuf:"varint,2,opt,name=transient" json:"transient,omitempty"`
	// An optional associated message.
	Msg string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Error) GetGrpcCode() int32 {
	if m != nil {
		return m.GrpcCode
	}
	return 0
}

func (m *Error) GetTransient() bool {
	if m != nil {
		return m.Transient
	}
	return false
}

func (m *Error) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// GetConfigResponse is the response structure for the user
// "GetConfig" endpoint.
type GetConfigResponse struct {
	// The API URL of the base "luci-config" service. If empty, the default
	// service URL will be used.
	ConfigServiceUrl string `protobuf:"bytes,1,opt,name=config_service_url,json=configServiceUrl" json:"config_service_url,omitempty"`
	// The name of the configuration set to load from.
	ConfigSet string `protobuf:"bytes,2,opt,name=config_set,json=configSet" json:"config_set,omitempty"`
	// The path of the text-serialized service configuration protobuf.
	ServiceConfigPath string `protobuf:"bytes,3,opt,name=service_config_path,json=serviceConfigPath" json:"service_config_path,omitempty"`
	// The host name of the configuration service. This is preferred to
	// "config_service_url".
	ConfigServiceHost string `protobuf:"bytes,4,opt,name=config_service_host,json=configServiceHost" json:"config_service_host,omitempty"`
}

func (m *GetConfigResponse) Reset()                    { *m = GetConfigResponse{} }
func (m *GetConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*GetConfigResponse) ProtoMessage()               {}
func (*GetConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetConfigResponse) GetConfigServiceUrl() string {
	if m != nil {
		return m.ConfigServiceUrl
	}
	return ""
}

func (m *GetConfigResponse) GetConfigSet() string {
	if m != nil {
		return m.ConfigSet
	}
	return ""
}

func (m *GetConfigResponse) GetServiceConfigPath() string {
	if m != nil {
		return m.ServiceConfigPath
	}
	return ""
}

func (m *GetConfigResponse) GetConfigServiceHost() string {
	if m != nil {
		return m.ConfigServiceHost
	}
	return ""
}

// RegisterStreamRequest is the set of caller-supplied data for the
// RegisterStream Coordinator service endpoint.
type RegisterStreamRequest struct {
	// The log stream's project.
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	// The log stream's secret.
	Secret []byte `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// The protobuf version string for this stream.
	ProtoVersion string `protobuf:"bytes,3,opt,name=proto_version,json=protoVersion" json:"proto_version,omitempty"`
	// The serialized LogStreamDescriptor protobuf for this stream.
	Desc []byte `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	// The stream's terminal index. If >= 0, the terminal index will be set
	// in the registration request, avoiding the need for an additional
	// termination RPC.
	TerminalIndex int64 `protobuf:"varint,5,opt,name=terminal_index,json=terminalIndex" json:"terminal_index,omitempty"`
}

func (m *RegisterStreamRequest) Reset()                    { *m = RegisterStreamRequest{} }
func (m *RegisterStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterStreamRequest) ProtoMessage()               {}
func (*RegisterStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterStreamRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *RegisterStreamRequest) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *RegisterStreamRequest) GetProtoVersion() string {
	if m != nil {
		return m.ProtoVersion
	}
	return ""
}

func (m *RegisterStreamRequest) GetDesc() []byte {
	if m != nil {
		return m.Desc
	}
	return nil
}

func (m *RegisterStreamRequest) GetTerminalIndex() int64 {
	if m != nil {
		return m.TerminalIndex
	}
	return 0
}

// The response message for the RegisterStream RPC.
type RegisterStreamResponse struct {
	// The Coordinator ID of the log stream.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The state of the requested log stream.
	State *LogStreamState `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	// Error is the error response.
	Error *Error `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *RegisterStreamResponse) Reset()                    { *m = RegisterStreamResponse{} }
func (m *RegisterStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterStreamResponse) ProtoMessage()               {}
func (*RegisterStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RegisterStreamResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RegisterStreamResponse) GetState() *LogStreamState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *RegisterStreamResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// LoadStreamRequest loads the current state of a log stream.
type LoadStreamRequest struct {
	// The log stream's project.
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	// The log stream's path Coordinator ID.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// If true, include the log stream descriptor.
	Desc bool `protobuf:"varint,3,opt,name=desc" json:"desc,omitempty"`
}

func (m *LoadStreamRequest) Reset()                    { *m = LoadStreamRequest{} }
func (m *LoadStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*LoadStreamRequest) ProtoMessage()               {}
func (*LoadStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LoadStreamRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *LoadStreamRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LoadStreamRequest) GetDesc() bool {
	if m != nil {
		return m.Desc
	}
	return false
}

// The response message for the LoadStream RPC.
type LoadStreamResponse struct {
	// The state of the requested log stream.
	State *LogStreamState `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	// If requested, the serialized log stream descriptor. The protobuf version
	// of this descriptor will match the "proto_version" field in "state".
	Desc []byte `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// The age of the log stream.
	Age *google_protobuf.Duration `protobuf:"bytes,3,opt,name=age" json:"age,omitempty"`
	// The archival key of the log stream. If this key doesn't match the key in
	// the archival request, the request is superfluous and should be deleted.
	ArchivalKey []byte `protobuf:"bytes,4,opt,name=archival_key,json=archivalKey,proto3" json:"archival_key,omitempty"`
}

func (m *LoadStreamResponse) Reset()                    { *m = LoadStreamResponse{} }
func (m *LoadStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*LoadStreamResponse) ProtoMessage()               {}
func (*LoadStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LoadStreamResponse) GetState() *LogStreamState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *LoadStreamResponse) GetDesc() []byte {
	if m != nil {
		return m.Desc
	}
	return nil
}

func (m *LoadStreamResponse) GetAge() *google_protobuf.Duration {
	if m != nil {
		return m.Age
	}
	return nil
}

func (m *LoadStreamResponse) GetArchivalKey() []byte {
	if m != nil {
		return m.ArchivalKey
	}
	return nil
}

// TerminateStreamRequest is the set of caller-supplied data for the
// TerminateStream service endpoint.
type TerminateStreamRequest struct {
	// The log stream's project.
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	// The log stream's path Coordinator ID.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// The log stream's secret.
	Secret []byte `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	// The terminal index of the stream.
	TerminalIndex int64 `protobuf:"varint,4,opt,name=terminal_index,json=terminalIndex" json:"terminal_index,omitempty"`
}

func (m *TerminateStreamRequest) Reset()                    { *m = TerminateStreamRequest{} }
func (m *TerminateStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*TerminateStreamRequest) ProtoMessage()               {}
func (*TerminateStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TerminateStreamRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *TerminateStreamRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TerminateStreamRequest) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *TerminateStreamRequest) GetTerminalIndex() int64 {
	if m != nil {
		return m.TerminalIndex
	}
	return 0
}

// ArchiveStreamRequest is the set of caller-supplied data for the ArchiveStream
// service endpoint.
type ArchiveStreamRequest struct {
	// The log stream's project.
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	// The Coordinator ID of the log stream that was archived.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// The number of log entries that were archived.
	LogEntryCount int64 `protobuf:"varint,3,opt,name=log_entry_count,json=logEntryCount" json:"log_entry_count,omitempty"`
	// The highest log stream index that was archived.
	TerminalIndex int64 `protobuf:"varint,4,opt,name=terminal_index,json=terminalIndex" json:"terminal_index,omitempty"`
	// If not empty, there was an archival error.
	//
	// This field serves to indicate that an error occured (being non-empty) and
	// to supply an value that will show up in the Coordinator ArchiveStream
	// endpoint logs.
	Error string `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
	// The archive URL of the log stream's stream data.
	StreamUrl string `protobuf:"bytes,10,opt,name=stream_url,json=streamUrl" json:"stream_url,omitempty"`
	// The size of the log stream's stream data.
	StreamSize int64 `protobuf:"varint,11,opt,name=stream_size,json=streamSize" json:"stream_size,omitempty"`
	// The archive URL of the log stream's index data.
	IndexUrl string `protobuf:"bytes,20,opt,name=index_url,json=indexUrl" json:"index_url,omitempty"`
	// The size of the log stream's index data.
	IndexSize int64 `protobuf:"varint,21,opt,name=index_size,json=indexSize" json:"index_size,omitempty"`
	// The archive URL of the log stream's binary data.
	DataUrl string `protobuf:"bytes,30,opt,name=data_url,json=dataUrl" json:"data_url,omitempty"`
	// The size of the log stream's binary data.
	DataSize int64 `protobuf:"varint,31,opt,name=data_size,json=dataSize" json:"data_size,omitempty"`
}

func (m *ArchiveStreamRequest) Reset()                    { *m = ArchiveStreamRequest{} }
func (m *ArchiveStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*ArchiveStreamRequest) ProtoMessage()               {}
func (*ArchiveStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ArchiveStreamRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ArchiveStreamRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ArchiveStreamRequest) GetLogEntryCount() int64 {
	if m != nil {
		return m.LogEntryCount
	}
	return 0
}

func (m *ArchiveStreamRequest) GetTerminalIndex() int64 {
	if m != nil {
		return m.TerminalIndex
	}
	return 0
}

func (m *ArchiveStreamRequest) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ArchiveStreamRequest) GetStreamUrl() string {
	if m != nil {
		return m.StreamUrl
	}
	return ""
}

func (m *ArchiveStreamRequest) GetStreamSize() int64 {
	if m != nil {
		return m.StreamSize
	}
	return 0
}

func (m *ArchiveStreamRequest) GetIndexUrl() string {
	if m != nil {
		return m.IndexUrl
	}
	return ""
}

func (m *ArchiveStreamRequest) GetIndexSize() int64 {
	if m != nil {
		return m.IndexSize
	}
	return 0
}

func (m *ArchiveStreamRequest) GetDataUrl() string {
	if m != nil {
		return m.DataUrl
	}
	return ""
}

func (m *ArchiveStreamRequest) GetDataSize() int64 {
	if m != nil {
		return m.DataSize
	}
	return 0
}

// BatchRequest is a batch of individual requests to make to the Coordinator.
type BatchRequest struct {
	Req []*BatchRequest_Entry `protobuf:"bytes,1,rep,name=req" json:"req,omitempty"`
}

func (m *BatchRequest) Reset()                    { *m = BatchRequest{} }
func (m *BatchRequest) String() string            { return proto.CompactTextString(m) }
func (*BatchRequest) ProtoMessage()               {}
func (*BatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BatchRequest) GetReq() []*BatchRequest_Entry {
	if m != nil {
		return m.Req
	}
	return nil
}

// The collection of batched requests.
type BatchRequest_Entry struct {
	// Types that are valid to be assigned to Value:
	//	*BatchRequest_Entry_RegisterStream
	//	*BatchRequest_Entry_LoadStream
	//	*BatchRequest_Entry_TerminateStream
	//	*BatchRequest_Entry_ArchiveStream
	Value isBatchRequest_Entry_Value `protobuf_oneof:"value"`
}

func (m *BatchRequest_Entry) Reset()                    { *m = BatchRequest_Entry{} }
func (m *BatchRequest_Entry) String() string            { return proto.CompactTextString(m) }
func (*BatchRequest_Entry) ProtoMessage()               {}
func (*BatchRequest_Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

type isBatchRequest_Entry_Value interface {
	isBatchRequest_Entry_Value()
}

type BatchRequest_Entry_RegisterStream struct {
	RegisterStream *RegisterStreamRequest `protobuf:"bytes,1,opt,name=register_stream,json=registerStream,oneof"`
}
type BatchRequest_Entry_LoadStream struct {
	LoadStream *LoadStreamRequest `protobuf:"bytes,2,opt,name=load_stream,json=loadStream,oneof"`
}
type BatchRequest_Entry_TerminateStream struct {
	TerminateStream *TerminateStreamRequest `protobuf:"bytes,3,opt,name=terminate_stream,json=terminateStream,oneof"`
}
type BatchRequest_Entry_ArchiveStream struct {
	ArchiveStream *ArchiveStreamRequest `protobuf:"bytes,4,opt,name=archive_stream,json=archiveStream,oneof"`
}

func (*BatchRequest_Entry_RegisterStream) isBatchRequest_Entry_Value()  {}
func (*BatchRequest_Entry_LoadStream) isBatchRequest_Entry_Value()      {}
func (*BatchRequest_Entry_TerminateStream) isBatchRequest_Entry_Value() {}
func (*BatchRequest_Entry_ArchiveStream) isBatchRequest_Entry_Value()   {}

func (m *BatchRequest_Entry) GetValue() isBatchRequest_Entry_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BatchRequest_Entry) GetRegisterStream() *RegisterStreamRequest {
	if x, ok := m.GetValue().(*BatchRequest_Entry_RegisterStream); ok {
		return x.RegisterStream
	}
	return nil
}

func (m *BatchRequest_Entry) GetLoadStream() *LoadStreamRequest {
	if x, ok := m.GetValue().(*BatchRequest_Entry_LoadStream); ok {
		return x.LoadStream
	}
	return nil
}

func (m *BatchRequest_Entry) GetTerminateStream() *TerminateStreamRequest {
	if x, ok := m.GetValue().(*BatchRequest_Entry_TerminateStream); ok {
		return x.TerminateStream
	}
	return nil
}

func (m *BatchRequest_Entry) GetArchiveStream() *ArchiveStreamRequest {
	if x, ok := m.GetValue().(*BatchRequest_Entry_ArchiveStream); ok {
		return x.ArchiveStream
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BatchRequest_Entry) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BatchRequest_Entry_OneofMarshaler, _BatchRequest_Entry_OneofUnmarshaler, _BatchRequest_Entry_OneofSizer, []interface{}{
		(*BatchRequest_Entry_RegisterStream)(nil),
		(*BatchRequest_Entry_LoadStream)(nil),
		(*BatchRequest_Entry_TerminateStream)(nil),
		(*BatchRequest_Entry_ArchiveStream)(nil),
	}
}

func _BatchRequest_Entry_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BatchRequest_Entry)
	// value
	switch x := m.Value.(type) {
	case *BatchRequest_Entry_RegisterStream:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegisterStream); err != nil {
			return err
		}
	case *BatchRequest_Entry_LoadStream:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LoadStream); err != nil {
			return err
		}
	case *BatchRequest_Entry_TerminateStream:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TerminateStream); err != nil {
			return err
		}
	case *BatchRequest_Entry_ArchiveStream:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ArchiveStream); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BatchRequest_Entry.Value has unexpected type %T", x)
	}
	return nil
}

func _BatchRequest_Entry_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BatchRequest_Entry)
	switch tag {
	case 1: // value.register_stream
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegisterStreamRequest)
		err := b.DecodeMessage(msg)
		m.Value = &BatchRequest_Entry_RegisterStream{msg}
		return true, err
	case 2: // value.load_stream
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LoadStreamRequest)
		err := b.DecodeMessage(msg)
		m.Value = &BatchRequest_Entry_LoadStream{msg}
		return true, err
	case 3: // value.terminate_stream
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TerminateStreamRequest)
		err := b.DecodeMessage(msg)
		m.Value = &BatchRequest_Entry_TerminateStream{msg}
		return true, err
	case 4: // value.archive_stream
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ArchiveStreamRequest)
		err := b.DecodeMessage(msg)
		m.Value = &BatchRequest_Entry_ArchiveStream{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BatchRequest_Entry_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BatchRequest_Entry)
	// value
	switch x := m.Value.(type) {
	case *BatchRequest_Entry_RegisterStream:
		s := proto.Size(x.RegisterStream)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BatchRequest_Entry_LoadStream:
		s := proto.Size(x.LoadStream)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BatchRequest_Entry_TerminateStream:
		s := proto.Size(x.TerminateStream)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BatchRequest_Entry_ArchiveStream:
		s := proto.Size(x.ArchiveStream)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// BatchResponse is a response to a BatchRequest.
type BatchResponse struct {
	Resp []*BatchResponse_Entry `protobuf:"bytes,1,rep,name=resp" json:"resp,omitempty"`
}

func (m *BatchResponse) Reset()                    { *m = BatchResponse{} }
func (m *BatchResponse) String() string            { return proto.CompactTextString(m) }
func (*BatchResponse) ProtoMessage()               {}
func (*BatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BatchResponse) GetResp() []*BatchResponse_Entry {
	if m != nil {
		return m.Resp
	}
	return nil
}

// The collection of batched requests.
//
// Each index corresponds to that index of the source request.
type BatchResponse_Entry struct {
	// Types that are valid to be assigned to Value:
	//	*BatchResponse_Entry_Err
	//	*BatchResponse_Entry_RegisterStream
	//	*BatchResponse_Entry_LoadStream
	Value isBatchResponse_Entry_Value `protobuf_oneof:"value"`
}

func (m *BatchResponse_Entry) Reset()                    { *m = BatchResponse_Entry{} }
func (m *BatchResponse_Entry) String() string            { return proto.CompactTextString(m) }
func (*BatchResponse_Entry) ProtoMessage()               {}
func (*BatchResponse_Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

type isBatchResponse_Entry_Value interface {
	isBatchResponse_Entry_Value()
}

type BatchResponse_Entry_Err struct {
	Err *Error `protobuf:"bytes,1,opt,name=err,oneof"`
}
type BatchResponse_Entry_RegisterStream struct {
	RegisterStream *RegisterStreamResponse `protobuf:"bytes,2,opt,name=register_stream,json=registerStream,oneof"`
}
type BatchResponse_Entry_LoadStream struct {
	LoadStream *LoadStreamResponse `protobuf:"bytes,3,opt,name=load_stream,json=loadStream,oneof"`
}

func (*BatchResponse_Entry_Err) isBatchResponse_Entry_Value()            {}
func (*BatchResponse_Entry_RegisterStream) isBatchResponse_Entry_Value() {}
func (*BatchResponse_Entry_LoadStream) isBatchResponse_Entry_Value()     {}

func (m *BatchResponse_Entry) GetValue() isBatchResponse_Entry_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BatchResponse_Entry) GetErr() *Error {
	if x, ok := m.GetValue().(*BatchResponse_Entry_Err); ok {
		return x.Err
	}
	return nil
}

func (m *BatchResponse_Entry) GetRegisterStream() *RegisterStreamResponse {
	if x, ok := m.GetValue().(*BatchResponse_Entry_RegisterStream); ok {
		return x.RegisterStream
	}
	return nil
}

func (m *BatchResponse_Entry) GetLoadStream() *LoadStreamResponse {
	if x, ok := m.GetValue().(*BatchResponse_Entry_LoadStream); ok {
		return x.LoadStream
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BatchResponse_Entry) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BatchResponse_Entry_OneofMarshaler, _BatchResponse_Entry_OneofUnmarshaler, _BatchResponse_Entry_OneofSizer, []interface{}{
		(*BatchResponse_Entry_Err)(nil),
		(*BatchResponse_Entry_RegisterStream)(nil),
		(*BatchResponse_Entry_LoadStream)(nil),
	}
}

func _BatchResponse_Entry_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BatchResponse_Entry)
	// value
	switch x := m.Value.(type) {
	case *BatchResponse_Entry_Err:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Err); err != nil {
			return err
		}
	case *BatchResponse_Entry_RegisterStream:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegisterStream); err != nil {
			return err
		}
	case *BatchResponse_Entry_LoadStream:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LoadStream); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BatchResponse_Entry.Value has unexpected type %T", x)
	}
	return nil
}

func _BatchResponse_Entry_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BatchResponse_Entry)
	switch tag {
	case 1: // value.err
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Value = &BatchResponse_Entry_Err{msg}
		return true, err
	case 2: // value.register_stream
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegisterStreamResponse)
		err := b.DecodeMessage(msg)
		m.Value = &BatchResponse_Entry_RegisterStream{msg}
		return true, err
	case 3: // value.load_stream
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LoadStreamResponse)
		err := b.DecodeMessage(msg)
		m.Value = &BatchResponse_Entry_LoadStream{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BatchResponse_Entry_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BatchResponse_Entry)
	// value
	switch x := m.Value.(type) {
	case *BatchResponse_Entry_Err:
		s := proto.Size(x.Err)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BatchResponse_Entry_RegisterStream:
		s := proto.Size(x.RegisterStream)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BatchResponse_Entry_LoadStream:
		s := proto.Size(x.LoadStream)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Error)(nil), "logdog.Error")
	proto.RegisterType((*GetConfigResponse)(nil), "logdog.GetConfigResponse")
	proto.RegisterType((*RegisterStreamRequest)(nil), "logdog.RegisterStreamRequest")
	proto.RegisterType((*RegisterStreamResponse)(nil), "logdog.RegisterStreamResponse")
	proto.RegisterType((*LoadStreamRequest)(nil), "logdog.LoadStreamRequest")
	proto.RegisterType((*LoadStreamResponse)(nil), "logdog.LoadStreamResponse")
	proto.RegisterType((*TerminateStreamRequest)(nil), "logdog.TerminateStreamRequest")
	proto.RegisterType((*ArchiveStreamRequest)(nil), "logdog.ArchiveStreamRequest")
	proto.RegisterType((*BatchRequest)(nil), "logdog.BatchRequest")
	proto.RegisterType((*BatchRequest_Entry)(nil), "logdog.BatchRequest.Entry")
	proto.RegisterType((*BatchResponse)(nil), "logdog.BatchResponse")
	proto.RegisterType((*BatchResponse_Entry)(nil), "logdog.BatchResponse.Entry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Services service

type ServicesClient interface {
	// GetConfig allows a service to retrieve the current service configuration
	// parameters.
	GetConfig(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*GetConfigResponse, error)
	// RegisterStream is an idempotent stream state register operation.
	RegisterStream(ctx context.Context, in *RegisterStreamRequest, opts ...grpc.CallOption) (*RegisterStreamResponse, error)
	// LoadStream loads the current state of a log stream.
	LoadStream(ctx context.Context, in *LoadStreamRequest, opts ...grpc.CallOption) (*LoadStreamResponse, error)
	// TerminateStream is an idempotent operation to update the stream's terminal
	// index.
	TerminateStream(ctx context.Context, in *TerminateStreamRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// ArchiveStream is an idempotent operation to record a log stream's archival
	// parameters. It is used by the Archivist service upon successful stream
	// archival.
	ArchiveStream(ctx context.Context, in *ArchiveStreamRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Batch is a series of requests submitted in batch. It returns a
	// BatchResponse containing the same number of entries, with each entry index
	// corresponding to its request index.
	Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error)
}
type servicesPRPCClient struct {
	client *prpc.Client
}

func NewServicesPRPCClient(client *prpc.Client) ServicesClient {
	return &servicesPRPCClient{client}
}

func (c *servicesPRPCClient) GetConfig(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.client.Call(ctx, "logdog.Services", "GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesPRPCClient) RegisterStream(ctx context.Context, in *RegisterStreamRequest, opts ...grpc.CallOption) (*RegisterStreamResponse, error) {
	out := new(RegisterStreamResponse)
	err := c.client.Call(ctx, "logdog.Services", "RegisterStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesPRPCClient) LoadStream(ctx context.Context, in *LoadStreamRequest, opts ...grpc.CallOption) (*LoadStreamResponse, error) {
	out := new(LoadStreamResponse)
	err := c.client.Call(ctx, "logdog.Services", "LoadStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesPRPCClient) TerminateStream(ctx context.Context, in *TerminateStreamRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := c.client.Call(ctx, "logdog.Services", "TerminateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesPRPCClient) ArchiveStream(ctx context.Context, in *ArchiveStreamRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := c.client.Call(ctx, "logdog.Services", "ArchiveStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesPRPCClient) Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.client.Call(ctx, "logdog.Services", "Batch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type servicesClient struct {
	cc *grpc.ClientConn
}

func NewServicesClient(cc *grpc.ClientConn) ServicesClient {
	return &servicesClient{cc}
}

func (c *servicesClient) GetConfig(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := grpc.Invoke(ctx, "/logdog.Services/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) RegisterStream(ctx context.Context, in *RegisterStreamRequest, opts ...grpc.CallOption) (*RegisterStreamResponse, error) {
	out := new(RegisterStreamResponse)
	err := grpc.Invoke(ctx, "/logdog.Services/RegisterStream", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) LoadStream(ctx context.Context, in *LoadStreamRequest, opts ...grpc.CallOption) (*LoadStreamResponse, error) {
	out := new(LoadStreamResponse)
	err := grpc.Invoke(ctx, "/logdog.Services/LoadStream", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) TerminateStream(ctx context.Context, in *TerminateStreamRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/logdog.Services/TerminateStream", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) ArchiveStream(ctx context.Context, in *ArchiveStreamRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/logdog.Services/ArchiveStream", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := grpc.Invoke(ctx, "/logdog.Services/Batch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Services service

type ServicesServer interface {
	// GetConfig allows a service to retrieve the current service configuration
	// parameters.
	GetConfig(context.Context, *google_protobuf1.Empty) (*GetConfigResponse, error)
	// RegisterStream is an idempotent stream state register operation.
	RegisterStream(context.Context, *RegisterStreamRequest) (*RegisterStreamResponse, error)
	// LoadStream loads the current state of a log stream.
	LoadStream(context.Context, *LoadStreamRequest) (*LoadStreamResponse, error)
	// TerminateStream is an idempotent operation to update the stream's terminal
	// index.
	TerminateStream(context.Context, *TerminateStreamRequest) (*google_protobuf1.Empty, error)
	// ArchiveStream is an idempotent operation to record a log stream's archival
	// parameters. It is used by the Archivist service upon successful stream
	// archival.
	ArchiveStream(context.Context, *ArchiveStreamRequest) (*google_protobuf1.Empty, error)
	// Batch is a series of requests submitted in batch. It returns a
	// BatchResponse containing the same number of entries, with each entry index
	// corresponding to its request index.
	Batch(context.Context, *BatchRequest) (*BatchResponse, error)
}

func RegisterServicesServer(s prpc.Registrar, srv ServicesServer) {
	s.RegisterService(&_Services_serviceDesc, srv)
}

func _Services_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logdog.Services/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).GetConfig(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_RegisterStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).RegisterStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logdog.Services/RegisterStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).RegisterStream(ctx, req.(*RegisterStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_LoadStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).LoadStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logdog.Services/LoadStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).LoadStream(ctx, req.(*LoadStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_TerminateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).TerminateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logdog.Services/TerminateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).TerminateStream(ctx, req.(*TerminateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_ArchiveStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).ArchiveStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logdog.Services/ArchiveStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).ArchiveStream(ctx, req.(*ArchiveStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logdog.Services/Batch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).Batch(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Services_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logdog.Services",
	HandlerType: (*ServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _Services_GetConfig_Handler,
		},
		{
			MethodName: "RegisterStream",
			Handler:    _Services_RegisterStream_Handler,
		},
		{
			MethodName: "LoadStream",
			Handler:    _Services_LoadStream_Handler,
		},
		{
			MethodName: "TerminateStream",
			Handler:    _Services_TerminateStream_Handler,
		},
		{
			MethodName: "ArchiveStream",
			Handler:    _Services_ArchiveStream_Handler,
		},
		{
			MethodName: "Batch",
			Handler:    _Services_Batch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/logdog/api/endpoints/coordinator/services/v1/service.proto",
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/logdog/api/endpoints/coordinator/services/v1/service.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 992 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xf6, 0xee, 0xda, 0xa9, 0x7d, 0xfc, 0x93, 0x64, 0x48, 0x2c, 0x77, 0xd3, 0xa6, 0xae, 0x2b,
	0x90, 0x25, 0xa2, 0x5d, 0x11, 0xb8, 0x04, 0x24, 0x1a, 0x2c, 0x5c, 0xb5, 0xa8, 0x30, 0x29, 0xdc,
	0x5a, 0xd3, 0xdd, 0xe9, 0x7a, 0x61, 0xbd, 0xe3, 0xce, 0x8e, 0x2d, 0x52, 0x6e, 0xe0, 0x65, 0x10,
	0x48, 0xbc, 0x02, 0x12, 0xaf, 0xc1, 0x33, 0xf0, 0x12, 0x68, 0xfe, 0x36, 0xb6, 0xe3, 0xa4, 0x51,
	0xc5, 0xdd, 0xce, 0xf9, 0x9b, 0xef, 0x7c, 0xe7, 0x3b, 0xb3, 0xf0, 0x3c, 0x61, 0x41, 0x34, 0xe5,
	0x6c, 0x96, 0x2e, 0x66, 0x01, 0xe3, 0x49, 0x98, 0x2d, 0xa2, 0x34, 0xcc, 0x58, 0x12, 0xb3, 0x24,
	0x24, 0xf3, 0x34, 0xa4, 0x79, 0x3c, 0x67, 0x69, 0x2e, 0x8a, 0x30, 0x62, 0x8c, 0xc7, 0x69, 0x4e,
	0x04, 0xe3, 0x61, 0x41, 0xf9, 0x32, 0x8d, 0x68, 0x11, 0x2e, 0x3f, 0xb2, 0xdf, 0xc1, 0x9c, 0x33,
	0xc1, 0xd0, 0x8e, 0xce, 0xf5, 0xbf, 0xfe, 0x1f, 0x0a, 0x0b, 0x22, 0x4c, 0x59, 0xff, 0x38, 0x61,
	0x2c, 0xc9, 0x68, 0xa8, 0x4e, 0x2f, 0x17, 0xaf, 0xc2, 0x78, 0xc1, 0x89, 0x48, 0x59, 0x6e, 0xfc,
	0x47, 0x9b, 0x7e, 0x3a, 0x9b, 0x8b, 0x0b, 0xed, 0x1c, 0xbc, 0x80, 0xda, 0x88, 0x73, 0xc6, 0xd1,
	0x11, 0x34, 0x12, 0x3e, 0x8f, 0x26, 0x11, 0x8b, 0x69, 0xcf, 0xe9, 0x3b, 0xc3, 0x1a, 0xae, 0x4b,
	0xc3, 0x19, 0x8b, 0x29, 0xba, 0x07, 0x0d, 0xc1, 0x49, 0x5e, 0xa4, 0x34, 0x17, 0x3d, 0xb7, 0xef,
	0x0c, 0xeb, 0xf8, 0xd2, 0x80, 0xf6, 0xc0, 0x9b, 0x15, 0x49, 0xcf, 0xeb, 0x3b, 0xc3, 0x06, 0x96,
	0x9f, 0x83, 0xbf, 0x1d, 0xd8, 0xff, 0x8a, 0x8a, 0x33, 0x96, 0xbf, 0x4a, 0x13, 0x4c, 0x8b, 0x39,
	0xcb, 0x0b, 0x8a, 0x4e, 0x00, 0x45, 0xca, 0x32, 0x31, 0xad, 0x4c, 0x16, 0x3c, 0x53, 0x77, 0x35,
	0xf0, 0x9e, 0xf6, 0x9c, 0x6b, 0xc7, 0x77, 0x3c, 0x43, 0xf7, 0x01, 0xca, 0x68, 0x7d, 0x69, 0x03,
	0x37, 0x6c, 0x94, 0x40, 0x01, 0xbc, 0x67, 0xab, 0x98, 0xb0, 0x39, 0x11, 0x53, 0x03, 0x62, 0xdf,
	0xb8, 0x34, 0x80, 0x6f, 0x88, 0x98, 0xca, 0xf8, 0x8d, 0xcb, 0xa7, 0xac, 0x10, 0xbd, 0xaa, 0x8e,
	0x5f, 0xbb, 0x7d, 0xcc, 0x0a, 0x31, 0xf8, 0xc3, 0x81, 0x43, 0x4c, 0x93, 0xb4, 0x10, 0x94, 0x9f,
	0x0b, 0x4e, 0xc9, 0x0c, 0xd3, 0xd7, 0x0b, 0x5a, 0x08, 0xd4, 0x83, 0x3b, 0x73, 0xce, 0x7e, 0xa0,
	0x91, 0x30, 0xd8, 0xed, 0x11, 0x75, 0x61, 0xa7, 0xa0, 0x11, 0x37, 0x70, 0x5b, 0xd8, 0x9c, 0xd0,
	0x23, 0x68, 0x2b, 0xb6, 0x27, 0x4b, 0xca, 0x8b, 0x94, 0xe5, 0x06, 0x65, 0x4b, 0x19, 0xbf, 0xd7,
	0x36, 0x84, 0xa0, 0x1a, 0xd3, 0x22, 0x52, 0x88, 0x5a, 0x58, 0x7d, 0xa3, 0xf7, 0xa1, 0x23, 0x28,
	0x9f, 0xa5, 0x39, 0xc9, 0x26, 0x69, 0x1e, 0xd3, 0x9f, 0x7a, 0xb5, 0xbe, 0x33, 0xf4, 0x70, 0xdb,
	0x5a, 0x9f, 0x48, 0xe3, 0xe0, 0x67, 0xe8, 0x6e, 0x42, 0x35, 0x94, 0x77, 0xc0, 0x4d, 0x63, 0x03,
	0xd3, 0x4d, 0x63, 0x74, 0x02, 0x35, 0x25, 0x1d, 0x05, 0xb0, 0x79, 0xda, 0x0d, 0xb4, 0xea, 0x82,
	0x67, 0x2c, 0xd1, 0x99, 0xe7, 0xd2, 0x8b, 0x75, 0x10, 0x7a, 0x04, 0x35, 0x2a, 0xc5, 0xa1, 0xf0,
	0x36, 0x4f, 0xdb, 0x36, 0x5a, 0x29, 0x06, 0x6b, 0xdf, 0xe0, 0x5b, 0xd8, 0x7f, 0xc6, 0x48, 0x7c,
	0x5b, 0x8e, 0x34, 0x22, 0xb7, 0x44, 0x64, 0xdb, 0xf6, 0x94, 0xaa, 0xd4, 0xf7, 0xe0, 0x37, 0x07,
	0xd0, 0x6a, 0xcd, 0x52, 0x3f, 0x06, 0xbc, 0x73, 0x1b, 0xf0, 0xb6, 0xb0, 0xbb, 0xc2, 0xe7, 0x87,
	0xe0, 0x91, 0x84, 0x9a, 0x76, 0xee, 0x06, 0x7a, 0x31, 0x02, 0xbb, 0x18, 0xc1, 0x97, 0x66, 0x71,
	0xb0, 0x8c, 0x42, 0x0f, 0xa1, 0x45, 0x78, 0x34, 0x4d, 0x97, 0x24, 0x9b, 0xfc, 0x48, 0x2f, 0xcc,
	0x60, 0x9a, 0xd6, 0xf6, 0x94, 0x5e, 0x0c, 0x7e, 0x75, 0xa0, 0xfb, 0x42, 0x8f, 0x42, 0xd0, 0x77,
	0x65, 0xe0, 0x52, 0x35, 0xde, 0x9a, 0x6a, 0xae, 0x0e, 0xbf, 0xba, 0x6d, 0xf8, 0xff, 0xb8, 0x70,
	0xf0, 0x85, 0xc2, 0xf4, 0xce, 0x08, 0x3e, 0x80, 0xdd, 0x8c, 0x25, 0x13, 0x9a, 0x0b, 0x7e, 0x31,
	0x89, 0xd8, 0x22, 0xd7, 0x50, 0x3c, 0xdc, 0xce, 0x58, 0x32, 0x92, 0xd6, 0x33, 0x69, 0xbc, 0x25,
	0x22, 0x74, 0x60, 0x65, 0x53, 0x53, 0x37, 0xe8, 0x83, 0xdc, 0xe7, 0x42, 0xe1, 0x53, 0x5b, 0x0f,
	0x7a, 0x9f, 0xb5, 0x45, 0xae, 0xfb, 0x03, 0x68, 0x1a, 0x77, 0x91, 0xbe, 0xa1, 0xbd, 0xa6, 0x2a,
	0x6c, 0x32, 0xce, 0xd3, 0x37, 0x54, 0x3e, 0x50, 0xea, 0x4e, 0x95, 0x7e, 0xa0, 0xd2, 0xeb, 0xca,
	0x60, 0x1e, 0x0b, 0xed, 0x54, 0xc9, 0x87, 0x2a, 0x59, 0x87, 0xab, 0xdc, 0xbb, 0x50, 0x8f, 0x89,
	0x20, 0x2a, 0xf5, 0x58, 0x73, 0x21, 0xcf, 0x32, 0xf3, 0x08, 0x1a, 0xca, 0xa5, 0x12, 0x1f, 0xa8,
	0x44, 0x15, 0x2b, 0xf3, 0x06, 0xff, 0xba, 0xd0, 0x7a, 0x4c, 0x44, 0x34, 0xb5, 0x9c, 0x9e, 0x80,
	0xc7, 0xe9, 0xeb, 0x9e, 0xd3, 0xf7, 0x86, 0xcd, 0x53, 0xdf, 0x0a, 0x70, 0x35, 0x24, 0x50, 0x7c,
	0x61, 0x19, 0xe6, 0xff, 0xe9, 0x42, 0x4d, 0x1d, 0xd1, 0x18, 0x76, 0xb9, 0xd9, 0xd0, 0x89, 0xee,
	0xc9, 0x88, 0xf8, 0xbe, 0xad, 0xb1, 0xf5, 0xad, 0x19, 0x57, 0x70, 0x87, 0xaf, 0x39, 0xd0, 0xa7,
	0xd0, 0xcc, 0x18, 0x89, 0x6d, 0x15, 0xd7, 0x48, 0xb9, 0x5c, 0x85, 0x8d, 0x4d, 0x1c, 0x57, 0x30,
	0x64, 0xa5, 0x11, 0x3d, 0x85, 0x3d, 0x61, 0xf5, 0x6a, 0x4b, 0xe8, 0x6d, 0x38, 0xb6, 0x25, 0xb6,
	0xeb, 0x79, 0x5c, 0xc1, 0xbb, 0x62, 0xdd, 0x83, 0x46, 0xd0, 0xd1, 0xcb, 0x50, 0x96, 0xaa, 0xaa,
	0x52, 0xf7, 0x6c, 0xa9, 0x6d, 0xb2, 0x1c, 0x57, 0x70, 0x9b, 0xac, 0xda, 0x1f, 0xdf, 0x81, 0xda,
	0x92, 0x64, 0x0b, 0x3a, 0xf8, 0xc5, 0x85, 0xb6, 0xa1, 0xd2, 0x6c, 0x7c, 0x08, 0x55, 0x4e, 0x8b,
	0xb9, 0xe1, 0xfb, 0x68, 0x83, 0x6f, 0x1d, 0x64, 0x08, 0x57, 0x81, 0xfe, 0x5f, 0x8e, 0x65, 0xfc,
	0x21, 0x78, 0x94, 0x73, 0xc3, 0xf2, 0xfa, 0xcb, 0x35, 0xae, 0x60, 0xe9, 0x43, 0x4f, 0xae, 0x0e,
	0xc5, 0x5d, 0xe7, 0x62, 0xfb, 0xab, 0xba, 0x65, 0x2a, 0x9f, 0xad, 0x4f, 0x45, 0x53, 0xea, 0x6f,
	0x9b, 0x4a, 0x59, 0x62, 0x65, 0x2c, 0x25, 0x05, 0xa7, 0xbf, 0x7b, 0x50, 0x37, 0x7f, 0xa1, 0x02,
	0x7d, 0x0e, 0x8d, 0xf2, 0x27, 0x8a, 0xba, 0x57, 0x5e, 0xab, 0x91, 0xfc, 0x8d, 0xfb, 0xe5, 0xe8,
	0xaf, 0xfe, 0x6f, 0x9f, 0x43, 0x67, 0xbd, 0x01, 0x74, 0xb3, 0xda, 0xfc, 0xb7, 0xf4, 0x8d, 0xce,
	0x00, 0x2e, 0x5b, 0x41, 0xd7, 0x8b, 0xce, 0xbf, 0xa1, 0x73, 0xc9, 0xfa, 0x86, 0xc4, 0xd0, 0x5b,
	0xb4, 0xe7, 0x5f, 0xd3, 0x3b, 0x1a, 0x41, 0x7b, 0x4d, 0x62, 0xe8, 0x46, 0xe5, 0x5d, 0x5b, 0xe6,
	0x13, 0xa8, 0x29, 0x45, 0xa1, 0x83, 0x6d, 0x0b, 0xed, 0x1f, 0x6e, 0x95, 0xdd, 0xcb, 0x1d, 0x55,
	0xe5, 0xe3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x43, 0x54, 0x30, 0x08, 0x27, 0x0a, 0x00, 0x00,
}
