// Code generated by protoc-gen-go.
// source: github.com/luci/luci-go/milo/common/config/settings.proto
// DO NOT EDIT!

package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Settings represents the format for the global (service) config for Milo.
type Settings struct {
	Buildbot *Settings_Buildbot `protobuf:"bytes,1,opt,name=buildbot" json:"buildbot,omitempty"`
}

func (m *Settings) Reset()                    { *m = Settings{} }
func (m *Settings) String() string            { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()               {}
func (*Settings) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Settings) GetBuildbot() *Settings_Buildbot {
	if m != nil {
		return m.Buildbot
	}
	return nil
}

type Settings_Buildbot struct {
	// internal_reader is the infra-auth group that is allowed to read internal
	// buildbot data.
	InternalReader string `protobuf:"bytes,1,opt,name=internal_reader,json=internalReader" json:"internal_reader,omitempty"`
}

func (m *Settings_Buildbot) Reset()                    { *m = Settings_Buildbot{} }
func (m *Settings_Buildbot) String() string            { return proto.CompactTextString(m) }
func (*Settings_Buildbot) ProtoMessage()               {}
func (*Settings_Buildbot) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *Settings_Buildbot) GetInternalReader() string {
	if m != nil {
		return m.InternalReader
	}
	return ""
}

func init() {
	proto.RegisterType((*Settings)(nil), "config.Settings")
	proto.RegisterType((*Settings_Buildbot)(nil), "config.Settings.Buildbot")
}

func init() {
	proto.RegisterFile("github.com/luci/luci-go/milo/common/config/settings.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0xce, 0xb1, 0x0a, 0xc2, 0x30,
	0x10, 0x80, 0x61, 0xba, 0x94, 0x1a, 0x41, 0xa1, 0x93, 0x3a, 0x89, 0x8b, 0x2e, 0x26, 0x60, 0x71,
	0x70, 0xf5, 0x11, 0xe2, 0x03, 0x48, 0x93, 0xc6, 0x78, 0x90, 0xe4, 0x24, 0xbd, 0xf8, 0xfc, 0x42,
	0xda, 0xb8, 0xdc, 0xf0, 0xdf, 0xc7, 0x71, 0xec, 0x66, 0x81, 0xde, 0x49, 0x71, 0x8d, 0x5e, 0xb8,
	0xa4, 0x21, 0x8f, 0xb3, 0x45, 0xe1, 0xc1, 0xa1, 0xd0, 0xe8, 0x3d, 0x06, 0xa1, 0x31, 0xbc, 0xc0,
	0x8a, 0xd1, 0x10, 0x41, 0xb0, 0x23, 0xff, 0x44, 0x24, 0x6c, 0xeb, 0x29, 0x1f, 0xbe, 0xac, 0x79,
	0xcc, 0x9b, 0xf6, 0xca, 0x1a, 0x95, 0xc0, 0x0d, 0x0a, 0x69, 0x53, 0xed, 0xab, 0xd3, 0xf2, 0xb2,
	0xe5, 0x13, 0xe3, 0xc5, 0xf0, 0xfb, 0x0c, 0xe4, 0x9f, 0xee, 0x3a, 0xd6, 0x94, 0xda, 0x1e, 0xd9,
	0x1a, 0x02, 0x99, 0x18, 0x7a, 0xf7, 0x8c, 0xa6, 0x1f, 0x4c, 0xcc, 0x97, 0x16, 0x72, 0x55, 0xb2,
	0xcc, 0x55, 0xd5, 0xf9, 0x8d, 0xee, 0x17, 0x00, 0x00, 0xff, 0xff, 0x08, 0x01, 0x23, 0x09, 0xc3,
	0x00, 0x00, 0x00,
}
