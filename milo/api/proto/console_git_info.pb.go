// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/milo/api/proto/console_git_info.proto

package milo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ConsoleGitInfo stores memcache-able data that the console view will use when
// displaying git commits. A compressed ConsoleGitInfo should always be < 1MB,
// so don't put anything too big in here.
type ConsoleGitInfo struct {
	Commits []*ConsoleGitInfo_Commit `protobuf:"bytes,1,rep,name=commits" json:"commits,omitempty"`
}

func (m *ConsoleGitInfo) Reset()                    { *m = ConsoleGitInfo{} }
func (m *ConsoleGitInfo) String() string            { return proto.CompactTextString(m) }
func (*ConsoleGitInfo) ProtoMessage()               {}
func (*ConsoleGitInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ConsoleGitInfo) GetCommits() []*ConsoleGitInfo_Commit {
	if m != nil {
		return m.Commits
	}
	return nil
}

type ConsoleGitInfo_Commit struct {
	// The raw commit hash.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The author name (e.g. "Rey Cool")
	AuthorName string `protobuf:"bytes,2,opt,name=author_name,json=authorName" json:"author_name,omitempty"`
	// The author email (e.g. "rey_cool@example.com")
	AuthorEmail string `protobuf:"bytes,3,opt,name=author_email,json=authorEmail" json:"author_email,omitempty"`
	// The commit timestamp (~= when the commit landed... not always true!).
	CommitTime *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=commit_time,json=commitTime" json:"commit_time,omitempty"`
	// The raw commit message as text.
	Msg string `protobuf:"bytes,5,opt,name=msg" json:"msg,omitempty"`
}

func (m *ConsoleGitInfo_Commit) Reset()                    { *m = ConsoleGitInfo_Commit{} }
func (m *ConsoleGitInfo_Commit) String() string            { return proto.CompactTextString(m) }
func (*ConsoleGitInfo_Commit) ProtoMessage()               {}
func (*ConsoleGitInfo_Commit) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

func (m *ConsoleGitInfo_Commit) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ConsoleGitInfo_Commit) GetAuthorName() string {
	if m != nil {
		return m.AuthorName
	}
	return ""
}

func (m *ConsoleGitInfo_Commit) GetAuthorEmail() string {
	if m != nil {
		return m.AuthorEmail
	}
	return ""
}

func (m *ConsoleGitInfo_Commit) GetCommitTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CommitTime
	}
	return nil
}

func (m *ConsoleGitInfo_Commit) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*ConsoleGitInfo)(nil), "milo.ConsoleGitInfo")
	proto.RegisterType((*ConsoleGitInfo_Commit)(nil), "milo.ConsoleGitInfo.Commit")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/milo/api/proto/console_git_info.proto", fileDescriptor2)
}

var fileDescriptor2 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xb1, 0x4b, 0xc4, 0x30,
	0x14, 0xc6, 0x89, 0x77, 0x9e, 0xf8, 0x7a, 0x88, 0x64, 0x0a, 0x75, 0xb8, 0xea, 0xd4, 0x29, 0x81,
	0x13, 0x17, 0x1d, 0x0f, 0x11, 0x17, 0x87, 0xe2, 0x5e, 0x72, 0x25, 0x4d, 0x03, 0x7d, 0x7d, 0xa5,
	0x4d, 0xff, 0x2e, 0xff, 0x3e, 0x37, 0x49, 0x72, 0x1d, 0xdc, 0x1e, 0x3f, 0x7e, 0xdf, 0xf7, 0xf8,
	0xe0, 0xd5, 0x92, 0x6c, 0xba, 0x89, 0xd0, 0x2d, 0x28, 0x69, 0xb2, 0xaa, 0x5f, 0x1a, 0xa7, 0xd0,
	0xf5, 0xa4, 0xf4, 0xe8, 0xd4, 0x38, 0x91, 0x27, 0xd5, 0xd0, 0x30, 0x53, 0x6f, 0x6a, 0xeb, 0x7c,
	0xed, 0x86, 0x96, 0x64, 0xc4, 0x7c, 0x1b, 0xb4, 0xfc, 0x60, 0x89, 0x6c, 0x6f, 0x92, 0x7a, 0x5e,
	0x5a, 0xe5, 0x1d, 0x9a, 0xd9, 0x6b, 0x1c, 0x93, 0xf6, 0xf4, 0xcb, 0xe0, 0xee, 0x94, 0x1a, 0x3e,
	0x9c, 0xff, 0x1c, 0x5a, 0xe2, 0x2f, 0x70, 0xd3, 0x10, 0xa2, 0xf3, 0xb3, 0x60, 0xc5, 0xa6, 0xcc,
	0x8e, 0x0f, 0x32, 0x74, 0xc9, 0xff, 0x9a, 0x3c, 0x45, 0xa7, 0x5a, 0xdd, 0xfc, 0x87, 0xc1, 0x2e,
	0x31, 0xce, 0x61, 0xdb, 0xe9, 0xb9, 0x13, 0xac, 0x60, 0xe5, 0xbe, 0x8a, 0x37, 0x3f, 0x40, 0xa6,
	0x17, 0xdf, 0xd1, 0x54, 0x0f, 0x1a, 0x8d, 0xb8, 0x2a, 0x58, 0x79, 0x5b, 0x41, 0x42, 0x5f, 0x1a,
	0x0d, 0x7f, 0x84, 0xfd, 0x45, 0x30, 0xa8, 0x5d, 0x2f, 0x36, 0xd1, 0xb8, 0x84, 0xde, 0x03, 0xe2,
	0x6f, 0x90, 0xa5, 0x6f, 0x75, 0x98, 0x21, 0xb6, 0x05, 0x2b, 0xb3, 0x63, 0x2e, 0xd3, 0x46, 0xb9,
	0x6e, 0x94, 0xdf, 0xeb, 0xc6, 0x0a, 0x92, 0x1e, 0x00, 0xbf, 0x87, 0x0d, 0xce, 0x56, 0x5c, 0xc7,
	0xda, 0x70, 0x9e, 0x77, 0x31, 0xf1, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x21, 0xcd, 0xee,
	0x67, 0x01, 0x00, 0x00,
}
