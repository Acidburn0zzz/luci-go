// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/milo/api/config/project.proto

/*
Package config is a generated protocol buffer package.

It is generated from these files:
	go.chromium.org/luci/milo/api/config/project.proto
	go.chromium.org/luci/milo/api/config/settings.proto

It has these top-level messages:
	Project
	Link
	Oncall
	LinkGroup
	ConsoleSummaryGroup
	Header
	Console
	Builder
	Settings
*/
package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Project is a project definition for Milo.
type Project struct {
	// Consoles is a list of consoles to define under /console/
	Consoles []*Console `protobuf:"bytes,2,rep,name=consoles" json:"consoles,omitempty"`
	// Headers is a list of defined headers that may be referenced by a console.
	Headers []*Header `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty"`
	// LogoUrl is the URL to the logo for this project.
	// This field is optional. The logo URL must have a host of
	// storage.googleapis.com.
	LogoUrl string `protobuf:"bytes,4,opt,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Project) GetConsoles() []*Console {
	if m != nil {
		return m.Consoles
	}
	return nil
}

func (m *Project) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Project) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

// Link is a link to an internet resource, which will be rendered out as
// an anchor tag <a href="url" alt="alt">text</a>.
type Link struct {
	// Text is displayed as the text between the anchor tags.
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	// Url is the URL to link to.
	Url string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	// Alt is the alt text displayed when hovering over the text.
	Alt string `protobuf:"bytes,3,opt,name=alt" json:"alt,omitempty"`
}

func (m *Link) Reset()                    { *m = Link{} }
func (m *Link) String() string            { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()               {}
func (*Link) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Link) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Link) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Link) GetAlt() string {
	if m != nil {
		return m.Alt
	}
	return ""
}

// Oncall contains information about who is currently scheduled as the
// oncall (Sheriff, trooper, etc) for certain rotations.
type Oncall struct {
	// Name is the name of the oncall rotation being displayed.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Url is an URL to a json endpoint with the following format:
	// {
	//   "updated_unix_timestamp": <int>,
	//   "emails": [
	//     "email@somewhere.com",
	//     "email@nowhere.com
	//   ]
	// }
	Url string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *Oncall) Reset()                    { *m = Oncall{} }
func (m *Oncall) String() string            { return proto.CompactTextString(m) }
func (*Oncall) ProtoMessage()               {}
func (*Oncall) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Oncall) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Oncall) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// LinkGroup is a list of links, optionally given a name.
type LinkGroup struct {
	// Name is the name of this list of links. This is optional.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Links is a list of links to display.
	Links []*Link `protobuf:"bytes,2,rep,name=links" json:"links,omitempty"`
}

func (m *LinkGroup) Reset()                    { *m = LinkGroup{} }
func (m *LinkGroup) String() string            { return proto.CompactTextString(m) }
func (*LinkGroup) ProtoMessage()               {}
func (*LinkGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LinkGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LinkGroup) GetLinks() []*Link {
	if m != nil {
		return m.Links
	}
	return nil
}

// ConsoleSummaryGroup is a list of consoles to be displayed as console summaries
// (aka the little bubbles at the top of the console).  This can optionally
// have a group name if specified in the group_link.
// (e.g. "Tree closers", "Experimental", etc)
type ConsoleSummaryGroup struct {
	// Title is a name or label for this group of consoles.  This is optional.
	Title *Link `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	// ConsoleIds is a list of console ids to display in this console group.
	// Each console id must be prepended with its related project (e.g.
	// chromium/main) because console ids are project-local.
	// Only consoles from the same project are supported.
	// TODO(hinoka): Allow cross-project consoles.
	ConsoleIds []string `protobuf:"bytes,2,rep,name=console_ids,json=consoleIds" json:"console_ids,omitempty"`
}

func (m *ConsoleSummaryGroup) Reset()                    { *m = ConsoleSummaryGroup{} }
func (m *ConsoleSummaryGroup) String() string            { return proto.CompactTextString(m) }
func (*ConsoleSummaryGroup) ProtoMessage()               {}
func (*ConsoleSummaryGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ConsoleSummaryGroup) GetTitle() *Link {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *ConsoleSummaryGroup) GetConsoleIds() []string {
	if m != nil {
		return m.ConsoleIds
	}
	return nil
}

// Header is a collection of links, rotation information, and console summaries
// that are displayed at the top of a console, below the tree status information.
// Links and oncall information is always laid out to the left, while
// console groups are laid out on the right.  Each oncall and links group
// take up a row.
type Header struct {
	// Oncalls are a reference to oncall rotations, which is a URL to a json
	// endpoint with the following format:
	// {
	//   "updated_unix_timestamp": <int>,
	//   "emails": [
	//     "email@somewhere.com",
	//     "email@nowhere.com
	//   ]
	// }
	Oncalls []*Oncall `protobuf:"bytes,1,rep,name=oncalls" json:"oncalls,omitempty"`
	// Links is a list of named groups of web links.
	Links []*LinkGroup `protobuf:"bytes,2,rep,name=links" json:"links,omitempty"`
	// ConsoleGroups are groups of console summaries, each optionally named.
	ConsoleGroups []*ConsoleSummaryGroup `protobuf:"bytes,3,rep,name=console_groups,json=consoleGroups" json:"console_groups,omitempty"`
	// TreeStatusHost is the hostname of the chromium-status instance where
	// the tree status of this console is hosted.  If provided, this will appear
	// as the bar at the very top of the page.
	TreeStatusHost string `protobuf:"bytes,4,opt,name=tree_status_host,json=treeStatusHost" json:"tree_status_host,omitempty"`
	// Id is a reference to the header.
	Id string `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Header) GetOncalls() []*Oncall {
	if m != nil {
		return m.Oncalls
	}
	return nil
}

func (m *Header) GetLinks() []*LinkGroup {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Header) GetConsoleGroups() []*ConsoleSummaryGroup {
	if m != nil {
		return m.ConsoleGroups
	}
	return nil
}

func (m *Header) GetTreeStatusHost() string {
	if m != nil {
		return m.TreeStatusHost
	}
	return ""
}

func (m *Header) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Console is a waterfall definition consisting of one or more builders.
type Console struct {
	// Id is the reference to the console, and will be the address to make the
	// console reachable from /console/<Project>/<ID>.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Name is the longform name of the waterfall, and will be used to be
	// displayed in the title.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// RepoUrl is the URL of the git repository to display as the rows of the console.
	RepoUrl string `protobuf:"bytes,3,opt,name=repo_url,json=repoUrl" json:"repo_url,omitempty"`
	// Ref is the ref to pull commits from when displaying the console.
	// Eg. refs/heads/master
	Ref string `protobuf:"bytes,4,opt,name=ref" json:"ref,omitempty"`
	// ManifestName the name of the manifest the waterfall looks at.
	// This should always be "REVISION".
	// In the future, other manifest names can be supported.
	// TODO(hinoka,iannucci): crbug/832893 - Support custom manifest names, such as "UNPATCHED" / "PATCHED".
	ManifestName string `protobuf:"bytes,5,opt,name=manifest_name,json=manifestName" json:"manifest_name,omitempty"`
	// Builders is a list of builder configurations to display as the columns of the console.
	Builders []*Builder `protobuf:"bytes,6,rep,name=builders" json:"builders,omitempty"`
	// FaviconUrl is the URL to the favicon for this console page.
	// This field is optional. The favicon URL must have a host of
	// storage.googleapis.com.
	FaviconUrl string `protobuf:"bytes,7,opt,name=favicon_url,json=faviconUrl" json:"favicon_url,omitempty"`
	// Header is a collection of links, rotation information, and console summaries
	// displayed under the tree status but above the main console content.
	Header *Header `protobuf:"bytes,9,opt,name=header" json:"header,omitempty"`
	// HeaderId is a reference to a header.  Only one of Header or HeaderId should
	// be specified.
	HeaderId string `protobuf:"bytes,10,opt,name=header_id,json=headerId" json:"header_id,omitempty"`
	// If true, this console will not filter out builds marked as Experimental.
	// This field is optional. By default Consoles only show production builds.
	IncludeExperimentalBuilds bool `protobuf:"varint,11,opt,name=include_experimental_builds,json=includeExperimentalBuilds" json:"include_experimental_builds,omitempty"`
	// If true, only builders view will be available. Console view (i.e. git log
	// based view) will be disabled and users redirected to builder view.
	// Defaults to false.
	BuilderViewOnly bool `protobuf:"varint,12,opt,name=builder_view_only,json=builderViewOnly" json:"builder_view_only,omitempty"`
}

func (m *Console) Reset()                    { *m = Console{} }
func (m *Console) String() string            { return proto.CompactTextString(m) }
func (*Console) ProtoMessage()               {}
func (*Console) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Console) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Console) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Console) GetRepoUrl() string {
	if m != nil {
		return m.RepoUrl
	}
	return ""
}

func (m *Console) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *Console) GetManifestName() string {
	if m != nil {
		return m.ManifestName
	}
	return ""
}

func (m *Console) GetBuilders() []*Builder {
	if m != nil {
		return m.Builders
	}
	return nil
}

func (m *Console) GetFaviconUrl() string {
	if m != nil {
		return m.FaviconUrl
	}
	return ""
}

func (m *Console) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Console) GetHeaderId() string {
	if m != nil {
		return m.HeaderId
	}
	return ""
}

func (m *Console) GetIncludeExperimentalBuilds() bool {
	if m != nil {
		return m.IncludeExperimentalBuilds
	}
	return false
}

func (m *Console) GetBuilderViewOnly() bool {
	if m != nil {
		return m.BuilderViewOnly
	}
	return false
}

// Builder is a reference to a Milo builder.
type Builder struct {
	// Name is the BuilderID of the builders you wish to display for this column
	// in the console. e.g.
	//   * "buildbot/chromium.linux/Linux Tests"
	//   * "buildbucket/luci.chromium.try/linux_chromium_rel_ng"
	//
	// If multiple names are specified, the console will show the union of the
	// builders.
	Name []string `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
	// Category describes the hierarchy of the builder on the header of the
	// console as a "|" delimited list.  Neighboring builders with common ancestors
	// will be have their headers merged.
	Category string `protobuf:"bytes,2,opt,name=category" json:"category,omitempty"`
	// ShortName is the 1-3 character abbreviation of the builder.
	ShortName string `protobuf:"bytes,3,opt,name=short_name,json=shortName" json:"short_name,omitempty"`
}

func (m *Builder) Reset()                    { *m = Builder{} }
func (m *Builder) String() string            { return proto.CompactTextString(m) }
func (*Builder) ProtoMessage()               {}
func (*Builder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Builder) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Builder) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Builder) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func init() {
	proto.RegisterType((*Project)(nil), "config.Project")
	proto.RegisterType((*Link)(nil), "config.Link")
	proto.RegisterType((*Oncall)(nil), "config.Oncall")
	proto.RegisterType((*LinkGroup)(nil), "config.LinkGroup")
	proto.RegisterType((*ConsoleSummaryGroup)(nil), "config.ConsoleSummaryGroup")
	proto.RegisterType((*Header)(nil), "config.Header")
	proto.RegisterType((*Console)(nil), "config.Console")
	proto.RegisterType((*Builder)(nil), "config.Builder")
}

func init() { proto.RegisterFile("go.chromium.org/luci/milo/api/config/project.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0x5d, 0x4f, 0xdb, 0x3c,
	0x14, 0x56, 0xda, 0xd2, 0x24, 0x07, 0x28, 0xc5, 0xef, 0x4d, 0x78, 0xd1, 0x34, 0x94, 0x49, 0x5b,
	0x35, 0xa4, 0x56, 0x62, 0xf7, 0x5c, 0x80, 0xa6, 0x01, 0x9a, 0xc6, 0x14, 0xc4, 0x34, 0xed, 0x26,
	0x32, 0x89, 0x9b, 0x7a, 0x38, 0x76, 0x64, 0x3b, 0x40, 0x2f, 0x27, 0xed, 0x4f, 0xee, 0xdf, 0x4c,
	0xfe, 0x48, 0xd5, 0xc2, 0xee, 0x8e, 0x9f, 0xe7, 0x7c, 0x3f, 0x27, 0x81, 0x93, 0x4a, 0x4c, 0x8b,
	0x85, 0x14, 0x35, 0x6d, 0xeb, 0xa9, 0x90, 0xd5, 0x8c, 0xb5, 0x05, 0x9d, 0xd5, 0x94, 0x89, 0x19,
	0x6e, 0xe8, 0xac, 0x10, 0x7c, 0x4e, 0xab, 0x59, 0x23, 0xc5, 0x4f, 0x52, 0xe8, 0x69, 0x23, 0x85,
	0x16, 0x68, 0xe8, 0xd0, 0xf4, 0x57, 0x00, 0xe1, 0x57, 0xc7, 0xa0, 0x63, 0x88, 0x0a, 0xc1, 0x95,
	0x60, 0x44, 0x25, 0xbd, 0xa3, 0xfe, 0x64, 0xfb, 0x64, 0x6f, 0xea, 0xdc, 0xa6, 0xe7, 0x0e, 0xcf,
	0x56, 0x0e, 0x68, 0x02, 0xe1, 0x82, 0xe0, 0x92, 0x48, 0x95, 0xf4, 0xad, 0xef, 0xa8, 0xf3, 0xbd,
	0xb0, 0x70, 0xd6, 0xd1, 0xe8, 0x00, 0x22, 0x26, 0x2a, 0x91, 0xb7, 0x92, 0x25, 0x83, 0xa3, 0x60,
	0x12, 0x67, 0xa1, 0x79, 0xdf, 0x4a, 0x76, 0x35, 0x88, 0x82, 0x71, 0x2f, 0x3d, 0x85, 0xc1, 0x67,
	0xca, 0xef, 0x11, 0x82, 0x81, 0x26, 0x4f, 0x3a, 0x09, 0xac, 0x93, 0xb5, 0xd1, 0x18, 0xfa, 0x26,
	0xae, 0x67, 0x21, 0x63, 0x1a, 0x04, 0x33, 0x9d, 0xf4, 0x1d, 0x82, 0x99, 0x4e, 0xa7, 0x30, 0xbc,
	0xe6, 0x05, 0x66, 0xcc, 0x64, 0xe0, 0xb8, 0x26, 0x5d, 0x06, 0x63, 0xbf, 0xcc, 0x90, 0x9e, 0x43,
	0x6c, 0xea, 0x7d, 0x92, 0xa2, 0x6d, 0xfe, 0x19, 0x92, 0xc2, 0x16, 0xa3, 0xfc, 0xbe, 0xdb, 0xc2,
	0x4e, 0x37, 0x99, 0x89, 0xca, 0x1c, 0x95, 0xfe, 0x80, 0xff, 0xfc, 0x52, 0x6e, 0xda, 0xba, 0xc6,
	0x72, 0xe9, 0xd2, 0xa5, 0xb0, 0xa5, 0xa9, 0x66, 0x2e, 0xdf, 0x8b, 0x50, 0x4b, 0xa1, 0xd7, 0xb0,
	0xed, 0xd7, 0x98, 0xd3, 0xd2, 0x15, 0x89, 0x33, 0xf0, 0xd0, 0x65, 0xa9, 0xd2, 0x3f, 0x01, 0x0c,
	0xdd, 0x16, 0xcd, 0x9a, 0x85, 0x9d, 0x4d, 0x25, 0xc1, 0xe6, 0x9a, 0xdd, 0xc8, 0x59, 0x47, 0xa3,
	0x77, 0x9b, 0x4d, 0xef, 0xaf, 0x57, 0xb6, 0xbd, 0xf9, 0xce, 0xd1, 0x19, 0x8c, 0xba, 0xf2, 0x95,
	0xc1, 0x3b, 0x01, 0x0f, 0x9f, 0x89, 0xbd, 0x3e, 0x57, 0xb6, 0xeb, 0x43, 0xec, 0xcb, 0xa8, 0x3f,
	0xd6, 0x92, 0x90, 0x5c, 0x69, 0xac, 0x5b, 0x95, 0x2f, 0x84, 0xd2, 0x5e, 0xdb, 0x91, 0xc1, 0x6f,
	0x2c, 0x7c, 0x21, 0x94, 0x46, 0x23, 0xe8, 0xd1, 0x32, 0xd9, 0xb2, 0x5c, 0x8f, 0x96, 0xe9, 0xef,
	0x3e, 0x84, 0xbe, 0x80, 0xe7, 0x82, 0x8e, 0x5b, 0x69, 0xd1, 0x5b, 0xd3, 0xe2, 0x00, 0x22, 0x49,
	0x1a, 0x77, 0x3d, 0x4e, 0xf3, 0xd0, 0xbc, 0x6f, 0xdd, 0x25, 0x48, 0x32, 0xf7, 0x75, 0x8d, 0x89,
	0xde, 0xc0, 0x6e, 0x8d, 0x39, 0x9d, 0x13, 0xa5, 0x73, 0x9b, 0xc9, 0xd5, 0xdd, 0xe9, 0xc0, 0x2f,
	0x26, 0xe3, 0x31, 0x44, 0x77, 0x2d, 0x65, 0xf6, 0x74, 0x87, 0x9b, 0x67, 0x7e, 0xe6, 0xf0, 0x6c,
	0xe5, 0x60, 0xb4, 0x9a, 0xe3, 0x07, 0x5a, 0x08, 0x6e, 0x3b, 0x08, 0x6d, 0x3e, 0xf0, 0x90, 0x69,
	0xe2, 0x2d, 0x0c, 0xdd, 0xa1, 0x27, 0xb1, 0x55, 0xfc, 0xf9, 0x67, 0xe0, 0x59, 0x74, 0x08, 0xb1,
	0xb3, 0x72, 0x5a, 0x26, 0x60, 0xd3, 0x44, 0x0e, 0xb8, 0x2c, 0xd1, 0x29, 0x1c, 0x52, 0x5e, 0xb0,
	0xb6, 0x24, 0x39, 0x79, 0x6a, 0x88, 0xa4, 0x35, 0xe1, 0x1a, 0xb3, 0xdc, 0xb6, 0xa1, 0x92, 0xed,
	0xa3, 0x60, 0x12, 0x65, 0x07, 0xde, 0xe5, 0xe3, 0x9a, 0x87, 0x6d, 0x58, 0xa1, 0xf7, 0xb0, 0xef,
	0x3b, 0xce, 0x1f, 0x28, 0x79, 0xcc, 0x05, 0x67, 0xcb, 0x64, 0xc7, 0x46, 0xed, 0x79, 0xe2, 0x1b,
	0x25, 0x8f, 0xd7, 0x9c, 0x2d, 0xaf, 0x06, 0x51, 0x34, 0x8e, 0xd3, 0xef, 0x10, 0xfa, 0x61, 0xd7,
	0xbe, 0x80, 0xfe, 0x6a, 0xeb, 0xff, 0x43, 0x54, 0x60, 0x4d, 0x2a, 0x21, 0x97, 0x5e, 0x8d, 0xd5,
	0x1b, 0xbd, 0x02, 0x50, 0x0b, 0x21, 0xfd, 0x86, 0x9d, 0x26, 0xb1, 0x45, 0xcc, 0x7a, 0xef, 0x86,
	0xf6, 0x07, 0xf3, 0xe1, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x0d, 0xe8, 0xc3, 0x96, 0x04,
	0x00, 0x00,
}
