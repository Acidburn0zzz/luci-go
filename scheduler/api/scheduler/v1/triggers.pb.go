// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/scheduler/api/scheduler/v1/triggers.proto

package scheduler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/struct"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Trigger can be emitted by triggering tasks (such as Gitiles tasks) or through
// API and consumed by triggered tasks (such as Buildbucket tasks).
type Trigger struct {
	// Unique identifier of the trigger.
	//
	// It is used to deduplicate and hence provide idempotency for adding
	// a trigger. Each job has an internal buffer with IDs of recent triggers it
	// received. Triggers that have already been seen are silently skipped. The
	// buffer is periodically cleaned, so old IDs can be potentially reused,
	// though you should not rely on that.
	//
	// Must be provided by whoever emits the trigger. Can be anything at all, as
	// long as it is unique.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Optional user friendly name for this trigger that shows up in Scheduler UI.
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	// Optional HTTP link to display in Scheduler UI.
	Url string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	// Actual trigger data. Its type defines how the trigger will be processed
	// by the Scheduler, see corresponding protos.
	//
	// Types that are valid to be assigned to Payload:
	//	*Trigger_Cron
	//	*Trigger_Noop
	//	*Trigger_Gitiles
	//	*Trigger_Buildbucket
	Payload isTrigger_Payload `protobuf_oneof:"payload"`
}

func (m *Trigger) Reset()                    { *m = Trigger{} }
func (m *Trigger) String() string            { return proto.CompactTextString(m) }
func (*Trigger) ProtoMessage()               {}
func (*Trigger) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type isTrigger_Payload interface {
	isTrigger_Payload()
}

type Trigger_Cron struct {
	Cron *CronTrigger `protobuf:"bytes,40,opt,name=cron,oneof"`
}
type Trigger_Noop struct {
	Noop *NoopTrigger `protobuf:"bytes,50,opt,name=noop,oneof"`
}
type Trigger_Gitiles struct {
	Gitiles *GitilesTrigger `protobuf:"bytes,51,opt,name=gitiles,oneof"`
}
type Trigger_Buildbucket struct {
	Buildbucket *BuildbucketTrigger `protobuf:"bytes,52,opt,name=buildbucket,oneof"`
}

func (*Trigger_Cron) isTrigger_Payload()        {}
func (*Trigger_Noop) isTrigger_Payload()        {}
func (*Trigger_Gitiles) isTrigger_Payload()     {}
func (*Trigger_Buildbucket) isTrigger_Payload() {}

func (m *Trigger) GetPayload() isTrigger_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Trigger) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Trigger) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Trigger) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Trigger) GetCron() *CronTrigger {
	if x, ok := m.GetPayload().(*Trigger_Cron); ok {
		return x.Cron
	}
	return nil
}

func (m *Trigger) GetNoop() *NoopTrigger {
	if x, ok := m.GetPayload().(*Trigger_Noop); ok {
		return x.Noop
	}
	return nil
}

func (m *Trigger) GetGitiles() *GitilesTrigger {
	if x, ok := m.GetPayload().(*Trigger_Gitiles); ok {
		return x.Gitiles
	}
	return nil
}

func (m *Trigger) GetBuildbucket() *BuildbucketTrigger {
	if x, ok := m.GetPayload().(*Trigger_Buildbucket); ok {
		return x.Buildbucket
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Trigger) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Trigger_OneofMarshaler, _Trigger_OneofUnmarshaler, _Trigger_OneofSizer, []interface{}{
		(*Trigger_Cron)(nil),
		(*Trigger_Noop)(nil),
		(*Trigger_Gitiles)(nil),
		(*Trigger_Buildbucket)(nil),
	}
}

func _Trigger_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Trigger)
	// payload
	switch x := m.Payload.(type) {
	case *Trigger_Cron:
		b.EncodeVarint(40<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cron); err != nil {
			return err
		}
	case *Trigger_Noop:
		b.EncodeVarint(50<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Noop); err != nil {
			return err
		}
	case *Trigger_Gitiles:
		b.EncodeVarint(51<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Gitiles); err != nil {
			return err
		}
	case *Trigger_Buildbucket:
		b.EncodeVarint(52<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Buildbucket); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Trigger.Payload has unexpected type %T", x)
	}
	return nil
}

func _Trigger_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Trigger)
	switch tag {
	case 40: // payload.cron
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CronTrigger)
		err := b.DecodeMessage(msg)
		m.Payload = &Trigger_Cron{msg}
		return true, err
	case 50: // payload.noop
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NoopTrigger)
		err := b.DecodeMessage(msg)
		m.Payload = &Trigger_Noop{msg}
		return true, err
	case 51: // payload.gitiles
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GitilesTrigger)
		err := b.DecodeMessage(msg)
		m.Payload = &Trigger_Gitiles{msg}
		return true, err
	case 52: // payload.buildbucket
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BuildbucketTrigger)
		err := b.DecodeMessage(msg)
		m.Payload = &Trigger_Buildbucket{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Trigger_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Trigger)
	// payload
	switch x := m.Payload.(type) {
	case *Trigger_Cron:
		s := proto.Size(x.Cron)
		n += proto.SizeVarint(40<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Trigger_Noop:
		s := proto.Size(x.Noop)
		n += proto.SizeVarint(50<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Trigger_Gitiles:
		s := proto.Size(x.Gitiles)
		n += proto.SizeVarint(51<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Trigger_Buildbucket:
		s := proto.Size(x.Buildbucket)
		n += proto.SizeVarint(52<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CronTrigger is used internally by Scheduler to implement periodic jobs.
//
// It is emitted by the cron state machines whenever it decides the scheduler
// should launch the invocation.
//
// Note: such triggers can't be scheduled through external Scheduler API. They
// may appear in the API responses though.
type CronTrigger struct {
	Generation int64 `protobuf:"varint,1,opt,name=generation" json:"generation,omitempty"`
}

func (m *CronTrigger) Reset()                    { *m = CronTrigger{} }
func (m *CronTrigger) String() string            { return proto.CompactTextString(m) }
func (*CronTrigger) ProtoMessage()               {}
func (*CronTrigger) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CronTrigger) GetGeneration() int64 {
	if m != nil {
		return m.Generation
	}
	return 0
}

// NoopTrigger is used by Scheduler integration tests to represent test
// triggers.
type NoopTrigger struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *NoopTrigger) Reset()                    { *m = NoopTrigger{} }
func (m *NoopTrigger) String() string            { return proto.CompactTextString(m) }
func (*NoopTrigger) ProtoMessage()               {}
func (*NoopTrigger) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *NoopTrigger) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// GitilesTrigger is emitted by sources that watch Gitiles and consumed by
// Buildbucket tasks.
//
// Such triggers are emitted whenever the repository state changes.
type GitilesTrigger struct {
	Repo     string `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Ref      string `protobuf:"bytes,2,opt,name=ref" json:"ref,omitempty"`
	Revision string `protobuf:"bytes,3,opt,name=revision" json:"revision,omitempty"`
}

func (m *GitilesTrigger) Reset()                    { *m = GitilesTrigger{} }
func (m *GitilesTrigger) String() string            { return proto.CompactTextString(m) }
func (*GitilesTrigger) ProtoMessage()               {}
func (*GitilesTrigger) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GitilesTrigger) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *GitilesTrigger) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *GitilesTrigger) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

// BuildbucketTrigger is emitted by sources that request a build and consumed by
// Buildbucket tasks.
//
// The trigger contains information to pass to the new Buildbucket build.
//
// Note: what builds to trigger is specified separately, either in the job
// configuration (when one job triggers another) or via the API request
// parameters (when triggering through public API).
type BuildbucketTrigger struct {
	Properties *google_protobuf1.Struct `protobuf:"bytes,1,opt,name=properties" json:"properties,omitempty"`
	Tags       []string                 `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *BuildbucketTrigger) Reset()                    { *m = BuildbucketTrigger{} }
func (m *BuildbucketTrigger) String() string            { return proto.CompactTextString(m) }
func (*BuildbucketTrigger) ProtoMessage()               {}
func (*BuildbucketTrigger) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *BuildbucketTrigger) GetProperties() *google_protobuf1.Struct {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *BuildbucketTrigger) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*Trigger)(nil), "scheduler.Trigger")
	proto.RegisterType((*CronTrigger)(nil), "scheduler.CronTrigger")
	proto.RegisterType((*NoopTrigger)(nil), "scheduler.NoopTrigger")
	proto.RegisterType((*GitilesTrigger)(nil), "scheduler.GitilesTrigger")
	proto.RegisterType((*BuildbucketTrigger)(nil), "scheduler.BuildbucketTrigger")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/scheduler/api/scheduler/v1/triggers.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcf, 0x8e, 0xd4, 0x30,
	0x0c, 0xc6, 0x99, 0x76, 0x61, 0x18, 0x57, 0x5a, 0xa1, 0x08, 0x41, 0x58, 0x01, 0x1a, 0x7a, 0x9a,
	0x03, 0xa4, 0x62, 0x16, 0xc4, 0x0d, 0x89, 0xe5, 0x00, 0x27, 0x0e, 0x85, 0x17, 0x48, 0xdb, 0x6c,
	0x36, 0x22, 0x5b, 0x47, 0x6e, 0x32, 0x12, 0xaf, 0xc3, 0x93, 0xa2, 0xa4, 0xf3, 0x27, 0x68, 0x6e,
	0x9f, 0xed, 0xdf, 0xd7, 0xd8, 0xae, 0xe1, 0xb3, 0x46, 0xd1, 0xdf, 0x11, 0xde, 0x9b, 0x70, 0x2f,
	0x90, 0x74, 0x63, 0x43, 0x6f, 0x9a, 0xa9, 0xbf, 0x53, 0x43, 0xb0, 0x8a, 0x1a, 0xe9, 0xf2, 0x68,
	0xf7, 0xbe, 0xf1, 0x64, 0xb4, 0x56, 0x34, 0x09, 0x47, 0xe8, 0x91, 0xad, 0x8e, 0xc5, 0xab, 0x97,
	0x1a, 0x51, 0x5b, 0xd5, 0xa4, 0x42, 0x17, 0x6e, 0x9b, 0xc9, 0x53, 0xe8, 0xfd, 0x0c, 0xd6, 0x7f,
	0x0b, 0x58, 0xfe, 0x9a, 0xbd, 0xec, 0x12, 0x0a, 0x33, 0xf0, 0xc5, 0x7a, 0xb1, 0x59, 0xb5, 0x85,
	0x19, 0xd8, 0x53, 0x78, 0xe8, 0x8d, 0xb7, 0x8a, 0x17, 0x29, 0x35, 0x07, 0xec, 0x09, 0x94, 0x81,
	0x2c, 0x2f, 0x53, 0x2e, 0x4a, 0xf6, 0x16, 0x2e, 0x7a, 0xc2, 0x91, 0x6f, 0xd6, 0x8b, 0x4d, 0xb5,
	0x7d, 0x26, 0x8e, 0x6f, 0x8b, 0xaf, 0x84, 0xe3, 0xfe, 0xeb, 0xdf, 0x1f, 0xb4, 0x89, 0x8a, 0xf4,
	0x88, 0xe8, 0xf8, 0xf6, 0x8c, 0xfe, 0x81, 0xe8, 0x32, 0x3a, 0x52, 0xec, 0x23, 0x2c, 0xb5, 0xf1,
	0xc6, 0xaa, 0x89, 0x5f, 0x27, 0xc3, 0x8b, 0xcc, 0xf0, 0x6d, 0xae, 0x9c, 0x3c, 0x07, 0x96, 0x7d,
	0x81, 0xaa, 0x0b, 0xc6, 0x0e, 0x5d, 0xe8, 0x7f, 0x2b, 0xcf, 0x3f, 0x24, 0xeb, 0xab, 0xcc, 0x7a,
	0x73, 0xaa, 0x9e, 0xec, 0xb9, 0xe7, 0x66, 0x05, 0x4b, 0x27, 0xff, 0x58, 0x94, 0x43, 0xfd, 0x0e,
	0xaa, 0x6c, 0x12, 0xf6, 0x1a, 0x40, 0xab, 0x51, 0x91, 0xf4, 0x06, 0xc7, 0xb4, 0xaf, 0xb2, 0xcd,
	0x32, 0xf5, 0x1b, 0xa8, 0xb2, 0x51, 0x18, 0x83, 0x8b, 0x41, 0x7a, 0xb9, 0x5f, 0x6c, 0xd2, 0x75,
	0x0b, 0x97, 0xff, 0x37, 0x1f, 0x29, 0x52, 0x0e, 0x0f, 0x54, 0xd4, 0x71, 0xd5, 0xa4, 0x6e, 0xf7,
	0xeb, 0x8f, 0x92, 0x5d, 0xc1, 0x63, 0x52, 0x3b, 0x33, 0xc5, 0x87, 0xe7, 0x3f, 0x70, 0x8c, 0x6b,
	0x09, 0xec, 0x7c, 0x2a, 0xf6, 0x09, 0xc0, 0x11, 0x3a, 0x45, 0xde, 0xa8, 0x29, 0x7d, 0xbd, 0xda,
	0x3e, 0x17, 0xf3, 0x4d, 0x88, 0xc3, 0x4d, 0x88, 0x9f, 0xe9, 0x26, 0xda, 0x0c, 0x8d, 0x0d, 0x79,
	0xa9, 0x27, 0x5e, 0xac, 0xcb, 0xd8, 0x50, 0xd4, 0xdd, 0xa3, 0x64, 0xb8, 0xfe, 0x17, 0x00, 0x00,
	0xff, 0xff, 0x83, 0xbe, 0xae, 0x6f, 0x9f, 0x02, 0x00, 0x00,
}
