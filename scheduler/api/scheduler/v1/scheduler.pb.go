// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/luci/luci-go/scheduler/api/scheduler/v1/scheduler.proto

/*
Package scheduler is a generated protocol buffer package.

It is generated from these files:
	github.com/luci/luci-go/scheduler/api/scheduler/v1/scheduler.proto

It has these top-level messages:
	JobsRequest
	JobsReply
	Job
	JobState
	InvocationsRequest
	InvocationsReply
	Invocation
*/
package scheduler

import prpc "github.com/luci/luci-go/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type JobsRequest struct {
	// If not specified or "", all projects' jobs are returned.
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
}

func (m *JobsRequest) Reset()                    { *m = JobsRequest{} }
func (m *JobsRequest) String() string            { return proto.CompactTextString(m) }
func (*JobsRequest) ProtoMessage()               {}
func (*JobsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JobsRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

type JobsReply struct {
	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *JobsReply) Reset()                    { *m = JobsReply{} }
func (m *JobsReply) String() string            { return proto.CompactTextString(m) }
func (*JobsReply) ProtoMessage()               {}
func (*JobsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JobsReply) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type Job struct {
	Name     string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Project  string    `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	Schedule string    `protobuf:"bytes,3,opt,name=schedule" json:"schedule,omitempty"`
	State    *JobState `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Job) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Job) GetSchedule() string {
	if m != nil {
		return m.Schedule
	}
	return ""
}

func (m *Job) GetState() *JobState {
	if m != nil {
		return m.State
	}
	return nil
}

type JobState struct {
	UiStatus string `protobuf:"bytes,1,opt,name=ui_status,json=uiStatus" json:"ui_status,omitempty"`
}

func (m *JobState) Reset()                    { *m = JobState{} }
func (m *JobState) String() string            { return proto.CompactTextString(m) }
func (*JobState) ProtoMessage()               {}
func (*JobState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JobState) GetUiStatus() string {
	if m != nil {
		return m.UiStatus
	}
	return ""
}

type InvocationsRequest struct {
	Project string `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	Job     string `protobuf:"bytes,2,opt,name=job" json:"job,omitempty"`
	Cursor  string `protobuf:"bytes,3,opt,name=cursor" json:"cursor,omitempty"`
	// page_size defaults to 50 which is maximum.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
}

func (m *InvocationsRequest) Reset()                    { *m = InvocationsRequest{} }
func (m *InvocationsRequest) String() string            { return proto.CompactTextString(m) }
func (*InvocationsRequest) ProtoMessage()               {}
func (*InvocationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *InvocationsRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *InvocationsRequest) GetJob() string {
	if m != nil {
		return m.Job
	}
	return ""
}

func (m *InvocationsRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *InvocationsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type InvocationsReply struct {
	Invocations []*Invocation `protobuf:"bytes,1,rep,name=invocations" json:"invocations,omitempty"`
	NextCursor  string        `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
}

func (m *InvocationsReply) Reset()                    { *m = InvocationsReply{} }
func (m *InvocationsReply) String() string            { return proto.CompactTextString(m) }
func (*InvocationsReply) ProtoMessage()               {}
func (*InvocationsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InvocationsReply) GetInvocations() []*Invocation {
	if m != nil {
		return m.Invocations
	}
	return nil
}

func (m *InvocationsReply) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

type Invocation struct {
	Id      int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Job     string `protobuf:"bytes,2,opt,name=job" json:"job,omitempty"`
	Project string `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
	// start_ts is unix timestamp in microseconds.
	StartedTs int64 `protobuf:"varint,4,opt,name=started_ts,json=startedTs" json:"started_ts,omitempty"`
	// finished_ts is unix timestamp in microseconds. Set only if final is true.
	FinishedTs int64 `protobuf:"varint,5,opt,name=finished_ts,json=finishedTs" json:"finished_ts,omitempty"`
	// triggered_by is an identity ("kind:value") which is specified only if
	// invocation was triggered by not the scheduler service itself.
	TriggeredBy string `protobuf:"bytes,6,opt,name=triggered_by,json=triggeredBy" json:"triggered_by,omitempty"`
	// Latest status of a job.
	Status string `protobuf:"bytes,7,opt,name=status" json:"status,omitempty"`
	// If true, the status of the job is final and won't change.
	Final bool `protobuf:"varint,8,opt,name=final" json:"final,omitempty"`
	// config_revision pins project/job config version according to which this
	// invocation was created.
	ConfigRevision string `protobuf:"bytes,9,opt,name=config_revision,json=configRevision" json:"config_revision,omitempty"`
	// view_url points to human readable page for a given invocation if available.
	ViewUrl string `protobuf:"bytes,10,opt,name=view_url,json=viewUrl" json:"view_url,omitempty"`
}

func (m *Invocation) Reset()                    { *m = Invocation{} }
func (m *Invocation) String() string            { return proto.CompactTextString(m) }
func (*Invocation) ProtoMessage()               {}
func (*Invocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Invocation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Invocation) GetJob() string {
	if m != nil {
		return m.Job
	}
	return ""
}

func (m *Invocation) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Invocation) GetStartedTs() int64 {
	if m != nil {
		return m.StartedTs
	}
	return 0
}

func (m *Invocation) GetFinishedTs() int64 {
	if m != nil {
		return m.FinishedTs
	}
	return 0
}

func (m *Invocation) GetTriggeredBy() string {
	if m != nil {
		return m.TriggeredBy
	}
	return ""
}

func (m *Invocation) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Invocation) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

func (m *Invocation) GetConfigRevision() string {
	if m != nil {
		return m.ConfigRevision
	}
	return ""
}

func (m *Invocation) GetViewUrl() string {
	if m != nil {
		return m.ViewUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*JobsRequest)(nil), "scheduler.JobsRequest")
	proto.RegisterType((*JobsReply)(nil), "scheduler.JobsReply")
	proto.RegisterType((*Job)(nil), "scheduler.Job")
	proto.RegisterType((*JobState)(nil), "scheduler.JobState")
	proto.RegisterType((*InvocationsRequest)(nil), "scheduler.InvocationsRequest")
	proto.RegisterType((*InvocationsReply)(nil), "scheduler.InvocationsReply")
	proto.RegisterType((*Invocation)(nil), "scheduler.Invocation")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Scheduler service

type SchedulerClient interface {
	// GetJobs fetches all jobs satisfying JobsRequest and visibility ACLs.
	// If JobsRequest.project is specified but the project doesn't exist, empty
	// list of Jobs is returned.
	GetJobs(ctx context.Context, in *JobsRequest, opts ...grpc.CallOption) (*JobsReply, error)
	// GetInvocations fetches invocations of a given job, most recent first.
	GetInvocations(ctx context.Context, in *InvocationsRequest, opts ...grpc.CallOption) (*InvocationsReply, error)
}
type schedulerPRPCClient struct {
	client *prpc.Client
}

func NewSchedulerPRPCClient(client *prpc.Client) SchedulerClient {
	return &schedulerPRPCClient{client}
}

func (c *schedulerPRPCClient) GetJobs(ctx context.Context, in *JobsRequest, opts ...grpc.CallOption) (*JobsReply, error) {
	out := new(JobsReply)
	err := c.client.Call(ctx, "scheduler.Scheduler", "GetJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerPRPCClient) GetInvocations(ctx context.Context, in *InvocationsRequest, opts ...grpc.CallOption) (*InvocationsReply, error) {
	out := new(InvocationsReply)
	err := c.client.Call(ctx, "scheduler.Scheduler", "GetInvocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) GetJobs(ctx context.Context, in *JobsRequest, opts ...grpc.CallOption) (*JobsReply, error) {
	out := new(JobsReply)
	err := grpc.Invoke(ctx, "/scheduler.Scheduler/GetJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetInvocations(ctx context.Context, in *InvocationsRequest, opts ...grpc.CallOption) (*InvocationsReply, error) {
	out := new(InvocationsReply)
	err := grpc.Invoke(ctx, "/scheduler.Scheduler/GetInvocations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerServer interface {
	// GetJobs fetches all jobs satisfying JobsRequest and visibility ACLs.
	// If JobsRequest.project is specified but the project doesn't exist, empty
	// list of Jobs is returned.
	GetJobs(context.Context, *JobsRequest) (*JobsReply, error)
	// GetInvocations fetches invocations of a given job, most recent first.
	GetInvocations(context.Context, *InvocationsRequest) (*InvocationsReply, error)
}

func RegisterSchedulerServer(s prpc.Registrar, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/GetJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetJobs(ctx, req.(*JobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetInvocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetInvocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.Scheduler/GetInvocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetInvocations(ctx, req.(*InvocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJobs",
			Handler:    _Scheduler_GetJobs_Handler,
		},
		{
			MethodName: "GetInvocations",
			Handler:    _Scheduler_GetInvocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/luci/luci-go/scheduler/api/scheduler/v1/scheduler.proto",
}

func init() {
	proto.RegisterFile("github.com/luci/luci-go/scheduler/api/scheduler/v1/scheduler.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0xe3, 0x7c, 0xd8, 0x63, 0x14, 0xaa, 0xa1, 0x54, 0xa6, 0x55, 0x45, 0xf0, 0x25, 0xe1,
	0x40, 0x22, 0xc2, 0xa1, 0xf7, 0x72, 0xa8, 0x88, 0x38, 0x39, 0xe5, 0x6c, 0xd9, 0xce, 0xc6, 0xd9,
	0xc8, 0xf5, 0x9a, 0xdd, 0x75, 0x20, 0xf9, 0x19, 0xdc, 0xf9, 0xaf, 0x68, 0xd7, 0xeb, 0xc4, 0x11,
	0x45, 0x5c, 0xac, 0x7d, 0x6f, 0x76, 0x67, 0xde, 0x9b, 0x19, 0xc3, 0x7d, 0x46, 0xe5, 0xa6, 0x4a,
	0xa6, 0x29, 0x7b, 0x9a, 0xe5, 0x55, 0x4a, 0xf5, 0xe7, 0x43, 0xc6, 0x66, 0x22, 0xdd, 0x90, 0x55,
	0x95, 0x13, 0x3e, 0x8b, 0x4b, 0xda, 0x42, 0xbb, 0x8f, 0x27, 0x30, 0x2d, 0x39, 0x93, 0x0c, 0xdd,
	0x23, 0x11, 0x8c, 0xc1, 0x5b, 0xb0, 0x44, 0x84, 0xe4, 0x7b, 0x45, 0x84, 0x44, 0x1f, 0x06, 0x25,
	0x67, 0x5b, 0x92, 0x4a, 0xdf, 0x1a, 0x59, 0x13, 0x37, 0x6c, 0x60, 0x30, 0x03, 0xb7, 0xbe, 0x58,
	0xe6, 0x7b, 0x0c, 0xa0, 0xbb, 0x65, 0x89, 0xf0, 0xad, 0x91, 0x3d, 0xf1, 0xe6, 0xc3, 0xe9, 0xa9,
	0xc0, 0x82, 0x25, 0xa1, 0x8e, 0x05, 0x07, 0xb0, 0x17, 0x2c, 0x41, 0x84, 0x6e, 0x11, 0x3f, 0x11,
	0x93, 0x4e, 0x9f, 0xdb, 0x55, 0x3a, 0x67, 0x55, 0xf0, 0x1a, 0x9c, 0x26, 0x97, 0x6f, 0xeb, 0xd0,
	0x11, 0xe3, 0x7b, 0xe8, 0x09, 0x19, 0x4b, 0xe2, 0x77, 0x47, 0xd6, 0xc4, 0x9b, 0xbf, 0x3a, 0xaf,
	0xba, 0x54, 0xa1, 0xb0, 0xbe, 0x11, 0x8c, 0xc1, 0x69, 0x28, 0xbc, 0x01, 0xb7, 0xa2, 0x91, 0xe2,
	0x2b, 0x61, 0x54, 0x38, 0x15, 0x5d, 0x6a, 0x1c, 0x54, 0x80, 0x5f, 0x8a, 0x1d, 0x4b, 0x63, 0x49,
	0x59, 0xf1, 0xff, 0x2e, 0xe0, 0x05, 0xd8, 0x5b, 0x96, 0x18, 0xd5, 0xea, 0x88, 0x57, 0xd0, 0x4f,
	0x2b, 0x2e, 0x18, 0x37, 0x7a, 0x0d, 0x52, 0x65, 0xcb, 0x38, 0x23, 0x91, 0xa0, 0x87, 0x5a, 0x71,
	0x2f, 0x74, 0x14, 0xb1, 0xa4, 0x07, 0x12, 0xe4, 0x70, 0x71, 0x56, 0x56, 0xf5, 0xf4, 0x0e, 0x3c,
	0x7a, 0xe2, 0x4c, 0x6b, 0x5f, 0xb7, 0x4c, 0x9e, 0x5e, 0x84, 0xed, 0x9b, 0xf8, 0x16, 0xbc, 0x82,
	0xfc, 0x94, 0x91, 0x91, 0x51, 0x6b, 0x03, 0x45, 0x7d, 0xd6, 0x4c, 0xf0, 0xbb, 0x03, 0x70, 0x7a,
	0x8c, 0x43, 0xe8, 0xd0, 0x95, 0x36, 0x66, 0x87, 0x1d, 0xba, 0x7a, 0xc6, 0x53, 0xcb, 0xbf, 0x7d,
	0xee, 0xff, 0x16, 0x40, 0xc8, 0x98, 0x4b, 0xb2, 0x8a, 0xa4, 0xd0, 0xb6, 0xec, 0xd0, 0x35, 0xcc,
	0xa3, 0x96, 0xb2, 0xa6, 0x05, 0x15, 0x9b, 0x3a, 0xde, 0xd3, 0x71, 0x68, 0xa8, 0x47, 0x81, 0xef,
	0xe0, 0x85, 0xe4, 0x34, 0xcb, 0x08, 0x27, 0xab, 0x28, 0xd9, 0xfb, 0x7d, 0x9d, 0xde, 0x3b, 0x72,
	0xf7, 0x7b, 0xd5, 0x50, 0x33, 0xac, 0x41, 0xdd, 0xd0, 0x1a, 0xe1, 0x25, 0xf4, 0xd6, 0xb4, 0x88,
	0x73, 0xdf, 0x19, 0x59, 0x13, 0x27, 0xac, 0x01, 0x8e, 0xe1, 0x65, 0xca, 0x8a, 0x35, 0xcd, 0x22,
	0x4e, 0x76, 0x54, 0x50, 0x56, 0xf8, 0xae, 0x7e, 0x36, 0xac, 0xe9, 0xd0, 0xb0, 0xf8, 0x06, 0x9c,
	0x1d, 0x25, 0x3f, 0xa2, 0x8a, 0xe7, 0x3e, 0xd4, 0xa6, 0x14, 0xfe, 0xc6, 0xf3, 0xf9, 0x2f, 0x0b,
	0xdc, 0x65, 0xd3, 0x66, 0xbc, 0x83, 0xc1, 0x03, 0x91, 0x6a, 0xd7, 0xf1, 0xea, 0x7c, 0xc5, 0x9a,
	0xfd, 0xb8, 0xbe, 0xfc, 0x8b, 0x57, 0x03, 0xfc, 0x0a, 0xc3, 0x07, 0x22, 0x5b, 0x73, 0xc5, 0xdb,
	0x67, 0xa7, 0x77, 0x4c, 0x73, 0xf3, 0xaf, 0x70, 0x99, 0xef, 0x93, 0xbe, 0xfe, 0x55, 0x3f, 0xfd,
	0x09, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xfa, 0x4f, 0xce, 0xf0, 0x03, 0x00, 0x00,
}
