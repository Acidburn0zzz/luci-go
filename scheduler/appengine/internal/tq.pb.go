// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/scheduler/appengine/internal/tq.proto

package internal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ReadProjectConfigTask is used to import jobs of some project.
//
// Queue: "read-project-config".
type ReadProjectConfigTask struct {
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (m *ReadProjectConfigTask) Reset()                    { *m = ReadProjectConfigTask{} }
func (m *ReadProjectConfigTask) String() string            { return proto.CompactTextString(m) }
func (*ReadProjectConfigTask) ProtoMessage()               {}
func (*ReadProjectConfigTask) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ReadProjectConfigTask) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

// LaunchInvocationTask is used to start running (or retry a lunch of) a single
// invocation.
//
// It is enqueued non-transactionally, but with the deduplication key.
//
// Queue: "launches".
type LaunchInvocationTask struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	InvId int64  `protobuf:"varint,2,opt,name=inv_id,json=invId" json:"inv_id,omitempty"`
}

func (m *LaunchInvocationTask) Reset()                    { *m = LaunchInvocationTask{} }
func (m *LaunchInvocationTask) String() string            { return proto.CompactTextString(m) }
func (*LaunchInvocationTask) ProtoMessage()               {}
func (*LaunchInvocationTask) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *LaunchInvocationTask) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *LaunchInvocationTask) GetInvId() int64 {
	if m != nil {
		return m.InvId
	}
	return 0
}

// LaunchInvocationsBatchTask is used to kick off several invocations at once.
//
// It is enqueued transactionally. It fans out into many LaunchInvocationTask.
//
// Queue: "batches".
type LaunchInvocationsBatchTask struct {
	Tasks []*LaunchInvocationTask `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *LaunchInvocationsBatchTask) Reset()                    { *m = LaunchInvocationsBatchTask{} }
func (m *LaunchInvocationsBatchTask) String() string            { return proto.CompactTextString(m) }
func (*LaunchInvocationsBatchTask) ProtoMessage()               {}
func (*LaunchInvocationsBatchTask) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *LaunchInvocationsBatchTask) GetTasks() []*LaunchInvocationTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// TriageJobStateTask looks at the state of the job and decided what to do next.
//
// Enqueued non-transactionally. It is throttled to run approximately once per
// second. It looks at pending triggers and recently finished invocations and
// launches new invocations (or schedules timers to do it later).
//
// Queue: "triages".
type TriageJobStateTask struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
}

func (m *TriageJobStateTask) Reset()                    { *m = TriageJobStateTask{} }
func (m *TriageJobStateTask) String() string            { return proto.CompactTextString(m) }
func (*TriageJobStateTask) ProtoMessage()               {}
func (*TriageJobStateTask) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *TriageJobStateTask) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

// InvocationFinishedTask is emitted by the invocation when it finishes.
//
// It is enqueued transactionally.
//
// Queue: "completions".
type InvocationFinishedTask struct {
	JobId    string              `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	InvId    int64               `protobuf:"varint,2,opt,name=inv_id,json=invId" json:"inv_id,omitempty"`
	Triggers *FanOutTriggersTask `protobuf:"bytes,3,opt,name=triggers" json:"triggers,omitempty"`
}

func (m *InvocationFinishedTask) Reset()                    { *m = InvocationFinishedTask{} }
func (m *InvocationFinishedTask) String() string            { return proto.CompactTextString(m) }
func (*InvocationFinishedTask) ProtoMessage()               {}
func (*InvocationFinishedTask) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *InvocationFinishedTask) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *InvocationFinishedTask) GetInvId() int64 {
	if m != nil {
		return m.InvId
	}
	return 0
}

func (m *InvocationFinishedTask) GetTriggers() *FanOutTriggersTask {
	if m != nil {
		return m.Triggers
	}
	return nil
}

// FanOutTriggersTask is a batch task that emits a bunch of triggers.
//
// It is enqueued transactionally. It fans out into many EnqueueTriggersTask,
// one per job ID.
//
// Queue: "triggers".
type FanOutTriggersTask struct {
	JobIds   []string   `protobuf:"bytes,1,rep,name=job_ids,json=jobIds" json:"job_ids,omitempty"`
	Triggers []*Trigger `protobuf:"bytes,2,rep,name=triggers" json:"triggers,omitempty"`
}

func (m *FanOutTriggersTask) Reset()                    { *m = FanOutTriggersTask{} }
func (m *FanOutTriggersTask) String() string            { return proto.CompactTextString(m) }
func (*FanOutTriggersTask) ProtoMessage()               {}
func (*FanOutTriggersTask) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *FanOutTriggersTask) GetJobIds() []string {
	if m != nil {
		return m.JobIds
	}
	return nil
}

func (m *FanOutTriggersTask) GetTriggers() []*Trigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

// EnqueueTriggersTask adds given triggers to a job's pending triggers set.
//
// Enqueued non-transactionally (from FanOutTriggersTask) and transactionally
// (when emitting single trigger from a cron).
//
// Queue: "triggers".
type EnqueueTriggersTask struct {
	JobId    string     `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	Triggers []*Trigger `protobuf:"bytes,2,rep,name=triggers" json:"triggers,omitempty"`
}

func (m *EnqueueTriggersTask) Reset()                    { *m = EnqueueTriggersTask{} }
func (m *EnqueueTriggersTask) String() string            { return proto.CompactTextString(m) }
func (*EnqueueTriggersTask) ProtoMessage()               {}
func (*EnqueueTriggersTask) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *EnqueueTriggersTask) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *EnqueueTriggersTask) GetTriggers() []*Trigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

// ScheduleTimersTask adds a bunch of delayed invocation calls.
//
// It is enqueued transactionally. Results in a bunch of TimerTask calls.
//
// Queue: "timers".
type ScheduleTimersTask struct {
	JobId  string   `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	InvId  int64    `protobuf:"varint,2,opt,name=inv_id,json=invId" json:"inv_id,omitempty"`
	Timers []*Timer `protobuf:"bytes,3,rep,name=timers" json:"timers,omitempty"`
}

func (m *ScheduleTimersTask) Reset()                    { *m = ScheduleTimersTask{} }
func (m *ScheduleTimersTask) String() string            { return proto.CompactTextString(m) }
func (*ScheduleTimersTask) ProtoMessage()               {}
func (*ScheduleTimersTask) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ScheduleTimersTask) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *ScheduleTimersTask) GetInvId() int64 {
	if m != nil {
		return m.InvId
	}
	return 0
}

func (m *ScheduleTimersTask) GetTimers() []*Timer {
	if m != nil {
		return m.Timers
	}
	return nil
}

// TimerTask corresponds to delayed calls added through AddTimer controller API.
//
// Enqueued either transactionally or not. Deduplicated based on invocation's
// PendingTimers set: any timers not in the set are silently skipped.
//
// Queue: "timers".
type TimerTask struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	InvId int64  `protobuf:"varint,2,opt,name=inv_id,json=invId" json:"inv_id,omitempty"`
	Timer *Timer `protobuf:"bytes,3,opt,name=timer" json:"timer,omitempty"`
}

func (m *TimerTask) Reset()                    { *m = TimerTask{} }
func (m *TimerTask) String() string            { return proto.CompactTextString(m) }
func (*TimerTask) ProtoMessage()               {}
func (*TimerTask) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *TimerTask) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *TimerTask) GetInvId() int64 {
	if m != nil {
		return m.InvId
	}
	return 0
}

func (m *TimerTask) GetTimer() *Timer {
	if m != nil {
		return m.Timer
	}
	return nil
}

// CronTickTask is scheduled based on the job's cron schedule.
//
// It is enqueued transactionally when the job changes state (e.g. the job
// appears for the first time or its schedule changes) or from previous cron
// ticks.
//
// Queue: "crons".
type CronTickTask struct {
	JobId     string `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	TickNonce int64  `protobuf:"varint,2,opt,name=tick_nonce,json=tickNonce" json:"tick_nonce,omitempty"`
}

func (m *CronTickTask) Reset()                    { *m = CronTickTask{} }
func (m *CronTickTask) String() string            { return proto.CompactTextString(m) }
func (*CronTickTask) ProtoMessage()               {}
func (*CronTickTask) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *CronTickTask) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *CronTickTask) GetTickNonce() int64 {
	if m != nil {
		return m.TickNonce
	}
	return 0
}

func init() {
	proto.RegisterType((*ReadProjectConfigTask)(nil), "internal.tq.ReadProjectConfigTask")
	proto.RegisterType((*LaunchInvocationTask)(nil), "internal.tq.LaunchInvocationTask")
	proto.RegisterType((*LaunchInvocationsBatchTask)(nil), "internal.tq.LaunchInvocationsBatchTask")
	proto.RegisterType((*TriageJobStateTask)(nil), "internal.tq.TriageJobStateTask")
	proto.RegisterType((*InvocationFinishedTask)(nil), "internal.tq.InvocationFinishedTask")
	proto.RegisterType((*FanOutTriggersTask)(nil), "internal.tq.FanOutTriggersTask")
	proto.RegisterType((*EnqueueTriggersTask)(nil), "internal.tq.EnqueueTriggersTask")
	proto.RegisterType((*ScheduleTimersTask)(nil), "internal.tq.ScheduleTimersTask")
	proto.RegisterType((*TimerTask)(nil), "internal.tq.TimerTask")
	proto.RegisterType((*CronTickTask)(nil), "internal.tq.CronTickTask")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/scheduler/appengine/internal/tq.proto", fileDescriptor1)
}

var fileDescriptor1 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x5f, 0x6b, 0x13, 0x41,
	0x14, 0xc5, 0xd9, 0x86, 0xc4, 0xee, 0x8d, 0x4f, 0xab, 0xad, 0x21, 0x50, 0x8c, 0xfb, 0x14, 0x50,
	0x76, 0xa1, 0x42, 0x05, 0x05, 0x91, 0xb6, 0x16, 0x22, 0xa2, 0xb2, 0x5d, 0x5f, 0x7c, 0x29, 0x93,
	0xd9, 0x71, 0xf6, 0xe6, 0xcf, 0x9d, 0x64, 0x66, 0x36, 0x5f, 0xc0, 0x2f, 0x2e, 0x99, 0xd9, 0xb4,
	0x5b, 0xb5, 0x01, 0xf7, 0xf5, 0xcc, 0xbd, 0xe7, 0x77, 0xe7, 0xcc, 0x1d, 0x78, 0x2b, 0x55, 0xc2,
	0x4b, 0xad, 0x96, 0x58, 0x2d, 0x13, 0xa5, 0x65, 0xba, 0xa8, 0x38, 0xa6, 0x86, 0x97, 0xa2, 0xa8,
	0x16, 0x42, 0xa7, 0x6c, 0xb5, 0x12, 0x24, 0x91, 0x44, 0x8a, 0x64, 0x85, 0x26, 0xb6, 0x48, 0xed,
	0x3a, 0x59, 0x69, 0x65, 0x55, 0xd4, 0xdf, 0x49, 0x89, 0x5d, 0x0f, 0xdf, 0xb7, 0x30, 0xc2, 0xa5,
	0xd0, 0xc6, 0x9b, 0x0d, 0x3f, 0xb4, 0xe8, 0xd7, 0x28, 0xe5, 0xad, 0x43, 0x7c, 0x06, 0x47, 0x99,
	0x60, 0xc5, 0x37, 0xad, 0x66, 0x82, 0xdb, 0x0b, 0x45, 0x3f, 0x51, 0xe6, 0xcc, 0xcc, 0xa3, 0x13,
	0x80, 0x95, 0x17, 0x6f, 0xb0, 0x18, 0x04, 0xa3, 0x60, 0x1c, 0x66, 0x61, 0xad, 0x4c, 0x8a, 0xf8,
	0x12, 0x9e, 0x7e, 0x66, 0x15, 0xf1, 0x72, 0x42, 0x1b, 0xc5, 0x99, 0x45, 0x45, 0xae, 0xed, 0x08,
	0x7a, 0x33, 0x35, 0xbd, 0x6b, 0xe9, 0xce, 0xd4, 0x74, 0x52, 0x6c, 0x65, 0xa4, 0xcd, 0x56, 0x3e,
	0x18, 0x05, 0xe3, 0x4e, 0xd6, 0x45, 0xda, 0x4c, 0x8a, 0xf8, 0x3b, 0x0c, 0xff, 0x74, 0x31, 0xe7,
	0xcc, 0xf2, 0xd2, 0x79, 0xbd, 0x81, 0xae, 0x65, 0x66, 0x6e, 0x06, 0xc1, 0xa8, 0x33, 0xee, 0x9f,
	0xbe, 0x48, 0x1a, 0xd1, 0x25, 0xff, 0xa2, 0x67, 0xbe, 0x3e, 0x7e, 0x09, 0x51, 0xae, 0x91, 0x49,
	0xf1, 0x49, 0x4d, 0xaf, 0x2d, 0xb3, 0x62, 0xcf, 0x68, 0xf1, 0xaf, 0x00, 0x8e, 0xef, 0x6c, 0xae,
	0x90, 0xd0, 0x94, 0xa2, 0xf8, 0xff, 0xcb, 0x44, 0xef, 0xe0, 0x70, 0x17, 0xee, 0xa0, 0x33, 0x0a,
	0xc6, 0xfd, 0xd3, 0xe7, 0xf7, 0x26, 0xbe, 0x62, 0xf4, 0xb5, 0xb2, 0x79, 0x5d, 0xe2, 0xe6, 0xbd,
	0x6d, 0x88, 0x05, 0x44, 0x7f, 0x9f, 0x47, 0xcf, 0xe0, 0x91, 0x1f, 0xc0, 0x67, 0x10, 0x66, 0x3d,
	0x37, 0x81, 0x89, 0xce, 0x1a, 0xac, 0x03, 0x97, 0xce, 0xb0, 0xc1, 0xda, 0x3d, 0x71, 0xed, 0xd5,
	0xc0, 0x14, 0xf0, 0xe4, 0x23, 0xad, 0x2b, 0x51, 0x89, 0x7b, 0x9c, 0x07, 0x2e, 0xda, 0x96, 0xa2,
	0x21, 0xba, 0xae, 0x77, 0x30, 0x77, 0xeb, 0xda, 0x22, 0xcd, 0x04, 0x7a, 0x7e, 0xd5, 0x07, 0x1d,
	0x47, 0x3e, 0x6e, 0x90, 0xfd, 0x17, 0x70, 0xd6, 0x59, 0x5d, 0x15, 0x4b, 0x08, 0x9d, 0xd0, 0x02,
	0xf5, 0x0a, 0xba, 0xce, 0xa4, 0x7e, 0xb5, 0x87, 0x48, 0xbe, 0x28, 0xbe, 0x84, 0xc7, 0x17, 0x5a,
	0x51, 0x8e, 0x7c, 0xbe, 0x8f, 0x75, 0x02, 0x60, 0x91, 0xcf, 0x6f, 0x48, 0x11, 0x17, 0x35, 0x2f,
	0xdc, 0x2a, 0x5f, 0xb6, 0xc2, 0x39, 0xfc, 0x38, 0xdc, 0x51, 0xa6, 0x3d, 0xf7, 0x15, 0x5f, 0xff,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x5b, 0x35, 0x55, 0x57, 0x04, 0x00, 0x00,
}
