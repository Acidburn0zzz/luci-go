// Copyright 2015 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package messages;


// A single access control rule.
message Acl {
  enum Role {
    // Can do read-only operations, such as listing invocations of a Job.
    READER = 0;
    // Can emit triggers for a Job.
    //
    // Being TRIGGERER implicitly grants READER permission.
    TRIGGERER = 2;
    // Same as READER + TRIGGERER + can modify state of a Job or Invocation such
    // as aborting them.
    // LUCI scheduler (this service) is an OWNER of each `Job` and `Trigger`,
    // thus `Trigger`s are allowed to trigger all `Job`s defined in the same
    // project, regardless of their respective ACLs.
    OWNER = 1;
  }
  // Role denotes a list of actions that an identity can perform.
  Role role = 1;
  // Either email or "group:xyz" or auth service identity string "kind:name".
  string granted_to = 2;
}


// A set of Acl messages. Can be referenced in a Job or Trigger by name.
message AclSet {
  // A name of the ACL set, unique for a project.
  // Required. Must match regex '^[0-9A-Za-z_\-\.]{1,100}$'.
  string name = 1;
  // List of access control rules.
  // The order does not matter.
  repeated Acl acls = 2;
}

// Job specifies a single regular job belonging to a project.
//
// Such jobs runs on a schedule or can be triggered by some trigger.
message Job {
  reserved 4;
  reserved 102;

  // Id is a name of the job (unique for the project).
  //
  // Must match '^[0-9A-Za-z_\-\.]{1,100}$'.
  string id = 1;

  // Schedule describes when to run the job.
  //
  // A job with a schedule can still be triggered by other triggering jobs
  // and via "Run now" button in UI.
  //
  // Supported kinds of schedules (illustrated by examples):
  //   - "* 0 * * * *": cron-like expression, in a syntax supported by
  //     https://github.com/gorhill/cronexpr (see its docs for full reference).
  //     The cron engine will attempt to start a job at specified moments in
  //     time (based on UTC clock). If when triggering a job, previous
  //     invocation is still running, an overrun will be recorded (and next
  //     attempt to start a job happens based on the schedule, not when the
  //     previous invocation finishes). Some examples:
  //       "0 */3 * * * *" - each 3 hours: at 12:00 AM UTC, 3:00 AM UTC, ...
  //       "0 */3 * * *" - exact same thing (last field is optional)
  //       "0 2,10,18 * * *" - at 2 AM UTC, 10 AM UTC, 6 PM UTC
  //       "0 7 * * *" - at 7 AM UTC, once a day.
  //   - "with 10s interval": runs invocations in a loop, waiting 10s after
  //     finishing invocation before starting a new one. Overruns are not
  //     possible.
  //   - "continuously" is alias for "with 0s interval", meaning the job will
  //     run in a loop without any pauses.
  //   - "triggered" schedule indicates that job is only started via "Run now"
  //     button or via a trigger.
  //
  // Default is "triggered".
  string schedule = 2;

  // Disabled is true to disable this job.
  bool disabled = 3;

  // List of access control rules for the Job.
  // The order does not matter.
  // There can be at most 32 different acls for a Job, including those from
  // acl_sets.
  repeated Acl acls = 5;
  // A list of ACL set names. Each ACL in each referenced ACL set will be
  // included in this Job.
  // The order does not matter.
  repeated string acl_sets = 6;

  // One and only one field below must be set. It defines what this job does.

  // Noop is used for testing. It is "do nothing" task.
  NoopTask noop = 100;
  // UrlFetch can be used to make a simple HTTP call.
  UrlFetchTask url_fetch = 101;
  // BuildbucketTask can be used to schedule buildbucket job.
  BuildbucketTask buildbucket = 103;
}


// Trigger specifies a job that triggers other jobs.
//
// It is a special kind of job that periodically checks the state of the world
// and triggers other jobs.
message Trigger {
  // Id is a name of the job (unique for the project).
  //
  // Must match '^[0-9A-Za-z_\-\.]{1,100}$'. It's in the same namespace as
  // regular jobs.
  string id = 1;

  // Schedule describes when to run this triggering job.
  //
  // See Job.schedule fro more info. Default is "with 30s interval".
  string schedule = 2;

  // Disabled is true to disable this job.
  bool disabled = 3;

  // List of access control rules for the Job.
  //
  // At least OWNER and READER roles must be defined either by acls or by
  // acl_sets references.
  //
  // The order does not matter.
  // There can be at most 32 different acls for a Job, including those from
  // acl_sets.
  repeated Acl acls = 4;
  // A list of ACL set names. Each ACL in each referenced ACL set will be
  // included in this Job.
  // The order does not matter.
  repeated string acl_sets = 5;

  // One and only one field below must be set. It defines what this job does.

  // Noop is used for testing. It is "do nothing" trigger.
  NoopTask noop = 100;
  // Gitiles is used to trigger jobs for new commits on Gitiles.
  GitilesTask gitiles = 101;

  // Triggers are IDs of jobs triggered by this trigger.
  repeated string triggers = 200;
}


// NoopTask is used for testing. It is "do nothing" task that can emit fake
// triggers.
message NoopTask {
  int64 sleep_ms = 1;
  int64 triggers_count = 2;
}


// GitilesTask specifies parameters of what repo and which refs to watch for new
// commits.
//
// GitilesTask will trigger other jobs if either:
//  * ref's tip has changed (e.g. new commit landed on a ref),
//  * a ref has just been created.
message GitilesTask {
  // Repo is the URL of the Gitiles repository.
  string repo = 1;

  // Refs is a list of Git references to track.
  //
  // Each ref can be either:
  //  * a fully qualified ref like "refs/heads/master" or "refs/tags/v1.2.3"
  //  * a refglob like "refs/heads/*" which matches all immediate children of
  //    "refs/heads". Thus, "refs/heads/*" will match "refs/heads/master",
  //    but will not match "refs/heads/not/immediate/child".
  repeated string refs = 2;
}


// UrlFetchTask specifies parameters for simple HTTP call.
message UrlFetchTask {
  // Method is HTTP method to use, such as "GET" or "POST". Default is "GET".
  string method = 1;
  // Url to send the request to.
  string url = 2;
  // Timeout is how long to wait for request to complete. Default is 60 sec.
  int32 timeout_sec = 3;
  // TODO: add more.
}


// BuildbucketTask specifies parameters of Buildbucket-based jobs.
message BuildbucketTask {
  // Server is hostname of the buildbucket service to use.
  // Typically, "cr-buildbucket.appspot.com".
  string server = 1;
  // Bucket defines what bucket to add the task to.
  string bucket = 2;
  // Builder defines what to run.
  string builder = 3;
  // Properties is arbitrary "key:value" pairs describing the task.
  // TODO(tandrii): which properties will be overridden if triggered?
  repeated string properties = 4;
  // Tags is a list of tags (as "key:value" pairs) to assign to the task.
  repeated string tags = 5;
}


// ProjectConfig defines a schema for config file that describe jobs belonging
// to some project.
message ProjectConfig {
  // Job is a set of jobs defined in the project.
  repeated Job job = 1;

  // Trigger is a set of triggering jobs defined in the project.
  repeated Trigger trigger = 2;

  // A list of ACL sets. Names must be unique.
  repeated AclSet acl_sets = 3;
}


////////////////////////////////////////////////////////////////////////////////
// Internal stuff.

// TaskDefWrapper is a union type of all possible tasks known to the scheduler.
//
// It is used internally when storing jobs in the datastore.
message TaskDefWrapper {
  reserved 3;

  NoopTask noop = 1;
  UrlFetchTask url_fetch = 2;
  BuildbucketTask buildbucket = 4;
  GitilesTask gitiles = 5;
}
