// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/scheduler/appengine/messages/config.proto

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	go.chromium.org/luci/scheduler/appengine/messages/config.proto
	go.chromium.org/luci/scheduler/appengine/messages/cron.proto

It has these top-level messages:
	Acl
	AclSet
	Job
	Trigger
	NoopTask
	GitilesTask
	UrlFetchTask
	BuildbucketTask
	ProjectConfig
	TaskDefWrapper
*/
package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Acl_Role int32

const (
	// Can do read-only operations, such as listing invocations of a Job.
	Acl_READER Acl_Role = 0
	// Can emit triggers for a Job.
	//
	// Being TRIGGERER implicitly grants READER permission.
	Acl_TRIGGERER Acl_Role = 2
	// Same as READER + TRIGGERER + can modify state of a Job or Invocation such
	// as aborting them.
	// LUCI scheduler (this service) is an OWNER of each `Job` and `Trigger`,
	// thus `Trigger`s are allowed to trigger all `Job`s defined in the same
	// project, regardless of their respective ACLs.
	Acl_OWNER Acl_Role = 1
)

var Acl_Role_name = map[int32]string{
	0: "READER",
	2: "TRIGGERER",
	1: "OWNER",
}
var Acl_Role_value = map[string]int32{
	"READER":    0,
	"TRIGGERER": 2,
	"OWNER":     1,
}

func (x Acl_Role) String() string {
	return proto.EnumName(Acl_Role_name, int32(x))
}
func (Acl_Role) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// A single access control rule.
type Acl struct {
	// Role denotes a list of actions that an identity can perform.
	Role Acl_Role `protobuf:"varint,1,opt,name=role,enum=messages.Acl_Role" json:"role,omitempty"`
	// Either email or "group:xyz" or auth service identity string "kind:name".
	GrantedTo string `protobuf:"bytes,2,opt,name=granted_to,json=grantedTo" json:"granted_to,omitempty"`
}

func (m *Acl) Reset()                    { *m = Acl{} }
func (m *Acl) String() string            { return proto.CompactTextString(m) }
func (*Acl) ProtoMessage()               {}
func (*Acl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Acl) GetRole() Acl_Role {
	if m != nil {
		return m.Role
	}
	return Acl_READER
}

func (m *Acl) GetGrantedTo() string {
	if m != nil {
		return m.GrantedTo
	}
	return ""
}

// A set of Acl messages. Can be referenced in a Job or Trigger by name.
type AclSet struct {
	// A name of the ACL set, unique for a project.
	// Required. Must match regex '^[0-9A-Za-z_\-\.]{1,100}$'.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// List of access control rules.
	// The order does not matter.
	Acls []*Acl `protobuf:"bytes,2,rep,name=acls" json:"acls,omitempty"`
}

func (m *AclSet) Reset()                    { *m = AclSet{} }
func (m *AclSet) String() string            { return proto.CompactTextString(m) }
func (*AclSet) ProtoMessage()               {}
func (*AclSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AclSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AclSet) GetAcls() []*Acl {
	if m != nil {
		return m.Acls
	}
	return nil
}

// Job specifies a single regular job belonging to a project.
//
// Such jobs runs on a schedule or can be triggered by some trigger.
type Job struct {
	// Id is a name of the job (unique for the project).
	//
	// Must match '^[0-9A-Za-z_\-\.]{1,100}$'.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Schedule describes when to run the job.
	//
	// A job with a schedule can still be triggered by other triggering jobs
	// and via "Run now" button in UI.
	//
	// Supported kinds of schedules (illustrated by examples):
	//   - "* 0 * * * *": cron-like expression, in a syntax supported by
	//     https://github.com/gorhill/cronexpr (see its docs for full reference).
	//     The cron engine will attempt to start a job at specified moments in
	//     time (based on UTC clock). If when triggering a job, previous
	//     invocation is still running, an overrun will be recorded (and next
	//     attempt to start a job happens based on the schedule, not when the
	//     previous invocation finishes). Some examples:
	//       "0 */3 * * * *" - each 3 hours: at 12:00 AM UTC, 3:00 AM UTC, ...
	//       "0 */3 * * *" - exact same thing (last field is optional)
	//       "0 2,10,18 * * *" - at 2 AM UTC, 10 AM UTC, 6 PM UTC
	//       "0 7 * * *" - at 7 AM UTC, once a day.
	//   - "with 10s interval": runs invocations in a loop, waiting 10s after
	//     finishing invocation before starting a new one. Overruns are not
	//     possible.
	//   - "continuously" is alias for "with 0s interval", meaning the job will
	//     run in a loop without any pauses.
	//   - "triggered" schedule indicates that job is only started via "Run now"
	//     button or via a trigger.
	//
	// Default is "triggered".
	Schedule string `protobuf:"bytes,2,opt,name=schedule" json:"schedule,omitempty"`
	// Disabled is true to disable this job.
	Disabled bool `protobuf:"varint,3,opt,name=disabled" json:"disabled,omitempty"`
	// List of access control rules for the Job.
	// The order does not matter.
	// There can be at most 32 different acls for a Job, including those from
	// acl_sets.
	Acls []*Acl `protobuf:"bytes,5,rep,name=acls" json:"acls,omitempty"`
	// A list of ACL set names. Each ACL in each referenced ACL set will be
	// included in this Job.
	// The order does not matter.
	AclSets []string `protobuf:"bytes,6,rep,name=acl_sets,json=aclSets" json:"acl_sets,omitempty"`
	// Noop is used for testing. It is "do nothing" task.
	Noop *NoopTask `protobuf:"bytes,100,opt,name=noop" json:"noop,omitempty"`
	// UrlFetch can be used to make a simple HTTP call.
	UrlFetch *UrlFetchTask `protobuf:"bytes,101,opt,name=url_fetch,json=urlFetch" json:"url_fetch,omitempty"`
	// BuildbucketTask can be used to schedule buildbucket job.
	Buildbucket *BuildbucketTask `protobuf:"bytes,103,opt,name=buildbucket" json:"buildbucket,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetSchedule() string {
	if m != nil {
		return m.Schedule
	}
	return ""
}

func (m *Job) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *Job) GetAcls() []*Acl {
	if m != nil {
		return m.Acls
	}
	return nil
}

func (m *Job) GetAclSets() []string {
	if m != nil {
		return m.AclSets
	}
	return nil
}

func (m *Job) GetNoop() *NoopTask {
	if m != nil {
		return m.Noop
	}
	return nil
}

func (m *Job) GetUrlFetch() *UrlFetchTask {
	if m != nil {
		return m.UrlFetch
	}
	return nil
}

func (m *Job) GetBuildbucket() *BuildbucketTask {
	if m != nil {
		return m.Buildbucket
	}
	return nil
}

// Trigger specifies a job that triggers other jobs.
//
// It is a special kind of job that periodically checks the state of the world
// and triggers other jobs.
type Trigger struct {
	// Id is a name of the job (unique for the project).
	//
	// Must match '^[0-9A-Za-z_\-\.]{1,100}$'. It's in the same namespace as
	// regular jobs.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Schedule describes when to run this triggering job.
	//
	// See Job.schedule fro more info. Default is "with 30s interval".
	Schedule string `protobuf:"bytes,2,opt,name=schedule" json:"schedule,omitempty"`
	// Disabled is true to disable this job.
	Disabled bool `protobuf:"varint,3,opt,name=disabled" json:"disabled,omitempty"`
	// List of access control rules for the Job.
	//
	// At least OWNER and READER roles must be defined either by acls or by
	// acl_sets references.
	//
	// The order does not matter.
	// There can be at most 32 different acls for a Job, including those from
	// acl_sets.
	Acls []*Acl `protobuf:"bytes,4,rep,name=acls" json:"acls,omitempty"`
	// A list of ACL set names. Each ACL in each referenced ACL set will be
	// included in this Job.
	// The order does not matter.
	AclSets []string `protobuf:"bytes,5,rep,name=acl_sets,json=aclSets" json:"acl_sets,omitempty"`
	// Noop is used for testing. It is "do nothing" trigger.
	Noop *NoopTask `protobuf:"bytes,100,opt,name=noop" json:"noop,omitempty"`
	// Gitiles is used to trigger jobs for new commits on Gitiles.
	Gitiles *GitilesTask `protobuf:"bytes,101,opt,name=gitiles" json:"gitiles,omitempty"`
	// Triggers are IDs of jobs triggered by this trigger.
	Triggers []string `protobuf:"bytes,200,rep,name=triggers" json:"triggers,omitempty"`
}

func (m *Trigger) Reset()                    { *m = Trigger{} }
func (m *Trigger) String() string            { return proto.CompactTextString(m) }
func (*Trigger) ProtoMessage()               {}
func (*Trigger) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Trigger) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Trigger) GetSchedule() string {
	if m != nil {
		return m.Schedule
	}
	return ""
}

func (m *Trigger) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *Trigger) GetAcls() []*Acl {
	if m != nil {
		return m.Acls
	}
	return nil
}

func (m *Trigger) GetAclSets() []string {
	if m != nil {
		return m.AclSets
	}
	return nil
}

func (m *Trigger) GetNoop() *NoopTask {
	if m != nil {
		return m.Noop
	}
	return nil
}

func (m *Trigger) GetGitiles() *GitilesTask {
	if m != nil {
		return m.Gitiles
	}
	return nil
}

func (m *Trigger) GetTriggers() []string {
	if m != nil {
		return m.Triggers
	}
	return nil
}

// NoopTask is used for testing. It is "do nothing" task that can emit fake
// triggers.
type NoopTask struct {
	SleepMs       int64 `protobuf:"varint,1,opt,name=sleep_ms,json=sleepMs" json:"sleep_ms,omitempty"`
	TriggersCount int64 `protobuf:"varint,2,opt,name=triggers_count,json=triggersCount" json:"triggers_count,omitempty"`
}

func (m *NoopTask) Reset()                    { *m = NoopTask{} }
func (m *NoopTask) String() string            { return proto.CompactTextString(m) }
func (*NoopTask) ProtoMessage()               {}
func (*NoopTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NoopTask) GetSleepMs() int64 {
	if m != nil {
		return m.SleepMs
	}
	return 0
}

func (m *NoopTask) GetTriggersCount() int64 {
	if m != nil {
		return m.TriggersCount
	}
	return 0
}

// GitilesTask specifies parameters of what repo and which refs to watch for new
// commits.
//
// GitilesTask will trigger other jobs if either:
//  * ref's tip has changed (e.g. new commit landed on a ref),
//  * a ref has just been created.
type GitilesTask struct {
	// Repo is the URL of the Gitiles repository.
	Repo string `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	// Refs is a list of Git references to track.
	//
	// Each ref can be either:
	//  * a fully qualified ref like "refs/heads/master" or "refs/tags/v1.2.3"
	//  * a refglob like "refs/heads/*" which matches all immediate children of
	//    "refs/heads". Thus, "refs/heads/*" will match "refs/heads/master",
	//    but will not match "refs/heads/not/immediate/child".
	Refs []string `protobuf:"bytes,2,rep,name=refs" json:"refs,omitempty"`
}

func (m *GitilesTask) Reset()                    { *m = GitilesTask{} }
func (m *GitilesTask) String() string            { return proto.CompactTextString(m) }
func (*GitilesTask) ProtoMessage()               {}
func (*GitilesTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GitilesTask) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *GitilesTask) GetRefs() []string {
	if m != nil {
		return m.Refs
	}
	return nil
}

// UrlFetchTask specifies parameters for simple HTTP call.
type UrlFetchTask struct {
	// Method is HTTP method to use, such as "GET" or "POST". Default is "GET".
	Method string `protobuf:"bytes,1,opt,name=method" json:"method,omitempty"`
	// Url to send the request to.
	Url string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	// Timeout is how long to wait for request to complete. Default is 60 sec.
	TimeoutSec int32 `protobuf:"varint,3,opt,name=timeout_sec,json=timeoutSec" json:"timeout_sec,omitempty"`
}

func (m *UrlFetchTask) Reset()                    { *m = UrlFetchTask{} }
func (m *UrlFetchTask) String() string            { return proto.CompactTextString(m) }
func (*UrlFetchTask) ProtoMessage()               {}
func (*UrlFetchTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UrlFetchTask) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *UrlFetchTask) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UrlFetchTask) GetTimeoutSec() int32 {
	if m != nil {
		return m.TimeoutSec
	}
	return 0
}

// BuildbucketTask specifies parameters of Buildbucket-based jobs.
type BuildbucketTask struct {
	// Server is hostname of the buildbucket service to use.
	// Typically, "cr-buildbucket.appspot.com".
	Server string `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// Bucket defines what bucket to add the task to.
	Bucket string `protobuf:"bytes,2,opt,name=bucket" json:"bucket,omitempty"`
	// Builder defines what to run.
	Builder string `protobuf:"bytes,3,opt,name=builder" json:"builder,omitempty"`
	// Properties is arbitrary "key:value" pairs describing the task.
	// TODO(tandrii): which properties will be overridden if triggered?
	Properties []string `protobuf:"bytes,4,rep,name=properties" json:"properties,omitempty"`
	// Tags is a list of tags (as "key:value" pairs) to assign to the task.
	Tags []string `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
}

func (m *BuildbucketTask) Reset()                    { *m = BuildbucketTask{} }
func (m *BuildbucketTask) String() string            { return proto.CompactTextString(m) }
func (*BuildbucketTask) ProtoMessage()               {}
func (*BuildbucketTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BuildbucketTask) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *BuildbucketTask) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *BuildbucketTask) GetBuilder() string {
	if m != nil {
		return m.Builder
	}
	return ""
}

func (m *BuildbucketTask) GetProperties() []string {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *BuildbucketTask) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// ProjectConfig defines a schema for config file that describe jobs belonging
// to some project.
type ProjectConfig struct {
	// Job is a set of jobs defined in the project.
	Job []*Job `protobuf:"bytes,1,rep,name=job" json:"job,omitempty"`
	// Trigger is a set of triggering jobs defined in the project.
	Trigger []*Trigger `protobuf:"bytes,2,rep,name=trigger" json:"trigger,omitempty"`
	// A list of ACL sets. Names must be unique.
	AclSets []*AclSet `protobuf:"bytes,3,rep,name=acl_sets,json=aclSets" json:"acl_sets,omitempty"`
}

func (m *ProjectConfig) Reset()                    { *m = ProjectConfig{} }
func (m *ProjectConfig) String() string            { return proto.CompactTextString(m) }
func (*ProjectConfig) ProtoMessage()               {}
func (*ProjectConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ProjectConfig) GetJob() []*Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *ProjectConfig) GetTrigger() []*Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (m *ProjectConfig) GetAclSets() []*AclSet {
	if m != nil {
		return m.AclSets
	}
	return nil
}

// TaskDefWrapper is a union type of all possible tasks known to the scheduler.
//
// It is used internally when storing jobs in the datastore.
type TaskDefWrapper struct {
	Noop        *NoopTask        `protobuf:"bytes,1,opt,name=noop" json:"noop,omitempty"`
	UrlFetch    *UrlFetchTask    `protobuf:"bytes,2,opt,name=url_fetch,json=urlFetch" json:"url_fetch,omitempty"`
	Buildbucket *BuildbucketTask `protobuf:"bytes,4,opt,name=buildbucket" json:"buildbucket,omitempty"`
	Gitiles     *GitilesTask     `protobuf:"bytes,5,opt,name=gitiles" json:"gitiles,omitempty"`
}

func (m *TaskDefWrapper) Reset()                    { *m = TaskDefWrapper{} }
func (m *TaskDefWrapper) String() string            { return proto.CompactTextString(m) }
func (*TaskDefWrapper) ProtoMessage()               {}
func (*TaskDefWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TaskDefWrapper) GetNoop() *NoopTask {
	if m != nil {
		return m.Noop
	}
	return nil
}

func (m *TaskDefWrapper) GetUrlFetch() *UrlFetchTask {
	if m != nil {
		return m.UrlFetch
	}
	return nil
}

func (m *TaskDefWrapper) GetBuildbucket() *BuildbucketTask {
	if m != nil {
		return m.Buildbucket
	}
	return nil
}

func (m *TaskDefWrapper) GetGitiles() *GitilesTask {
	if m != nil {
		return m.Gitiles
	}
	return nil
}

func init() {
	proto.RegisterType((*Acl)(nil), "messages.Acl")
	proto.RegisterType((*AclSet)(nil), "messages.AclSet")
	proto.RegisterType((*Job)(nil), "messages.Job")
	proto.RegisterType((*Trigger)(nil), "messages.Trigger")
	proto.RegisterType((*NoopTask)(nil), "messages.NoopTask")
	proto.RegisterType((*GitilesTask)(nil), "messages.GitilesTask")
	proto.RegisterType((*UrlFetchTask)(nil), "messages.UrlFetchTask")
	proto.RegisterType((*BuildbucketTask)(nil), "messages.BuildbucketTask")
	proto.RegisterType((*ProjectConfig)(nil), "messages.ProjectConfig")
	proto.RegisterType((*TaskDefWrapper)(nil), "messages.TaskDefWrapper")
	proto.RegisterEnum("messages.Acl_Role", Acl_Role_name, Acl_Role_value)
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/scheduler/appengine/messages/config.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 714 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xdd, 0x6a, 0xdb, 0x48,
	0x14, 0x5e, 0xfd, 0xd8, 0x96, 0x8e, 0xd7, 0x5e, 0xed, 0xc0, 0x06, 0x65, 0x97, 0xdd, 0x78, 0x05,
	0xbb, 0x18, 0xb2, 0xd8, 0x90, 0xb0, 0x57, 0x85, 0x16, 0x37, 0x71, 0x43, 0x4d, 0x9b, 0x96, 0x89,
	0x4b, 0xe8, 0x95, 0x91, 0xa5, 0x63, 0x59, 0xc9, 0xd8, 0x23, 0x66, 0x46, 0xbd, 0xe8, 0x7d, 0x6f,
	0x7a, 0xd3, 0x67, 0xe9, 0x5b, 0xf4, 0x35, 0xfa, 0x26, 0x45, 0x23, 0xc9, 0x76, 0x02, 0x85, 0x24,
	0xf4, 0x6e, 0xce, 0x77, 0xbe, 0x33, 0x67, 0xe6, 0x3b, 0xdf, 0x0c, 0x3c, 0x4e, 0xf8, 0x20, 0x5a,
	0x0a, 0xbe, 0x4a, 0xf3, 0xd5, 0x80, 0x8b, 0x64, 0xc8, 0xf2, 0x28, 0x1d, 0xca, 0x68, 0x89, 0x71,
	0xce, 0x50, 0x0c, 0xc3, 0x2c, 0xc3, 0x75, 0x92, 0xae, 0x71, 0xb8, 0x42, 0x29, 0xc3, 0x04, 0xe5,
	0x30, 0xe2, 0xeb, 0x45, 0x9a, 0x0c, 0x32, 0xc1, 0x15, 0x27, 0x4e, 0x0d, 0x07, 0xef, 0xc1, 0x1a,
	0x45, 0x8c, 0xfc, 0x0b, 0xb6, 0xe0, 0x0c, 0x7d, 0xa3, 0x67, 0xf4, 0xbb, 0x47, 0x64, 0x50, 0xe7,
	0x07, 0xa3, 0x88, 0x0d, 0x28, 0x67, 0x48, 0x75, 0x9e, 0xfc, 0x09, 0x90, 0x88, 0x70, 0xad, 0x30,
	0x9e, 0x29, 0xee, 0x9b, 0x3d, 0xa3, 0xef, 0x52, 0xb7, 0x42, 0xa6, 0x3c, 0xf8, 0x0f, 0xec, 0x82,
	0x4c, 0x00, 0x9a, 0x74, 0x3c, 0x3a, 0x1d, 0x53, 0xef, 0x27, 0xd2, 0x01, 0x77, 0x4a, 0x9f, 0x9f,
	0x9d, 0x8d, 0xe9, 0x98, 0x7a, 0x26, 0x71, 0xa1, 0xf1, 0xea, 0xf2, 0x7c, 0x4c, 0x3d, 0x23, 0x78,
	0x02, 0xcd, 0x51, 0xc4, 0x2e, 0x50, 0x11, 0x02, 0xf6, 0x3a, 0x5c, 0x95, 0xed, 0x5d, 0xaa, 0xd7,
	0xe4, 0x6f, 0xb0, 0xc3, 0x88, 0x49, 0xdf, 0xec, 0x59, 0xfd, 0xf6, 0x51, 0xe7, 0xc6, 0x91, 0xa8,
	0x4e, 0x05, 0x9f, 0x4d, 0xb0, 0x26, 0x7c, 0x4e, 0xba, 0x60, 0xa6, 0x71, 0x55, 0x6c, 0xa6, 0x31,
	0xf9, 0x1d, 0x9c, 0x5a, 0x8b, 0xea, 0x8c, 0x9b, 0xb8, 0xc8, 0xc5, 0xa9, 0x0c, 0xe7, 0x0c, 0x63,
	0xdf, 0xea, 0x19, 0x7d, 0x87, 0x6e, 0xe2, 0x4d, 0xcb, 0xc6, 0x77, 0x5b, 0x92, 0x7d, 0x70, 0xc2,
	0x88, 0xcd, 0x24, 0x2a, 0xe9, 0x37, 0x7b, 0x56, 0xdf, 0xa5, 0xad, 0x50, 0xdf, 0x41, 0x16, 0x1a,
	0xae, 0x39, 0xcf, 0xfc, 0xb8, 0x67, 0xf4, 0xdb, 0xbb, 0x1a, 0x9e, 0x73, 0x9e, 0x4d, 0x43, 0x79,
	0x4d, 0x75, 0x9e, 0x1c, 0x83, 0x9b, 0x0b, 0x36, 0x5b, 0xa0, 0x8a, 0x96, 0x3e, 0x6a, 0xf2, 0xde,
	0x96, 0xfc, 0x46, 0xb0, 0x67, 0x45, 0x46, 0x17, 0x38, 0x79, 0x15, 0x91, 0x47, 0xd0, 0x9e, 0xe7,
	0x29, 0x8b, 0xe7, 0x79, 0x74, 0x8d, 0xca, 0x4f, 0x74, 0xd9, 0xfe, 0xb6, 0xec, 0xe9, 0x36, 0xa9,
	0x2b, 0x77, 0xd9, 0x13, 0xdb, 0xb1, 0xbd, 0xc6, 0xc4, 0x76, 0x16, 0x5e, 0x12, 0x7c, 0x30, 0xa1,
	0x35, 0x15, 0x69, 0x92, 0xa0, 0xf8, 0xe1, 0xba, 0xd9, 0x77, 0xd3, 0xad, 0xf1, 0x30, 0xdd, 0x86,
	0xd0, 0x4a, 0x52, 0x95, 0x32, 0x94, 0x95, 0x6a, 0xbf, 0x6d, 0xa9, 0x67, 0x65, 0x42, 0xb3, 0x6b,
	0x16, 0xf9, 0x03, 0x1c, 0x55, 0xde, 0x54, 0xfa, 0x5f, 0x0c, 0xdd, 0x74, 0x03, 0x04, 0x2f, 0xc0,
	0xa9, 0xf7, 0x2f, 0x0e, 0x27, 0x19, 0x62, 0x36, 0x5b, 0x49, 0xad, 0x86, 0x45, 0x5b, 0x3a, 0x7e,
	0x29, 0xc9, 0x3f, 0xd0, 0xad, 0x4b, 0x66, 0x11, 0xcf, 0xd7, 0x4a, 0x0b, 0x63, 0xd1, 0x4e, 0x8d,
	0x9e, 0x14, 0x60, 0xf0, 0x3f, 0xb4, 0x77, 0x8e, 0x50, 0xf8, 0x59, 0x60, 0xc6, 0x6b, 0x3f, 0x17,
	0xeb, 0x12, 0x5b, 0x94, 0x7e, 0xd6, 0xd8, 0x42, 0x06, 0x6f, 0xe1, 0xe7, 0xdd, 0x79, 0x93, 0x3d,
	0x68, 0xae, 0x50, 0x2d, 0x79, 0x3d, 0x94, 0x2a, 0x22, 0x1e, 0x58, 0xb9, 0x60, 0xd5, 0x4c, 0x8a,
	0x25, 0x39, 0x80, 0xb6, 0x4a, 0x57, 0xc8, 0x73, 0x35, 0x93, 0x18, 0xe9, 0x89, 0x34, 0x28, 0x54,
	0xd0, 0x05, 0x46, 0xc1, 0x27, 0x03, 0x7e, 0xb9, 0x65, 0x8a, 0x62, 0x7b, 0x89, 0xe2, 0x1d, 0x8a,
	0x7a, 0xfb, 0x32, 0x2a, 0xf0, 0xca, 0x57, 0x65, 0x87, 0x2a, 0x22, 0x3e, 0xb4, 0xb4, 0x8d, 0x50,
	0xe8, 0x06, 0x2e, 0xad, 0x43, 0xf2, 0x17, 0x40, 0x26, 0x78, 0x86, 0x42, 0xa5, 0x58, 0xce, 0xdd,
	0xa5, 0x3b, 0x48, 0x71, 0x59, 0x15, 0x26, 0xf5, 0xa8, 0xf5, 0x3a, 0xf8, 0x68, 0x40, 0xe7, 0xb5,
	0xe0, 0x57, 0x18, 0xa9, 0x13, 0xfd, 0x19, 0x91, 0x03, 0xb0, 0xae, 0xf8, 0xdc, 0x37, 0x6e, 0xdb,
	0x66, 0xc2, 0xe7, 0xb4, 0xc8, 0x90, 0x43, 0x68, 0x55, 0x3a, 0x57, 0xdf, 0xc0, 0xaf, 0x5b, 0x52,
	0x65, 0x62, 0x5a, 0x33, 0xc8, 0xe1, 0x8e, 0xc5, 0x2c, 0xcd, 0xf6, 0x6e, 0x38, 0xf1, 0x02, 0xd5,
	0xc6, 0x74, 0xc1, 0x57, 0x03, 0xba, 0x85, 0x26, 0xa7, 0xb8, 0xb8, 0x14, 0xc5, 0x77, 0x29, 0x36,
	0x3e, 0x34, 0xee, 0xf3, 0x7e, 0xcd, 0x87, 0xbd, 0x5f, 0xfb, 0x3e, 0xef, 0x77, 0xd7, 0xf9, 0x8d,
	0xbb, 0x38, 0x7f, 0x62, 0x3b, 0x96, 0x67, 0xcf, 0x9b, 0xfa, 0xb3, 0x3f, 0xfe, 0x16, 0x00, 0x00,
	0xff, 0xff, 0x6f, 0x3c, 0x90, 0x82, 0x2e, 0x06, 0x00, 0x00,
}
