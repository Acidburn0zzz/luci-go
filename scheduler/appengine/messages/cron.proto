// Copyright 2015 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

syntax = "proto3";

package messages;


// Job specifies a single scheduler job belonging to a project.
message Job {
  // Id is a name of the job (unique for the project).
  string id = 1;
  // Schedule in regular cron expression format.
  string schedule = 2;
  // Disables is true to disable this job.
  bool disabled = 3;
  // Task defines what exactly to execute.
  Task task = 4;
}


// Task defines what exactly to do. One and only one field must be set.
message Task {
  // Noop is used for testing. It is "do nothing" task.
  NoopTask noop = 1;
  // UrlFetch can be used to make a simple HTTP call.
  UrlFetchTask url_fetch = 2;
  // SwarmingTask can be used to schedule swarming job.
  SwarmingTask swarming_task = 3;
  // BuildbucketTask can be used to schedule buildbucket job.
  BuildbucketTask buildbucket_task = 4;
}


// NoopTask is used for testing. It is "do nothing" task.
message NoopTask {
}


// UrlFetchTask specifies parameters for simple HTTP call.
message UrlFetchTask {
  // Method is HTTP method to use, such as "GET" or "POST". Default is "GET".
  string method = 1;
  // Url to send the request to.
  string url = 2;
  // Timeout is how long to wait for request to complete. Default is 60 sec.
  int32 timeout_sec = 3;
  // TODO: add more.
}


// SwarmingTask specifies parameters of Swarming-based jobs.
message SwarmingTask {
  // IsolatedRef defines a data tree reference, normally a reference to
  // an .isolated file
  message IsolatedRef {
    string isolated = 1;
    string isolated_server = 2;
    string namespace = 3;
  }

  // Server is URL of the swarming service to use.
  string server = 1;

  // What to run. Only one of 'command' or 'isolated_ref' must be given.
  repeated string command = 2;
  IsolatedRef isolated_ref = 3;

  // Additional arguments to pass to isolated command.
  repeated string extra_args = 4;
  // List of "key=value" pairs with additional OS environment variables.
  repeated string env = 5;

  // Where to run it. List of "key:value" pairs.
  repeated string dimensions = 6;
  // Tags is a list of tags (as "key:value" pairs) to assign to the task.
  repeated string tags = 7;
  // Priority is task priority (or niceness, lower value - higher priority).
  int32 priority = 8;

  // Timeouts. All optional. The scheduler will set reasonable default values.
  int32 execution_timeout_secs = 9;
  int32 grace_period_secs = 10;
  int32 io_timeout_secs = 11;
}


// BuildbucketTask specifies parameters of Buildbucket-based jobs.
message BuildbucketTask {
  // Server is URL of the bulildbucket service to use.
  string server = 1;
  // Bucket defines what bucket to add the task to.
  string bucket = 2;
  // Builder defines what to run.
  string builder = 3;
  // Properties is arbitrary "key:value" pairs describing the task.
  repeated string properties = 4;
  // Tags is a list of tags (as "key:value" pairs) to assign to the task.
  repeated string tags = 5;
}


// ProjectConfig defines a schema for config file that describe jobs belonging
// to some project.
message ProjectConfig {
  // Job is a set of jobs defines in the project. It's singular to make
  // text-encoded proto definitions more readable.
  repeated Job job = 1;
}
