// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/luci/luci-go/dm/api/distributor/swarming/v1/cipd.proto

/*
Package swarmingV1 is a generated protocol buffer package.

It is generated from these files:
	github.com/luci/luci-go/dm/api/distributor/swarming/v1/cipd.proto
	github.com/luci/luci-go/dm/api/distributor/swarming/v1/config.proto
	github.com/luci/luci-go/dm/api/distributor/swarming/v1/isolate_ref.proto
	github.com/luci/luci-go/dm/api/distributor/swarming/v1/params.proto
	github.com/luci/luci-go/dm/api/distributor/swarming/v1/result.proto

It has these top-level messages:
	CipdPackage
	CipdSpec
	Config
	IsolatedRef
	Parameters
	Result
*/
package swarmingV1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CipdPackage struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *CipdPackage) Reset()                    { *m = CipdPackage{} }
func (m *CipdPackage) String() string            { return proto.CompactTextString(m) }
func (*CipdPackage) ProtoMessage()               {}
func (*CipdPackage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CipdPackage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CipdPackage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type CipdSpec struct {
	// Server to use for cipd packages. Required (though it may be specified
	// by the quest's designated distributor config). This must be
	// scheme://<hostname>, e.g. "https://example.appspot.com". The only
	// supported schemes are http and https.
	Server string `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// Specifies the CIPD package to use for the job to obtain the actual CIPD
	// client binary. You usually want to omit this.
	Client *CipdPackage `protobuf:"bytes,2,opt,name=client" json:"client,omitempty"`
	// A mapping from path-to-install to a list of cipd packages to install at
	// that location. To install packages in the root of the job, use the path
	// ''.
	ByPath map[string]*CipdSpec_CipdPackages `protobuf:"bytes,3,rep,name=by_path,json=byPath" json:"by_path,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CipdSpec) Reset()                    { *m = CipdSpec{} }
func (m *CipdSpec) String() string            { return proto.CompactTextString(m) }
func (*CipdSpec) ProtoMessage()               {}
func (*CipdSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CipdSpec) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *CipdSpec) GetClient() *CipdPackage {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *CipdSpec) GetByPath() map[string]*CipdSpec_CipdPackages {
	if m != nil {
		return m.ByPath
	}
	return nil
}

type CipdSpec_CipdPackages struct {
	Pkg []*CipdPackage `protobuf:"bytes,1,rep,name=pkg" json:"pkg,omitempty"`
}

func (m *CipdSpec_CipdPackages) Reset()                    { *m = CipdSpec_CipdPackages{} }
func (m *CipdSpec_CipdPackages) String() string            { return proto.CompactTextString(m) }
func (*CipdSpec_CipdPackages) ProtoMessage()               {}
func (*CipdSpec_CipdPackages) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *CipdSpec_CipdPackages) GetPkg() []*CipdPackage {
	if m != nil {
		return m.Pkg
	}
	return nil
}

func init() {
	proto.RegisterType((*CipdPackage)(nil), "swarmingV1.CipdPackage")
	proto.RegisterType((*CipdSpec)(nil), "swarmingV1.CipdSpec")
	proto.RegisterType((*CipdSpec_CipdPackages)(nil), "swarmingV1.CipdSpec.CipdPackages")
}

func init() {
	proto.RegisterFile("github.com/luci/luci-go/dm/api/distributor/swarming/v1/cipd.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x4f, 0x4f, 0x84, 0x30,
	0x10, 0xc5, 0xc3, 0xa2, 0xac, 0x0e, 0x1e, 0x4c, 0x0f, 0x4a, 0xf6, 0x84, 0x7b, 0x5a, 0x0f, 0xd2,
	0xec, 0x7a, 0xd0, 0xd5, 0x93, 0x1a, 0xef, 0x1b, 0x4c, 0x3c, 0x99, 0x98, 0x52, 0x1a, 0x98, 0xf0,
	0xa7, 0x4d, 0x29, 0x18, 0x3e, 0x91, 0x5f, 0xd3, 0x50, 0xd9, 0x48, 0x8c, 0x5e, 0xc8, 0xbc, 0xc9,
	0x7b, 0xef, 0xc7, 0x14, 0x1e, 0x32, 0x34, 0x79, 0x9b, 0x44, 0x5c, 0x56, 0xb4, 0x6c, 0x39, 0xda,
	0xcf, 0x55, 0x26, 0x69, 0x5a, 0x51, 0xa6, 0x90, 0xa6, 0xd8, 0x18, 0x8d, 0x49, 0x6b, 0xa4, 0xa6,
	0xcd, 0x07, 0xd3, 0x15, 0xd6, 0x19, 0xed, 0xd6, 0x94, 0xa3, 0x4a, 0x23, 0xa5, 0xa5, 0x91, 0x04,
	0xf6, 0xfb, 0xd7, 0xf5, 0xf2, 0x1e, 0xfc, 0x27, 0x54, 0xe9, 0x8e, 0xf1, 0x82, 0x65, 0x82, 0x10,
	0x38, 0xa8, 0x59, 0x25, 0x02, 0x27, 0x74, 0x56, 0xc7, 0xb1, 0x9d, 0x49, 0x00, 0xf3, 0x4e, 0xe8,
	0x06, 0x65, 0x1d, 0xcc, 0xec, 0x7a, 0x2f, 0x97, 0x9f, 0x33, 0x38, 0x1a, 0xd2, 0x2f, 0x4a, 0x70,
	0x72, 0x06, 0x5e, 0x23, 0x74, 0x27, 0xf4, 0x18, 0x1e, 0x15, 0xa1, 0xe0, 0xf1, 0x12, 0x45, 0x6d,
	0x6c, 0xda, 0xdf, 0x9c, 0x47, 0x3f, 0xf8, 0x68, 0xc2, 0x8e, 0x47, 0x1b, 0xd9, 0xc2, 0x3c, 0xe9,
	0xdf, 0x15, 0x33, 0x79, 0xe0, 0x86, 0xee, 0xca, 0xdf, 0x84, 0xbf, 0x13, 0x03, 0x2f, 0x7a, 0xec,
	0x77, 0xcc, 0xe4, 0xcf, 0xb5, 0xd1, 0x7d, 0xec, 0x25, 0x56, 0x2c, 0xb6, 0x70, 0x32, 0x69, 0x6c,
	0xc8, 0x25, 0xb8, 0xaa, 0xc8, 0x02, 0xc7, 0xd6, 0xfc, 0x0b, 0x1e, 0x3c, 0x8b, 0x37, 0xf0, 0x27,
	0x8d, 0xe4, 0x14, 0xdc, 0x42, 0xf4, 0xe3, 0x29, 0xc3, 0x48, 0x6e, 0xe0, 0xb0, 0x63, 0x65, 0x2b,
	0xc6, 0x33, 0x2e, 0xfe, 0xfc, 0xa9, 0x29, 0x3d, 0xfe, 0xf6, 0xdf, 0xcd, 0x6e, 0x9d, 0xc4, 0xb3,
	0x2f, 0x7f, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x57, 0xa3, 0xfd, 0xbe, 0x01, 0x00, 0x00,
}
