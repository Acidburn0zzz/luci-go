// Code generated by protoc-gen-go.
// source: github.com/luci/luci-go/dm/api/distributor/swarming/v1/params.proto
// DO NOT EDIT!

package swarmingV1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/luci/luci-go/common/proto/google"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Parameters represents the set of swarming parameters that the Swarming v1
// distributor can interpret for use with a Swarming v1 compatible service.
type Parameters struct {
	Scheduling *Parameters_Scheduling `protobuf:"bytes,1,opt,name=scheduling" json:"scheduling,omitempty"`
	Meta       *Parameters_Meta       `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	Job        *Parameters_Job        `protobuf:"bytes,3,opt,name=job" json:"job,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Parameters) GetScheduling() *Parameters_Scheduling {
	if m != nil {
		return m.Scheduling
	}
	return nil
}

func (m *Parameters) GetMeta() *Parameters_Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Parameters) GetJob() *Parameters_Job {
	if m != nil {
		return m.Job
	}
	return nil
}

// These parameters affect how the Executions for this Quest are scheduled.
type Parameters_Scheduling struct {
	// Priority adjusts the scheduling preference for Executions. The higher the
	// priority number, the longer it will take to schedule, and vice versa (ala
	// `nice`).
	//
	// A value of 0 (default) corresponds to a default priority (currently 100).
	// Other values correspond directly to the swarming task Priority.
	//
	// THIS MEANS THAT PRIORITY 0 IS NOT PERMITTED HERE! If you want 0, use
	// 1 instead.
	//
	// This must be <= 255.
	Priority uint32 `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
	// These specifiy the profile of the machine to use for Execuions of this
	// quest. These can indicate OS, number of cores, amount of ram, GPU type,
	// pool, etc. See the swarming service instance for available dimensions.
	Dimensions map[string]string `protobuf:"bytes,2,rep,name=dimensions" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// This indicates the maximum amount of time that an Execution may run
	// without emitting IO on stdout/err. 0 means 'no timeout'.
	IoTimeout *google_protobuf.Duration `protobuf:"bytes,3,opt,name=io_timeout,json=ioTimeout" json:"io_timeout,omitempty"`
}

func (m *Parameters_Scheduling) Reset()                    { *m = Parameters_Scheduling{} }
func (m *Parameters_Scheduling) String() string            { return proto.CompactTextString(m) }
func (*Parameters_Scheduling) ProtoMessage()               {}
func (*Parameters_Scheduling) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

func (m *Parameters_Scheduling) GetDimensions() map[string]string {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Parameters_Scheduling) GetIoTimeout() *google_protobuf.Duration {
	if m != nil {
		return m.IoTimeout
	}
	return nil
}

type Parameters_Meta struct {
	// The 'human readable' name prefix for Executions of this quest. DM will
	// automatically prepend this to the execution ID. So if this was "cool
	// job", the swarming task name would be
	//   "cool job / <quest_ID>|<attempt>|<execution>"
	NamePrefix string `protobuf:"bytes,1,opt,name=name_prefix,json=namePrefix" json:"name_prefix,omitempty"`
}

func (m *Parameters_Meta) Reset()                    { *m = Parameters_Meta{} }
func (m *Parameters_Meta) String() string            { return proto.CompactTextString(m) }
func (*Parameters_Meta) ProtoMessage()               {}
func (*Parameters_Meta) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 1} }

type Parameters_Job struct {
	Inputs *Parameters_Job_Inputs `protobuf:"bytes,1,opt,name=inputs" json:"inputs,omitempty"`
	// This is the "argv" to run with this job. This includes substitution
	// paramters defined by swarming's run_isolated.py script:
	//   https://github.com/luci/luci-py/blob/master/client/run_isolated.py
	//
	// Additionally, DM provides the following substitutions:
	//   ${DM.PREVIOUS.EXECUTION.STATE:PATH} - the path to a JSONPB encoding of
	//     the swarming_v1.Result from the previous Execution of this Attempt.
	//   ${DM.QUEST.DATA.DESC:PATH} - the path to the
	//     dm.Quest.Data.Desc JSONPB for the quest that this execution is part
	//     of.
	//   ${DM.EXECUTION.AUTH:PATH} - the path to the JSONPB of a
	//     dm.Execution.Auth for the current execution. Consuming this file is
	//     currently required to interact with DM, making this substitution
	//     parameter a requirement.
	//   ${DM.HOST} - the hostname to use to access DM's pRPC API.
	//
	// Command MUST be specified; specifying a command in any of the isolated
	// inputs WILL NOT DO ANYTHING.
	Command []string `protobuf:"bytes,2,rep,name=command" json:"command,omitempty"`
	// Environment variables for the executions.
	Env map[string]string `protobuf:"bytes,4,rep,name=env" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Parameters_Job) Reset()                    { *m = Parameters_Job{} }
func (m *Parameters_Job) String() string            { return proto.CompactTextString(m) }
func (*Parameters_Job) ProtoMessage()               {}
func (*Parameters_Job) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 2} }

func (m *Parameters_Job) GetInputs() *Parameters_Job_Inputs {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Parameters_Job) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

type Parameters_Job_Inputs struct {
	// 0 or more isolated IDs that will be 'included' together into the final
	// job .isolated sent to swarming.
	//
	// The "server" value must either be omitted, or equal the isolate server
	// defined by this distributor's config (the `isolate.host` field,
	// prepended with "https://").
	Isolated []*IsolatedRef `protobuf:"bytes,1,rep,name=isolated" json:"isolated,omitempty"`
	// 0 or more cipd packages for the job.
	Packages []*Parameters_Job_Inputs_CipdPackage `protobuf:"bytes,2,rep,name=packages" json:"packages,omitempty"`
	// Optional server to use for cipd packages. If you know you're using
	// swarming's default server, you can omit this.
	CipdServer string `protobuf:"bytes,3,opt,name=cipd_server,json=cipdServer" json:"cipd_server,omitempty"`
}

func (m *Parameters_Job_Inputs) Reset()                    { *m = Parameters_Job_Inputs{} }
func (m *Parameters_Job_Inputs) String() string            { return proto.CompactTextString(m) }
func (*Parameters_Job_Inputs) ProtoMessage()               {}
func (*Parameters_Job_Inputs) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 2, 0} }

func (m *Parameters_Job_Inputs) GetIsolated() []*IsolatedRef {
	if m != nil {
		return m.Isolated
	}
	return nil
}

func (m *Parameters_Job_Inputs) GetPackages() []*Parameters_Job_Inputs_CipdPackage {
	if m != nil {
		return m.Packages
	}
	return nil
}

type Parameters_Job_Inputs_CipdPackage struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Path    string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
}

func (m *Parameters_Job_Inputs_CipdPackage) Reset()         { *m = Parameters_Job_Inputs_CipdPackage{} }
func (m *Parameters_Job_Inputs_CipdPackage) String() string { return proto.CompactTextString(m) }
func (*Parameters_Job_Inputs_CipdPackage) ProtoMessage()    {}
func (*Parameters_Job_Inputs_CipdPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0, 2, 0, 0}
}

func init() {
	proto.RegisterType((*Parameters)(nil), "swarmingV1.Parameters")
	proto.RegisterType((*Parameters_Scheduling)(nil), "swarmingV1.Parameters.Scheduling")
	proto.RegisterType((*Parameters_Meta)(nil), "swarmingV1.Parameters.Meta")
	proto.RegisterType((*Parameters_Job)(nil), "swarmingV1.Parameters.Job")
	proto.RegisterType((*Parameters_Job_Inputs)(nil), "swarmingV1.Parameters.Job.Inputs")
	proto.RegisterType((*Parameters_Job_Inputs_CipdPackage)(nil), "swarmingV1.Parameters.Job.Inputs.CipdPackage")
}

func init() {
	proto.RegisterFile("github.com/luci/luci-go/dm/api/distributor/swarming/v1/params.proto", fileDescriptor2)
}

var fileDescriptor2 = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x52, 0x4f, 0x8b, 0x13, 0x31,
	0x1c, 0xa5, 0x3b, 0xb5, 0xdb, 0xfe, 0x8a, 0x28, 0x41, 0xb0, 0x46, 0xf0, 0xef, 0x41, 0x0f, 0x6e,
	0x42, 0x5d, 0x94, 0x55, 0xf0, 0x20, 0xbb, 0x0b, 0x56, 0x10, 0x6b, 0x56, 0xbc, 0x96, 0x4c, 0x27,
	0x9d, 0xc6, 0xed, 0x4c, 0x86, 0x24, 0x53, 0xdd, 0x4f, 0xe2, 0x37, 0xf2, 0x13, 0x79, 0xf2, 0x64,
	0x92, 0xf9, 0xd3, 0x22, 0xac, 0xc5, 0xbd, 0x0c, 0xc9, 0x2f, 0xef, 0xbd, 0xbc, 0x79, 0x2f, 0x70,
	0x9c, 0x4a, 0xbb, 0x2c, 0x63, 0x32, 0x57, 0x19, 0x5d, 0x95, 0x73, 0x19, 0x3e, 0x07, 0xa9, 0xa2,
	0x49, 0x46, 0x79, 0x21, 0x69, 0x22, 0x8d, 0xd5, 0x32, 0x2e, 0xad, 0xd2, 0xd4, 0x7c, 0xe3, 0x3a,
	0x93, 0x79, 0x4a, 0xd7, 0x63, 0x5a, 0x70, 0xcd, 0x33, 0x43, 0x0a, 0xad, 0xac, 0x42, 0xd0, 0x9c,
	0x7c, 0x19, 0xe3, 0x7b, 0xa9, 0x52, 0xe9, 0x4a, 0xd0, 0x70, 0x12, 0x97, 0x0b, 0x9a, 0x94, 0x9a,
	0x5b, 0xa9, 0xf2, 0x0a, 0x8b, 0xdf, 0x5d, 0xf1, 0x42, 0x69, 0xd4, 0x8a, 0x5b, 0x31, 0xd3, 0x62,
	0x51, 0x29, 0x3d, 0xfa, 0xb1, 0x0f, 0x30, 0xf5, 0x36, 0x84, 0x15, 0xda, 0xa0, 0xb7, 0x00, 0x66,
	0xbe, 0x14, 0x49, 0xb9, 0x72, 0x8c, 0x51, 0xe7, 0x41, 0xe7, 0xe9, 0xf0, 0xf9, 0x43, 0xb2, 0x71,
	0x46, 0x36, 0x58, 0x72, 0xd6, 0x02, 0xd9, 0x16, 0x09, 0x51, 0xe8, 0x3a, 0x00, 0x1f, 0xed, 0x05,
	0xf2, 0xdd, 0x4b, 0xc8, 0x1f, 0x1c, 0x84, 0x05, 0x20, 0x7a, 0x06, 0xd1, 0x57, 0x15, 0x8f, 0xa2,
	0x80, 0xc7, 0x97, 0xe0, 0xdf, 0xab, 0x98, 0x79, 0x18, 0xfe, 0xd5, 0x01, 0xd8, 0xdc, 0x8c, 0x30,
	0xf4, 0x0b, 0x2d, 0x95, 0x96, 0xf6, 0x22, 0xd8, 0xbd, 0xce, 0xda, 0x3d, 0xfa, 0x04, 0x90, 0xc8,
	0x4c, 0xe4, 0xc6, 0x05, 0x67, 0x9c, 0x9f, 0xc8, 0xe9, 0x8f, 0x77, 0xfe, 0x0c, 0x39, 0x69, 0x39,
	0xa7, 0xb9, 0xd5, 0x17, 0x6c, 0x4b, 0x04, 0x1d, 0x01, 0x48, 0x35, 0xb3, 0x6e, 0xa0, 0x4a, 0x5b,
	0x5b, 0xbe, 0x43, 0xaa, 0xb6, 0x48, 0xd3, 0x16, 0x39, 0xa9, 0xdb, 0x62, 0x03, 0xa9, 0x3e, 0x57,
	0x58, 0xfc, 0x06, 0x6e, 0xfc, 0x25, 0x8c, 0x6e, 0x42, 0x74, 0x2e, 0x2a, 0xdb, 0x03, 0xe6, 0x97,
	0xe8, 0x16, 0x5c, 0x5b, 0xf3, 0x55, 0x29, 0x42, 0x78, 0x03, 0x56, 0x6d, 0x5e, 0xef, 0x1d, 0x75,
	0xf0, 0x13, 0xe8, 0xfa, 0xc8, 0xd0, 0x7d, 0x18, 0xe6, 0xce, 0xf3, 0xac, 0x70, 0x15, 0xca, 0xef,
	0x35, 0x17, 0xfc, 0x68, 0x1a, 0x26, 0xf8, 0x67, 0x04, 0x91, 0x0b, 0x0b, 0xbd, 0x82, 0x9e, 0xcc,
	0x8b, 0xd2, 0x9a, 0x1d, 0x2d, 0x3a, 0x2c, 0x99, 0x04, 0x20, 0xab, 0x09, 0x68, 0x04, 0xfb, 0xee,
	0x61, 0x65, 0x3c, 0x4f, 0x42, 0x68, 0x03, 0xd6, 0x6c, 0xd1, 0x0b, 0x88, 0x44, 0xbe, 0x1e, 0x75,
	0x43, 0x94, 0x8f, 0xff, 0xa1, 0x78, 0x9a, 0xaf, 0xab, 0xf0, 0x3c, 0x1e, 0xff, 0xee, 0x40, 0xaf,
	0xba, 0x03, 0x1d, 0x42, 0xbf, 0x7e, 0x84, 0x89, 0x33, 0xe6, 0x65, 0x6e, 0x6f, 0xcb, 0x4c, 0xea,
	0x33, 0x26, 0x16, 0xac, 0x05, 0xa2, 0x89, 0x2b, 0x99, 0xcf, 0xcf, 0x79, 0x2a, 0x9a, 0x1a, 0x0f,
	0x76, 0xfe, 0x0d, 0x39, 0x96, 0x45, 0x32, 0xad, 0x58, 0xac, 0xa5, 0xfb, 0xfc, 0xe6, 0xee, 0x60,
	0x66, 0x84, 0x5e, 0x0b, 0x1d, 0x1a, 0x74, 0xf9, 0xf9, 0xd1, 0x59, 0x98, 0xe0, 0x8f, 0x30, 0xdc,
	0x62, 0x22, 0x04, 0x5d, 0x1f, 0x6e, 0x1d, 0x74, 0x58, 0xfb, 0x59, 0xc1, 0xed, 0xb2, 0x2e, 0x29,
	0xac, 0x7d, 0x66, 0x8e, 0xed, 0xcb, 0xad, 0x35, 0x9b, 0x2d, 0x7e, 0x09, 0xfd, 0x26, 0x8d, 0xff,
	0x69, 0x3c, 0xee, 0x85, 0xe7, 0x74, 0xf8, 0x27, 0x00, 0x00, 0xff, 0xff, 0x7f, 0xfc, 0xb8, 0xa6,
	0x5d, 0x04, 0x00, 0x00,
}
