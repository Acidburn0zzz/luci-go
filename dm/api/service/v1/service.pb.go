// Code generated by protoc-gen-go.
// source: github.com/luci/luci-go/dm/api/service/v1/service.proto
// DO NOT EDIT!

package dm

import prpc "github.com/luci/luci-go/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/luci/luci-go/common/proto/google"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Deps service

type DepsClient interface {
	// allows you to add additional data to the current dependency graph.
	EnsureGraphData(ctx context.Context, in *EnsureGraphDataReq, opts ...grpc.CallOption) (*EnsureGraphDataRsp, error)
	// is called by Execution clients to activate themselves with DM.
	ActivateExecution(ctx context.Context, in *ActivateExecutionReq, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// is called by Execution clients to indicate that an Attempt is finished.
	FinishAttempt(ctx context.Context, in *FinishAttemptReq, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// runs queries, and walks along the dependency graph from the query results.
	WalkGraph(ctx context.Context, in *WalkGraphReq, opts ...grpc.CallOption) (*GraphData, error)
}
type depsPRPCClient struct {
	client *prpc.Client
}

func NewDepsPRPCClient(client *prpc.Client) DepsClient {
	return &depsPRPCClient{client}
}

func (c *depsPRPCClient) EnsureGraphData(ctx context.Context, in *EnsureGraphDataReq, opts ...grpc.CallOption) (*EnsureGraphDataRsp, error) {
	out := new(EnsureGraphDataRsp)
	err := c.client.Call(ctx, "dm.Deps", "EnsureGraphData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsPRPCClient) ActivateExecution(ctx context.Context, in *ActivateExecutionReq, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := c.client.Call(ctx, "dm.Deps", "ActivateExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsPRPCClient) FinishAttempt(ctx context.Context, in *FinishAttemptReq, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := c.client.Call(ctx, "dm.Deps", "FinishAttempt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsPRPCClient) WalkGraph(ctx context.Context, in *WalkGraphReq, opts ...grpc.CallOption) (*GraphData, error) {
	out := new(GraphData)
	err := c.client.Call(ctx, "dm.Deps", "WalkGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type depsClient struct {
	cc *grpc.ClientConn
}

func NewDepsClient(cc *grpc.ClientConn) DepsClient {
	return &depsClient{cc}
}

func (c *depsClient) EnsureGraphData(ctx context.Context, in *EnsureGraphDataReq, opts ...grpc.CallOption) (*EnsureGraphDataRsp, error) {
	out := new(EnsureGraphDataRsp)
	err := grpc.Invoke(ctx, "/dm.Deps/EnsureGraphData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsClient) ActivateExecution(ctx context.Context, in *ActivateExecutionReq, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/dm.Deps/ActivateExecution", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsClient) FinishAttempt(ctx context.Context, in *FinishAttemptReq, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/dm.Deps/FinishAttempt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsClient) WalkGraph(ctx context.Context, in *WalkGraphReq, opts ...grpc.CallOption) (*GraphData, error) {
	out := new(GraphData)
	err := grpc.Invoke(ctx, "/dm.Deps/WalkGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Deps service

type DepsServer interface {
	// allows you to add additional data to the current dependency graph.
	EnsureGraphData(context.Context, *EnsureGraphDataReq) (*EnsureGraphDataRsp, error)
	// is called by Execution clients to activate themselves with DM.
	ActivateExecution(context.Context, *ActivateExecutionReq) (*google_protobuf2.Empty, error)
	// is called by Execution clients to indicate that an Attempt is finished.
	FinishAttempt(context.Context, *FinishAttemptReq) (*google_protobuf2.Empty, error)
	// runs queries, and walks along the dependency graph from the query results.
	WalkGraph(context.Context, *WalkGraphReq) (*GraphData, error)
}

func RegisterDepsServer(s prpc.Registrar, srv DepsServer) {
	s.RegisterService(&_Deps_serviceDesc, srv)
}

func _Deps_EnsureGraphData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureGraphDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepsServer).EnsureGraphData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Deps/EnsureGraphData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepsServer).EnsureGraphData(ctx, req.(*EnsureGraphDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deps_ActivateExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateExecutionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepsServer).ActivateExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Deps/ActivateExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepsServer).ActivateExecution(ctx, req.(*ActivateExecutionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deps_FinishAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishAttemptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepsServer).FinishAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Deps/FinishAttempt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepsServer).FinishAttempt(ctx, req.(*FinishAttemptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deps_WalkGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalkGraphReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepsServer).WalkGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Deps/WalkGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepsServer).WalkGraph(ctx, req.(*WalkGraphReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Deps_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dm.Deps",
	HandlerType: (*DepsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnsureGraphData",
			Handler:    _Deps_EnsureGraphData_Handler,
		},
		{
			MethodName: "ActivateExecution",
			Handler:    _Deps_ActivateExecution_Handler,
		},
		{
			MethodName: "FinishAttempt",
			Handler:    _Deps_FinishAttempt_Handler,
		},
		{
			MethodName: "WalkGraph",
			Handler:    _Deps_WalkGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/luci/luci-go/dm/api/service/v1/service.proto",
}

func init() {
	proto.RegisterFile("github.com/luci/luci-go/dm/api/service/v1/service.proto", fileDescriptor5)
}

var fileDescriptor5 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x91, 0x41, 0x4b, 0xfc, 0x30,
	0x10, 0xc5, 0xf9, 0xff, 0x11, 0xc1, 0xc0, 0xa2, 0x06, 0x11, 0xa9, 0x5f, 0x41, 0x13, 0xd4, 0x83,
	0x20, 0x28, 0x54, 0xb6, 0x7a, 0xf7, 0xe2, 0xb1, 0x4c, 0xdb, 0xd9, 0x36, 0x6c, 0xdb, 0xc4, 0x76,
	0x52, 0xf5, 0xc3, 0x0b, 0x92, 0xa4, 0x5d, 0xd0, 0x15, 0xa9, 0x97, 0x90, 0xbc, 0xcc, 0xfb, 0x31,
	0x6f, 0x86, 0x5d, 0x97, 0x8a, 0x2a, 0x9b, 0x89, 0x5c, 0x37, 0xb2, 0xb6, 0xb9, 0xf2, 0xc7, 0x79,
	0xa9, 0x65, 0xd1, 0x48, 0x30, 0x4a, 0xf6, 0xd8, 0x0d, 0x2a, 0x47, 0x39, 0x5c, 0x4c, 0x57, 0x61,
	0x3a, 0x4d, 0x9a, 0xff, 0x2f, 0x9a, 0xe8, 0xb4, 0xd4, 0xba, 0xac, 0x51, 0x7a, 0x25, 0xb3, 0x2b,
	0x89, 0x8d, 0xa1, 0xf7, 0x50, 0x10, 0xdd, 0xcc, 0x27, 0x97, 0x1d, 0x98, 0x2a, 0x2d, 0x80, 0x60,
	0xf4, 0xc6, 0xf3, 0xbd, 0xd8, 0xf6, 0xb6, 0xc3, 0x74, 0x0b, 0x71, 0x3f, 0x1f, 0x01, 0x39, 0xa9,
	0x01, 0x08, 0x53, 0x7c, 0xc3, 0xdc, 0x92, 0xd2, 0xed, 0xc8, 0xb8, 0x9b, 0xcf, 0x58, 0xa9, 0x56,
	0xf5, 0x55, 0x0a, 0x44, 0x6e, 0x06, 0x7f, 0x1f, 0xc1, 0x2b, 0xd4, 0xeb, 0x10, 0x22, 0x78, 0x2f,
	0x3f, 0xfe, 0xb1, 0x9d, 0x25, 0x9a, 0x9e, 0xc7, 0x6c, 0x3f, 0xf1, 0x19, 0x1f, 0xdd, 0xef, 0x12,
	0x08, 0xf8, 0xb1, 0x28, 0x1a, 0xf1, 0x4d, 0x7c, 0xc2, 0x97, 0xe8, 0x47, 0xbd, 0x37, 0x3c, 0x61,
	0x87, 0xf1, 0x98, 0x31, 0x99, 0x22, 0xf2, 0x13, 0x57, 0xbc, 0x25, 0x07, 0x4c, 0xd8, 0xab, 0x98,
	0xf6, 0x2a, 0x12, 0xb7, 0x57, 0x7e, 0xcb, 0x16, 0x0f, 0x3e, 0x66, 0x1c, 0x52, 0xf2, 0x23, 0x87,
	0xf8, 0x22, 0xfd, 0x66, 0x3f, 0x63, 0x7b, 0xcf, 0x50, 0xaf, 0x7d, 0x67, 0xfc, 0xc0, 0x59, 0x37,
	0x4f, 0x67, 0x5b, 0x38, 0x65, 0xd3, 0x76, 0xb6, 0xeb, 0xdd, 0x57, 0x9f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xef, 0xb9, 0x47, 0x29, 0xa1, 0x02, 0x00, 0x00,
}
