// Code generated by protoc-gen-go.
// source: github.com/luci/luci-go/dm/api/service/v1/walk_graph.proto
// DO NOT EDIT!

package dm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/luci/luci-go/common/proto/google"
import _ "github.com/luci/luci-go/common/proto/google"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Direction indicates that direction of dependencies that the request should
// walk.
type WalkGraphReq_Mode_Direction int32

const (
	WalkGraphReq_Mode_FORWARDS  WalkGraphReq_Mode_Direction = 0
	WalkGraphReq_Mode_BACKWARDS WalkGraphReq_Mode_Direction = 1
	WalkGraphReq_Mode_BOTH      WalkGraphReq_Mode_Direction = 2
)

var WalkGraphReq_Mode_Direction_name = map[int32]string{
	0: "FORWARDS",
	1: "BACKWARDS",
	2: "BOTH",
}
var WalkGraphReq_Mode_Direction_value = map[string]int32{
	"FORWARDS":  0,
	"BACKWARDS": 1,
	"BOTH":      2,
}

func (x WalkGraphReq_Mode_Direction) String() string {
	return proto.EnumName(WalkGraphReq_Mode_Direction_name, int32(x))
}
func (WalkGraphReq_Mode_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor7, []int{0, 0, 0}
}

// WalkGraphReq allows you to walk from one or more Quests through their
// Attempt's forward dependencies.
//
//
// The handler will evaluate all of the queries, executing them in parallel.
// For each attempt or quest produced by the query, it will queue a walk
// operation for that node, respecting the options set (max_depth, etc.).
type WalkGraphReq struct {
	// Optional. See Include.AttemptResult for restrictions.
	Auth *Execution_Auth `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	// Query specifies a list of queries to start the graph traversal on. The
	// traversal will occur as a union of the query results. Redundant
	// specification will not cause additional heavy work; every graph node will
	// be processed exactly once, regardless of how many times it appears in the
	// query results. However, redundancy in the queries will cause the server to
	// retrieve and discard more information.
	Query *GraphQuery         `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	Mode  *WalkGraphReq_Mode  `protobuf:"bytes,3,opt,name=mode" json:"mode,omitempty"`
	Limit *WalkGraphReq_Limit `protobuf:"bytes,4,opt,name=limit" json:"limit,omitempty"`
	// Include allows you to add additional information to the returned
	// GraphData which is typically medium-to-large sized.
	Include *WalkGraphReq_Include `protobuf:"bytes,5,opt,name=include" json:"include,omitempty"`
	Exclude *WalkGraphReq_Exclude `protobuf:"bytes,6,opt,name=exclude" json:"exclude,omitempty"`
}

func (m *WalkGraphReq) Reset()                    { *m = WalkGraphReq{} }
func (m *WalkGraphReq) String() string            { return proto.CompactTextString(m) }
func (*WalkGraphReq) ProtoMessage()               {}
func (*WalkGraphReq) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *WalkGraphReq) GetAuth() *Execution_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *WalkGraphReq) GetQuery() *GraphQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *WalkGraphReq) GetMode() *WalkGraphReq_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (m *WalkGraphReq) GetLimit() *WalkGraphReq_Limit {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *WalkGraphReq) GetInclude() *WalkGraphReq_Include {
	if m != nil {
		return m.Include
	}
	return nil
}

func (m *WalkGraphReq) GetExclude() *WalkGraphReq_Exclude {
	if m != nil {
		return m.Exclude
	}
	return nil
}

type WalkGraphReq_Mode struct {
	// DFS sets whether this is a Depth-first (ish) or a Breadth-first (ish) load.
	// Since the load operation is multi-threaded, the search order is best
	// effort, but will actually be some hybrid between DFS and BFS. This setting
	// controls the bias direction of the hybrid loading algorithm.
	Dfs       bool                        `protobuf:"varint,1,opt,name=dfs" json:"dfs,omitempty"`
	Direction WalkGraphReq_Mode_Direction `protobuf:"varint,2,opt,name=direction,enum=dm.WalkGraphReq_Mode_Direction" json:"direction,omitempty"`
}

func (m *WalkGraphReq_Mode) Reset()                    { *m = WalkGraphReq_Mode{} }
func (m *WalkGraphReq_Mode) String() string            { return proto.CompactTextString(m) }
func (*WalkGraphReq_Mode) ProtoMessage()               {}
func (*WalkGraphReq_Mode) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 0} }

type WalkGraphReq_Limit struct {
	// MaxDepth sets the number of attempts to traverse; 0 means 'immediate'
	// (no dependencies), -1 means 'no limit', and >0 is a limit.
	//
	// Any negative value besides -1 is an error.
	MaxDepth int64 `protobuf:"varint,1,opt,name=max_depth,json=maxDepth" json:"max_depth,omitempty"`
	// MaxTime sets the maximum amount of time that the query processor should
	// take. Application of this deadline is 'best effort', which means the query
	// may take a bit longer than this timeout and still attempt to return data.
	//
	// This is different than the grpc timeout header, which will set a hard
	// deadline for the request.
	MaxTime *google_protobuf.Duration `protobuf:"bytes,2,opt,name=max_time,json=maxTime" json:"max_time,omitempty"`
	// MaxDataSize sets the maximum amount of 'Data' (in bytes) that can be
	// returned, if include.quest_data, include.attempt_data, and/or
	// include.attempt_result are set. If this limit is hit, then the
	// appropriate 'partial' value will be set for that object, but the base
	// object would still be included in the result.
	//
	// If this limit is 0, a default limit of 16MB will be used. If this limit
	// exceeds 30MB, it will be reduced to 30MB.
	MaxDataSize uint32 `protobuf:"varint,3,opt,name=max_data_size,json=maxDataSize" json:"max_data_size,omitempty"`
}

func (m *WalkGraphReq_Limit) Reset()                    { *m = WalkGraphReq_Limit{} }
func (m *WalkGraphReq_Limit) String() string            { return proto.CompactTextString(m) }
func (*WalkGraphReq_Limit) ProtoMessage()               {}
func (*WalkGraphReq_Limit) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 1} }

func (m *WalkGraphReq_Limit) GetMaxTime() *google_protobuf.Duration {
	if m != nil {
		return m.MaxTime
	}
	return nil
}

type WalkGraphReq_Include struct {
	Quest     *WalkGraphReq_Include_Options `protobuf:"bytes,1,opt,name=quest" json:"quest,omitempty"`
	Attempt   *WalkGraphReq_Include_Options `protobuf:"bytes,2,opt,name=attempt" json:"attempt,omitempty"`
	Execution *WalkGraphReq_Include_Options `protobuf:"bytes,3,opt,name=execution" json:"execution,omitempty"`
	// Executions is the number of Executions to include per Attempt. If this
	// is 0, then the execution data will be omitted completely.
	//
	// Executions included are from high ids to low ids. So setting this to `1`
	// would return the LAST execution made for this Attempt.
	NumExecutions uint32 `protobuf:"varint,4,opt,name=num_executions,json=numExecutions" json:"num_executions,omitempty"`
	// FwdDeps instructs WalkGraph to include forward dependency information
	// from the result. This only changes the presence of information in the
	// result; if the query is walking forward attempt dependencies, that will
	// still occur even if this is false.
	FwdDeps bool `protobuf:"varint,5,opt,name=fwd_deps,json=fwdDeps" json:"fwd_deps,omitempty"`
	// BackDeps instructs WalkGraph to include the backwards dependency
	// information. This only changes the presence of information in the result;
	// if the query is walking backward attempt dependencies, that will still
	// occur even if this is false.
	BackDeps bool `protobuf:"varint,6,opt,name=back_deps,json=backDeps" json:"back_deps,omitempty"`
}

func (m *WalkGraphReq_Include) Reset()                    { *m = WalkGraphReq_Include{} }
func (m *WalkGraphReq_Include) String() string            { return proto.CompactTextString(m) }
func (*WalkGraphReq_Include) ProtoMessage()               {}
func (*WalkGraphReq_Include) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 2} }

func (m *WalkGraphReq_Include) GetQuest() *WalkGraphReq_Include_Options {
	if m != nil {
		return m.Quest
	}
	return nil
}

func (m *WalkGraphReq_Include) GetAttempt() *WalkGraphReq_Include_Options {
	if m != nil {
		return m.Attempt
	}
	return nil
}

func (m *WalkGraphReq_Include) GetExecution() *WalkGraphReq_Include_Options {
	if m != nil {
		return m.Execution
	}
	return nil
}

type WalkGraphReq_Include_Options struct {
	// Fills the 'id' field.
	//
	// If this is false, it will be omitted.
	//
	// Note that there's enough information contextually to derive these ids
	// on the client side, though it can be handy to have the server produce
	// them for you.
	Ids bool `protobuf:"varint,1,opt,name=ids" json:"ids,omitempty"`
	// Instructs the request to include the Data field
	Data bool `protobuf:"varint,2,opt,name=data" json:"data,omitempty"`
	// Instructs finished objects to include the Result field.
	//
	// If the requestor is an execution, the query logic will only include the
	// result if the execution's Attempt depends on it, otherwise it will be
	// blank.
	//
	// If the request's cumulative result data would be more than
	// limit.max_data_size of data, the remaining results will have their
	// Partial.Result set to DATA_SIZE_LIMIT.
	//
	// Has no effect for Quests.
	Result bool `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	// If set to true, objects with an abnormal termination will be included.
	Abnormal bool `protobuf:"varint,4,opt,name=abnormal" json:"abnormal,omitempty"`
	// If set to true, expired objects will be included.
	Expired bool `protobuf:"varint,5,opt,name=expired" json:"expired,omitempty"`
}

func (m *WalkGraphReq_Include_Options) Reset()         { *m = WalkGraphReq_Include_Options{} }
func (m *WalkGraphReq_Include_Options) String() string { return proto.CompactTextString(m) }
func (*WalkGraphReq_Include_Options) ProtoMessage()    {}
func (*WalkGraphReq_Include_Options) Descriptor() ([]byte, []int) {
	return fileDescriptor7, []int{0, 2, 0}
}

type WalkGraphReq_Exclude struct {
	// Do not include data from the following quests in the response.
	Quests []string `protobuf:"bytes,1,rep,name=quests" json:"quests,omitempty"`
	// Do not include data from the following attempts in the response.
	Attempts *AttemptList `protobuf:"bytes,2,opt,name=attempts" json:"attempts,omitempty"`
}

func (m *WalkGraphReq_Exclude) Reset()                    { *m = WalkGraphReq_Exclude{} }
func (m *WalkGraphReq_Exclude) String() string            { return proto.CompactTextString(m) }
func (*WalkGraphReq_Exclude) ProtoMessage()               {}
func (*WalkGraphReq_Exclude) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 3} }

func (m *WalkGraphReq_Exclude) GetAttempts() *AttemptList {
	if m != nil {
		return m.Attempts
	}
	return nil
}

func init() {
	proto.RegisterType((*WalkGraphReq)(nil), "dm.WalkGraphReq")
	proto.RegisterType((*WalkGraphReq_Mode)(nil), "dm.WalkGraphReq.Mode")
	proto.RegisterType((*WalkGraphReq_Limit)(nil), "dm.WalkGraphReq.Limit")
	proto.RegisterType((*WalkGraphReq_Include)(nil), "dm.WalkGraphReq.Include")
	proto.RegisterType((*WalkGraphReq_Include_Options)(nil), "dm.WalkGraphReq.Include.Options")
	proto.RegisterType((*WalkGraphReq_Exclude)(nil), "dm.WalkGraphReq.Exclude")
	proto.RegisterEnum("dm.WalkGraphReq_Mode_Direction", WalkGraphReq_Mode_Direction_name, WalkGraphReq_Mode_Direction_value)
}

func init() {
	proto.RegisterFile("github.com/luci/luci-go/dm/api/service/v1/walk_graph.proto", fileDescriptor7)
}

var fileDescriptor7 = []byte{
	// 656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x52, 0x6d, 0x4f, 0xd4, 0x4c,
	0x14, 0x7d, 0x96, 0x7d, 0x69, 0xf7, 0xc2, 0xf2, 0x90, 0x9b, 0x3c, 0x64, 0xe9, 0x93, 0x08, 0x21,
	0x6a, 0x30, 0x6a, 0x1b, 0xd7, 0x97, 0x0f, 0x18, 0x4d, 0x16, 0x17, 0x5f, 0x22, 0x4a, 0x1c, 0x48,
	0xf8, 0xb8, 0xe9, 0xb6, 0xc3, 0xd2, 0xd0, 0x6e, 0x4b, 0x67, 0x0a, 0x8b, 0x89, 0xfe, 0x01, 0x7f,
	0x81, 0xf1, 0xcf, 0x3a, 0x73, 0x3b, 0x5d, 0x8c, 0x48, 0x90, 0x2f, 0xcd, 0xdc, 0x7b, 0xce, 0xb9,
	0x73, 0x7b, 0xe6, 0xc0, 0xe6, 0x38, 0x92, 0x47, 0xc5, 0xc8, 0x0d, 0xd2, 0xc4, 0x8b, 0x8b, 0x20,
	0xa2, 0xcf, 0xc3, 0x71, 0xea, 0x85, 0x89, 0xe7, 0x67, 0x91, 0x27, 0x78, 0x7e, 0x1a, 0x05, 0xdc,
	0x3b, 0x7d, 0xe4, 0x9d, 0xf9, 0xf1, 0xf1, 0x70, 0x9c, 0xfb, 0xd9, 0x91, 0x9b, 0xe5, 0xa9, 0x4c,
	0x71, 0x2e, 0x4c, 0x9c, 0x5b, 0xe3, 0x34, 0x1d, 0xc7, 0xdc, 0xa3, 0xce, 0xa8, 0x38, 0xf4, 0xc2,
	0x22, 0xf7, 0x65, 0x94, 0x4e, 0x4a, 0x8e, 0xb3, 0xfa, 0x3b, 0x2e, 0xa3, 0x84, 0x0b, 0xe9, 0x27,
	0x99, 0x21, 0xdc, 0x60, 0x01, 0xba, 0x7b, 0x18, 0xfa, 0xd2, 0x37, 0xda, 0xe7, 0x37, 0xd5, 0x9e,
	0x14, 0x3c, 0x3f, 0x37, 0xe2, 0xa7, 0x7f, 0x2f, 0x96, 0xe7, 0x19, 0x17, 0xa5, 0x6c, 0xfd, 0xbb,
	0x0d, 0x0b, 0x07, 0xca, 0x89, 0x37, 0x7a, 0x20, 0xe3, 0x27, 0x78, 0x17, 0x1a, 0x7e, 0x21, 0x8f,
	0xba, 0xb5, 0xb5, 0xda, 0xc6, 0x7c, 0x0f, 0xdd, 0x30, 0x71, 0xb7, 0xa7, 0x3c, 0x28, 0xc8, 0x84,
	0xbe, 0x42, 0x18, 0xe1, 0x78, 0x1b, 0x9a, 0x74, 0x7d, 0x77, 0x8e, 0x88, 0x8b, 0x9a, 0x48, 0x43,
	0x3e, 0xe9, 0x2e, 0x2b, 0x41, 0xbc, 0x07, 0x8d, 0x24, 0x0d, 0x79, 0xb7, 0x4e, 0xa4, 0xff, 0x34,
	0xe9, 0xd7, 0xdb, 0xdc, 0x0f, 0x0a, 0x64, 0x44, 0xc1, 0x07, 0xd0, 0x8c, 0xa3, 0x24, 0x92, 0xdd,
	0x06, 0x71, 0x97, 0x2f, 0x71, 0x77, 0x34, 0xca, 0x4a, 0x12, 0xf6, 0xc0, 0x8a, 0x26, 0x41, 0x5c,
	0xa8, 0xd9, 0x4d, 0xe2, 0x77, 0x2f, 0xf1, 0xdf, 0x95, 0x38, 0xab, 0x88, 0x5a, 0xc3, 0xa7, 0xa5,
	0xa6, 0x75, 0x85, 0x66, 0x7b, 0x6a, 0x34, 0x86, 0xe8, 0x7c, 0xab, 0x41, 0x43, 0x2f, 0x89, 0x4b,
	0x50, 0x0f, 0x0f, 0x05, 0xd9, 0x62, 0x33, 0x7d, 0xc4, 0x17, 0xd0, 0x0e, 0xa3, 0x9c, 0x07, 0xda,
	0x19, 0x72, 0x61, 0xb1, 0xb7, 0xfa, 0xc7, 0x1f, 0x74, 0x07, 0x15, 0x8d, 0x5d, 0x28, 0xd6, 0x7b,
	0xd0, 0x9e, 0xf5, 0x71, 0x01, 0xec, 0xd7, 0xbb, 0xec, 0xa0, 0xcf, 0x06, 0x7b, 0x4b, 0xff, 0x60,
	0x07, 0xda, 0x5b, 0xfd, 0x57, 0xef, 0xcb, 0xb2, 0x86, 0x36, 0x34, 0xb6, 0x76, 0xf7, 0xdf, 0x2e,
	0xcd, 0x39, 0x5f, 0xa1, 0x49, 0x2e, 0xe0, 0xff, 0xd0, 0x4e, 0xfc, 0xe9, 0x30, 0xe4, 0x99, 0x79,
	0xaa, 0x3a, 0xb3, 0x55, 0x63, 0xa0, 0x6b, 0x7c, 0x02, 0xfa, 0x3c, 0xd4, 0xd1, 0x34, 0xaf, 0xb3,
	0xe2, 0x96, 0xb9, 0x75, 0xab, 0xdc, 0xba, 0x03, 0x93, 0x6b, 0x66, 0x29, 0xea, 0xbe, 0x62, 0xe2,
	0x3a, 0x74, 0x68, 0xa4, 0xca, 0xe3, 0x50, 0x44, 0x9f, 0xcb, 0x37, 0xeb, 0xb0, 0x79, 0x3d, 0x56,
	0xf5, 0xf6, 0x54, 0xcb, 0xf9, 0x51, 0x07, 0xcb, 0xd8, 0x8a, 0xcf, 0x28, 0x00, 0x42, 0x9a, 0xa4,
	0xac, 0x5d, 0xe5, 0xbf, 0xbb, 0x9b, 0xe9, 0x8b, 0x04, 0x2b, 0xe9, 0xb8, 0x09, 0x96, 0x2f, 0x25,
	0x4f, 0x32, 0x69, 0x96, 0xbb, 0x5e, 0x59, 0x09, 0xf0, 0x25, 0xb4, 0x79, 0x15, 0x46, 0x93, 0xa9,
	0xeb, 0xd5, 0x17, 0x12, 0xbc, 0x03, 0x8b, 0x93, 0x22, 0x19, 0xce, 0x1a, 0x82, 0xc2, 0xd6, 0x61,
	0x1d, 0xd5, 0x9d, 0xa5, 0x5c, 0xe0, 0x0a, 0xd8, 0x87, 0x67, 0xa1, 0x76, 0x57, 0x50, 0xba, 0x6c,
	0x66, 0xa9, 0x5a, 0x99, 0x2b, 0xb4, 0xf1, 0x23, 0x3f, 0x38, 0x2e, 0xb1, 0x16, 0x61, 0xb6, 0x6e,
	0x68, 0xd0, 0xf9, 0x02, 0x96, 0xb9, 0x54, 0xc7, 0x25, 0x0a, 0x67, 0x71, 0x51, 0x47, 0x44, 0x68,
	0x68, 0x6f, 0xe9, 0xa7, 0x6d, 0x46, 0x67, 0x5c, 0x86, 0x56, 0xce, 0x45, 0x11, 0x4b, 0xfa, 0x19,
	0x9b, 0x99, 0x0a, 0x1d, 0xb0, 0xfd, 0xd1, 0x24, 0xcd, 0x13, 0x3f, 0xa6, 0x0d, 0xd5, 0x25, 0x55,
	0x8d, 0x5d, 0x9d, 0xe2, 0x4c, 0x25, 0x27, 0xac, 0x76, 0x33, 0xa5, 0xf3, 0x11, 0x2c, 0x93, 0x5f,
	0x3d, 0x98, 0xdc, 0xd6, 0x1b, 0xd4, 0x37, 0xda, 0xcc, 0x54, 0x78, 0x5f, 0x0d, 0x2e, 0xbd, 0x14,
	0xc6, 0xfd, 0x7f, 0xb5, 0x7f, 0xfd, 0xb2, 0xb7, 0x13, 0x09, 0xc9, 0x66, 0x84, 0x51, 0x8b, 0xd2,
	0xf2, 0xf8, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xcd, 0xfd, 0x53, 0x55, 0x05, 0x00, 0x00,
}
