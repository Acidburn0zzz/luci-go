// Code generated by protoc-gen-go.
// source: github.com/luci/luci-go/deploytool/api/deploy/internal.proto
// DO NOT EDIT!

package deploy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// Frozen copy of layout configuration, associated with the current checkout.
//
// The "checkout" command creates this file after reading the current layout
// configuration. This is then used in subsequent operations to operate on the
// checkout.
type FrozenLayout struct {
	SourceGroup map[string]*FrozenLayout_SourceGroup `protobuf:"bytes,1,rep,name=source_group,json=sourceGroup" json:"source_group,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FrozenLayout) Reset()                    { *m = FrozenLayout{} }
func (m *FrozenLayout) String() string            { return proto.CompactTextString(m) }
func (*FrozenLayout) ProtoMessage()               {}
func (*FrozenLayout) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *FrozenLayout) GetSourceGroup() map[string]*FrozenLayout_SourceGroup {
	if m != nil {
		return m.SourceGroup
	}
	return nil
}

// * A single Source.
type FrozenLayout_Source struct {
	// * The backing Source entry.
	Source *Source `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	// * Relative path to the source's checkout.
	Relpath string `protobuf:"bytes,2,opt,name=relpath" json:"relpath,omitempty"`
	// * Revision.
	Revision string `protobuf:"bytes,3,opt,name=revision" json:"revision,omitempty"`
	// * Major version.
	MajorVersion string `protobuf:"bytes,4,opt,name=major_version,json=majorVersion" json:"major_version,omitempty"`
	// * Minor version.
	MinorVersion string `protobuf:"bytes,5,opt,name=minor_version,json=minorVersion" json:"minor_version,omitempty"`
	// * If source initialization was performed, the result.
	InitResult *SourceInitResult `protobuf:"bytes,6,opt,name=init_result,json=initResult" json:"init_result,omitempty"`
}

func (m *FrozenLayout_Source) Reset()                    { *m = FrozenLayout_Source{} }
func (m *FrozenLayout_Source) String() string            { return proto.CompactTextString(m) }
func (*FrozenLayout_Source) ProtoMessage()               {}
func (*FrozenLayout_Source) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

func (m *FrozenLayout_Source) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *FrozenLayout_Source) GetInitResult() *SourceInitResult {
	if m != nil {
		return m.InitResult
	}
	return nil
}

// * A single source group.
type FrozenLayout_SourceGroup struct {
	// * The Sources in this source group.
	Source map[string]*FrozenLayout_Source `protobuf:"bytes,1,rep,name=source" json:"source,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// * The calculated revision hash for this source group.
	RevisionHash string `protobuf:"bytes,2,opt,name=revision_hash,json=revisionHash" json:"revision_hash,omitempty"`
	// * Is this source group tained?
	Tainted bool `protobuf:"varint,3,opt,name=tainted" json:"tainted,omitempty"`
}

func (m *FrozenLayout_SourceGroup) Reset()                    { *m = FrozenLayout_SourceGroup{} }
func (m *FrozenLayout_SourceGroup) String() string            { return proto.CompactTextString(m) }
func (*FrozenLayout_SourceGroup) ProtoMessage()               {}
func (*FrozenLayout_SourceGroup) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 1} }

func (m *FrozenLayout_SourceGroup) GetSource() map[string]*FrozenLayout_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func init() {
	proto.RegisterType((*FrozenLayout)(nil), "deploy.FrozenLayout")
	proto.RegisterType((*FrozenLayout_Source)(nil), "deploy.FrozenLayout.Source")
	proto.RegisterType((*FrozenLayout_SourceGroup)(nil), "deploy.FrozenLayout.SourceGroup")
}

func init() {
	proto.RegisterFile("github.com/luci/luci-go/deploytool/api/deploy/internal.proto", fileDescriptor3)
}

var fileDescriptor3 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0x5f, 0xab, 0xd3, 0x30,
	0x18, 0xc6, 0xe9, 0xe6, 0xea, 0x96, 0x76, 0x32, 0x72, 0x55, 0xea, 0x4d, 0x71, 0x28, 0xbb, 0xd0,
	0x16, 0x27, 0x88, 0x0e, 0x2f, 0xfd, 0x33, 0xc1, 0xab, 0x08, 0xbb, 0xad, 0x59, 0x17, 0xdb, 0xb8,
	0x2e, 0x29, 0x69, 0x32, 0xa8, 0xdf, 0xc3, 0x2f, 0xe9, 0xf9, 0x12, 0x87, 0x26, 0xcd, 0x4e, 0x77,
	0x38, 0x9c, 0xb1, 0x9b, 0x92, 0xf7, 0x79, 0x7f, 0x79, 0xfa, 0xe6, 0x49, 0xc0, 0xa7, 0x9c, 0xca,
	0x42, 0x6d, 0xe3, 0x8c, 0x1f, 0x92, 0x52, 0x65, 0x54, 0x7f, 0xde, 0xe4, 0x3c, 0xd9, 0x91, 0xaa,
	0xe4, 0x8d, 0xe4, 0xbc, 0x4c, 0x70, 0x45, 0xbb, 0x32, 0xa1, 0x4c, 0x12, 0xc1, 0x70, 0x19, 0x57,
	0x82, 0x4b, 0x0e, 0x5d, 0x23, 0x87, 0xab, 0xeb, 0x5c, 0x32, 0xce, 0x7e, 0xd3, 0xdc, 0x78, 0x84,
	0x57, 0x4e, 0x90, 0x15, 0x24, 0xdb, 0x73, 0x25, 0xcd, 0xee, 0x17, 0xff, 0x46, 0xc0, 0xff, 0x2a,
	0xf8, 0x5f, 0xc2, 0x7e, 0xe0, 0x86, 0x2b, 0x09, 0xd7, 0xc0, 0xaf, 0xb9, 0x12, 0x19, 0x49, 0x73,
	0xc1, 0x55, 0x15, 0x38, 0xd1, 0x70, 0xe1, 0x2d, 0x5f, 0xc6, 0x66, 0x7b, 0xdc, 0x67, 0xe3, 0x9f,
	0x1a, 0xfc, 0xd6, 0x72, 0x5f, 0x98, 0x14, 0x0d, 0xf2, 0xea, 0x3b, 0x25, 0xbc, 0x71, 0x80, 0x6b,
	0x08, 0xf8, 0x0a, 0xb8, 0xa6, 0x13, 0x38, 0x91, 0xb3, 0xf0, 0x96, 0xcf, 0xac, 0x9d, 0xe9, 0xa3,
	0xae, 0x0b, 0x03, 0xf0, 0x54, 0x90, 0xb2, 0xc2, 0xb2, 0x08, 0x06, 0x91, 0xb3, 0x98, 0x20, 0x5b,
	0xc2, 0x10, 0x8c, 0x05, 0x39, 0xd2, 0x9a, 0x72, 0x16, 0x0c, 0x75, 0xeb, 0x54, 0xc3, 0x39, 0x98,
	0x1e, 0xf0, 0x1f, 0x2e, 0xd2, 0x23, 0x11, 0x1a, 0x78, 0xa2, 0x01, 0x5f, 0x8b, 0x1b, 0xa3, 0x69,
	0x88, 0xb2, 0x1e, 0x34, 0xea, 0xa0, 0x56, 0xb4, 0xd0, 0x47, 0xe0, 0x51, 0x46, 0x65, 0x2a, 0x48,
	0xad, 0x4a, 0x19, 0xb8, 0x7a, 0xd8, 0xe0, 0x7c, 0xd8, 0xef, 0x8c, 0x4a, 0xa4, 0xfb, 0x08, 0xd0,
	0xd3, 0x3a, 0xfc, 0xef, 0x00, 0xaf, 0x97, 0x07, 0xfc, 0xdc, 0x3b, 0x72, 0x9b, 0xe0, 0xeb, 0x4b,
	0x09, 0x76, 0x6b, 0x13, 0xa4, 0x0d, 0x64, 0x0e, 0xa6, 0xf6, 0x98, 0x69, 0x81, 0x6b, 0x1b, 0x8b,
	0x6f, 0xc5, 0x35, 0xae, 0x8b, 0x36, 0x35, 0x89, 0xdb, 0x97, 0xb5, 0xd3, 0xd1, 0x8c, 0x91, 0x2d,
	0xc3, 0x8d, 0x9d, 0x49, 0xbb, 0xc2, 0x19, 0x18, 0xee, 0x49, 0xa3, 0xef, 0x60, 0x82, 0xda, 0x25,
	0x7c, 0x0b, 0x46, 0x47, 0x5c, 0x2a, 0xa2, 0x7d, 0xbd, 0xe5, 0xf3, 0x47, 0x86, 0x44, 0x86, 0x5c,
	0x0d, 0x3e, 0x38, 0xe1, 0x2f, 0x30, 0xbb, 0x7f, 0xf7, 0x0f, 0x98, 0xbf, 0x3f, 0x37, 0x8f, 0x2e,
	0x25, 0xd0, 0xfb, 0xc3, 0xd6, 0xd5, 0xcf, 0xf3, 0xdd, 0x6d, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c,
	0x50, 0xc4, 0x64, 0x60, 0x03, 0x00, 0x00,
}
