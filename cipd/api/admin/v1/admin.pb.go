// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/cipd/api/admin/v1/admin.proto

package api

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	mapper "go.chromium.org/luci/appengine/mapper"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Supported mapping jobs.
type MapperKind int32

const (
	MapperKind_MAPPER_KIND_UNSPECIFIED MapperKind = 0
	// Dump names of all packages to GAE logs, to test mapping jobs framework.
	MapperKind_ENUMERATE_PACKAGES MapperKind = 1
	// Find tags that don't pass ValidateInstanceTag and marks them.
	MapperKind_FIND_MALFORMED_TAGS MapperKind = 2
)

var MapperKind_name = map[int32]string{
	0: "MAPPER_KIND_UNSPECIFIED",
	1: "ENUMERATE_PACKAGES",
	2: "FIND_MALFORMED_TAGS",
}

var MapperKind_value = map[string]int32{
	"MAPPER_KIND_UNSPECIFIED": 0,
	"ENUMERATE_PACKAGES":      1,
	"FIND_MALFORMED_TAGS":     2,
}

func (x MapperKind) String() string {
	return proto.EnumName(MapperKind_name, int32(x))
}

func (MapperKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d3c583be32ae6c76, []int{0}
}

// Defines what a mapping job should do.
type JobConfig struct {
	Kind                 MapperKind `protobuf:"varint,1,opt,name=kind,proto3,enum=cipd.MapperKind" json:"kind,omitempty"`
	Comment              string     `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	DryRun               bool       `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *JobConfig) Reset()         { *m = JobConfig{} }
func (m *JobConfig) String() string { return proto.CompactTextString(m) }
func (*JobConfig) ProtoMessage()    {}
func (*JobConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3c583be32ae6c76, []int{0}
}

func (m *JobConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobConfig.Unmarshal(m, b)
}
func (m *JobConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobConfig.Marshal(b, m, deterministic)
}
func (m *JobConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobConfig.Merge(m, src)
}
func (m *JobConfig) XXX_Size() int {
	return xxx_messageInfo_JobConfig.Size(m)
}
func (m *JobConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_JobConfig.DiscardUnknown(m)
}

var xxx_messageInfo_JobConfig proto.InternalMessageInfo

func (m *JobConfig) GetKind() MapperKind {
	if m != nil {
		return m.Kind
	}
	return MapperKind_MAPPER_KIND_UNSPECIFIED
}

func (m *JobConfig) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *JobConfig) GetDryRun() bool {
	if m != nil {
		return m.DryRun
	}
	return false
}

// Identifies an instance of a mapping job.
type JobID struct {
	JobId                int64    `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobID) Reset()         { *m = JobID{} }
func (m *JobID) String() string { return proto.CompactTextString(m) }
func (*JobID) ProtoMessage()    {}
func (*JobID) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3c583be32ae6c76, []int{1}
}

func (m *JobID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobID.Unmarshal(m, b)
}
func (m *JobID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobID.Marshal(b, m, deterministic)
}
func (m *JobID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobID.Merge(m, src)
}
func (m *JobID) XXX_Size() int {
	return xxx_messageInfo_JobID.Size(m)
}
func (m *JobID) XXX_DiscardUnknown() {
	xxx_messageInfo_JobID.DiscardUnknown(m)
}

var xxx_messageInfo_JobID proto.InternalMessageInfo

func (m *JobID) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

// Details about a mapping job.
type JobState struct {
	// Original job config, exactly as it was submitted to LaunchJob.
	Config *JobConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Current state of the job and all its shards.
	Info                 *mapper.JobInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *JobState) Reset()         { *m = JobState{} }
func (m *JobState) String() string { return proto.CompactTextString(m) }
func (*JobState) ProtoMessage()    {}
func (*JobState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3c583be32ae6c76, []int{2}
}

func (m *JobState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobState.Unmarshal(m, b)
}
func (m *JobState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobState.Marshal(b, m, deterministic)
}
func (m *JobState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobState.Merge(m, src)
}
func (m *JobState) XXX_Size() int {
	return xxx_messageInfo_JobState.Size(m)
}
func (m *JobState) XXX_DiscardUnknown() {
	xxx_messageInfo_JobState.DiscardUnknown(m)
}

var xxx_messageInfo_JobState proto.InternalMessageInfo

func (m *JobState) GetConfig() *JobConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *JobState) GetInfo() *mapper.JobInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterEnum("cipd.MapperKind", MapperKind_name, MapperKind_value)
	proto.RegisterType((*JobConfig)(nil), "cipd.JobConfig")
	proto.RegisterType((*JobID)(nil), "cipd.JobID")
	proto.RegisterType((*JobState)(nil), "cipd.JobState")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/cipd/api/admin/v1/admin.proto", fileDescriptor_d3c583be32ae6c76)
}

var fileDescriptor_d3c583be32ae6c76 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x5b, 0x6f, 0xda, 0x4c,
	0x10, 0xfd, 0x1c, 0x2e, 0x81, 0x41, 0xca, 0x87, 0xb6, 0x6a, 0x40, 0x44, 0xaa, 0x10, 0xaa, 0x54,
	0x9a, 0x87, 0x5d, 0xd5, 0xad, 0xfa, 0xee, 0x62, 0x83, 0x0c, 0x31, 0x45, 0x4b, 0xf2, 0x92, 0x17,
	0xcb, 0x97, 0xc5, 0xd9, 0x24, 0xde, 0xb1, 0x8c, 0x5d, 0x89, 0x5f, 0xd1, 0xbf, 0x5c, 0x79, 0xdd,
	0xb8, 0x17, 0xf5, 0x6d, 0x67, 0xce, 0x99, 0x99, 0x73, 0xf6, 0x80, 0x99, 0x20, 0x8d, 0x1e, 0x72,
	0x4c, 0x65, 0x99, 0x52, 0xcc, 0x13, 0xf6, 0x5c, 0x46, 0x92, 0x45, 0x32, 0x8b, 0x59, 0x90, 0x49,
	0x16, 0xc4, 0xa9, 0x54, 0xec, 0xdb, 0x87, 0xfa, 0x41, 0xb3, 0x1c, 0x0b, 0x24, 0xed, 0x0a, 0x9e,
	0x5c, 0x25, 0x88, 0xc9, 0xb3, 0x60, 0xba, 0x17, 0x96, 0x07, 0x26, 0xd2, 0xac, 0x38, 0xd5, 0x94,
	0xc9, 0xa7, 0x7f, 0xae, 0x0d, 0xb2, 0x4c, 0xa8, 0x44, 0x2a, 0xc1, 0xd2, 0xea, 0x99, 0xb3, 0x54,
	0x1c, 0x8f, 0x41, 0x22, 0x8e, 0xf5, 0xd4, 0x2c, 0x86, 0xfe, 0x1a, 0xc3, 0x05, 0xaa, 0x83, 0x4c,
	0xc8, 0x5b, 0x68, 0x3f, 0x49, 0x15, 0x8f, 0x8d, 0xa9, 0x31, 0xbf, 0x30, 0x87, 0xb4, 0x3a, 0x4a,
	0x3d, 0x3d, 0xb7, 0x91, 0x2a, 0xe6, 0x1a, 0x25, 0x63, 0x38, 0x8f, 0x30, 0x4d, 0x85, 0x2a, 0xc6,
	0x67, 0x53, 0x63, 0xde, 0xe7, 0x2f, 0x25, 0x19, 0xc1, 0x79, 0x9c, 0x9f, 0xfc, 0xbc, 0x54, 0xe3,
	0xd6, 0xd4, 0x98, 0xf7, 0x78, 0x37, 0xce, 0x4f, 0xbc, 0x54, 0xb3, 0x37, 0xd0, 0x59, 0x63, 0xe8,
	0xda, 0xe4, 0x35, 0x74, 0x1f, 0x31, 0xf4, 0x65, 0x7d, 0xa3, 0xc5, 0x3b, 0x8f, 0x18, 0xba, 0xf1,
	0xec, 0x09, 0x7a, 0x6b, 0x0c, 0xf7, 0x45, 0x50, 0x08, 0xf2, 0x0e, 0xba, 0x91, 0x96, 0xa3, 0x29,
	0x03, 0xf3, 0xff, 0x5a, 0x46, 0xa3, 0x92, 0xff, 0x84, 0xc9, 0x67, 0x68, 0x4b, 0x75, 0x40, 0x2d,
	0x62, 0x60, 0xce, 0x68, 0x63, 0x95, 0xd6, 0x56, 0x69, 0x63, 0xb5, 0xba, 0xad, 0x0e, 0xc8, 0x35,
	0xff, 0xfa, 0x1e, 0xe0, 0x97, 0x27, 0x72, 0x05, 0x23, 0xcf, 0xda, 0xed, 0x1c, 0xee, 0x6f, 0xdc,
	0xad, 0xed, 0xdf, 0x6d, 0xf7, 0x3b, 0x67, 0xe1, 0x2e, 0x5d, 0xc7, 0x1e, 0xfe, 0x47, 0x2e, 0x81,
	0x38, 0xdb, 0x3b, 0xcf, 0xe1, 0xd6, 0xad, 0xe3, 0xef, 0xac, 0xc5, 0xc6, 0x5a, 0x39, 0xfb, 0xa1,
	0x41, 0x46, 0xf0, 0x6a, 0x59, 0xb1, 0x3d, 0xeb, 0x66, 0xf9, 0x95, 0x7b, 0x8e, 0xed, 0xdf, 0x5a,
	0xab, 0xfd, 0xf0, 0xcc, 0xfc, 0x6e, 0x40, 0xc7, 0xaa, 0x72, 0x23, 0xef, 0xa1, 0x7f, 0x13, 0x94,
	0x2a, 0x7a, 0x58, 0x63, 0x48, 0xfe, 0xf6, 0x30, 0x19, 0x34, 0x0d, 0xd7, 0x26, 0x0c, 0x7a, 0x56,
	0x88, 0x79, 0x51, 0x31, 0x7f, 0x07, 0x26, 0x97, 0xb4, 0x0e, 0x9c, 0xbe, 0x04, 0x4e, 0x9d, 0x2a,
	0x70, 0x72, 0x0d, 0x83, 0x95, 0x28, 0x9a, 0x1f, 0xfb, 0x63, 0xe6, 0xa2, 0x29, 0x34, 0xf8, 0xa5,
	0x73, 0xdf, 0x0a, 0x32, 0x19, 0x76, 0xf5, 0x8a, 0x8f, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xae,
	0x4b, 0x62, 0x8b, 0x7d, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminClient interface {
	// Launches a mapping job that examines and/or fixes datastore entities.
	LaunchJob(ctx context.Context, in *JobConfig, opts ...grpc.CallOption) (*JobID, error)
	// Initiates an abort of a mapping job.
	AbortJob(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*empty.Empty, error)
	// Returns state of a mapping job.
	GetJobState(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*JobState, error)
}
type adminPRPCClient struct {
	client *prpc.Client
}

func NewAdminPRPCClient(client *prpc.Client) AdminClient {
	return &adminPRPCClient{client}
}

func (c *adminPRPCClient) LaunchJob(ctx context.Context, in *JobConfig, opts ...grpc.CallOption) (*JobID, error) {
	out := new(JobID)
	err := c.client.Call(ctx, "cipd.Admin", "LaunchJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPRPCClient) AbortJob(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "cipd.Admin", "AbortJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPRPCClient) GetJobState(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*JobState, error) {
	out := new(JobState)
	err := c.client.Call(ctx, "cipd.Admin", "GetJobState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) LaunchJob(ctx context.Context, in *JobConfig, opts ...grpc.CallOption) (*JobID, error) {
	out := new(JobID)
	err := c.cc.Invoke(ctx, "/cipd.Admin/LaunchJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AbortJob(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/cipd.Admin/AbortJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetJobState(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*JobState, error) {
	out := new(JobState)
	err := c.cc.Invoke(ctx, "/cipd.Admin/GetJobState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
type AdminServer interface {
	// Launches a mapping job that examines and/or fixes datastore entities.
	LaunchJob(context.Context, *JobConfig) (*JobID, error)
	// Initiates an abort of a mapping job.
	AbortJob(context.Context, *JobID) (*empty.Empty, error)
	// Returns state of a mapping job.
	GetJobState(context.Context, *JobID) (*JobState, error)
}

func RegisterAdminServer(s prpc.Registrar, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_LaunchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LaunchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cipd.Admin/LaunchJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LaunchJob(ctx, req.(*JobConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AbortJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AbortJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cipd.Admin/AbortJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AbortJob(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetJobState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetJobState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cipd.Admin/GetJobState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetJobState(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cipd.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LaunchJob",
			Handler:    _Admin_LaunchJob_Handler,
		},
		{
			MethodName: "AbortJob",
			Handler:    _Admin_AbortJob_Handler,
		},
		{
			MethodName: "GetJobState",
			Handler:    _Admin_GetJobState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/cipd/api/admin/v1/admin.proto",
}
