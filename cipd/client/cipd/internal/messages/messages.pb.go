// Code generated by protoc-gen-go.
// source: github.com/luci/luci-go/cipd/client/cipd/internal/messages/messages.proto
// DO NOT EDIT!

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	github.com/luci/luci-go/cipd/client/cipd/internal/messages/messages.proto

It has these top-level messages:
	BlobWithSHA1
	TagCache
	InstanceCache
*/
package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/luci/luci-go/common/proto/google"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BlobWithSHA1 is a wrapper around a binary blob with SHA1 hash to verify
// its integrity.
type BlobWithSHA1 struct {
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	Sha1 []byte `protobuf:"bytes,2,opt,name=sha1,proto3" json:"sha1,omitempty"`
}

func (m *BlobWithSHA1) Reset()                    { *m = BlobWithSHA1{} }
func (m *BlobWithSHA1) String() string            { return proto.CompactTextString(m) }
func (*BlobWithSHA1) ProtoMessage()               {}
func (*BlobWithSHA1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BlobWithSHA1) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

func (m *BlobWithSHA1) GetSha1() []byte {
	if m != nil {
		return m.Sha1
	}
	return nil
}

// TagCache stores a mapping (service, package name, tag) -> instance ID to
// speed up subsequent ResolveVersion calls when tags are used.
//
// It also contains a (service, instance_id, file_name) -> hash mapping which is
// used for client self-update purposes. file_name is case-senstive and must
// always use POSIX-style slashes.
//
// A service is specified by its hostname. We make it part of the key since
// same tags may point to different instances on different services.
type TagCache struct {
	// Capped list of entries, most recently resolved is last.
	Entries     []*TagCache_Entry     `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	FileEntries []*TagCache_FileEntry `protobuf:"bytes,2,rep,name=file_entries,json=fileEntries" json:"file_entries,omitempty"`
}

func (m *TagCache) Reset()                    { *m = TagCache{} }
func (m *TagCache) String() string            { return proto.CompactTextString(m) }
func (*TagCache) ProtoMessage()               {}
func (*TagCache) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TagCache) GetEntries() []*TagCache_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *TagCache) GetFileEntries() []*TagCache_FileEntry {
	if m != nil {
		return m.FileEntries
	}
	return nil
}

type TagCache_Entry struct {
	Service    string `protobuf:"bytes,4,opt,name=service" json:"service,omitempty"`
	Package    string `protobuf:"bytes,1,opt,name=package" json:"package,omitempty"`
	Tag        string `protobuf:"bytes,2,opt,name=tag" json:"tag,omitempty"`
	InstanceId string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
}

func (m *TagCache_Entry) Reset()                    { *m = TagCache_Entry{} }
func (m *TagCache_Entry) String() string            { return proto.CompactTextString(m) }
func (*TagCache_Entry) ProtoMessage()               {}
func (*TagCache_Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *TagCache_Entry) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *TagCache_Entry) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *TagCache_Entry) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *TagCache_Entry) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type TagCache_FileEntry struct {
	Service    string `protobuf:"bytes,5,opt,name=service" json:"service,omitempty"`
	Package    string `protobuf:"bytes,1,opt,name=package" json:"package,omitempty"`
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	FileName   string `protobuf:"bytes,3,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	Hash       string `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
}

func (m *TagCache_FileEntry) Reset()                    { *m = TagCache_FileEntry{} }
func (m *TagCache_FileEntry) String() string            { return proto.CompactTextString(m) }
func (*TagCache_FileEntry) ProtoMessage()               {}
func (*TagCache_FileEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *TagCache_FileEntry) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *TagCache_FileEntry) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *TagCache_FileEntry) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *TagCache_FileEntry) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *TagCache_FileEntry) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// InstanceCache stores a list of instances and their last access time.
//
// This cache does not depend on a service being used, since an instance's ID is
// derived only from its contents (regardless from where it was downloaded).
type InstanceCache struct {
	// Entries is a map of {instance id -> information about instance}.
	Entries map[string]*InstanceCache_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// LastSynced is timestamp when we synchronized Entries with actual
	// instance files.
	LastSynced *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=last_synced,json=lastSynced" json:"last_synced,omitempty"`
}

func (m *InstanceCache) Reset()                    { *m = InstanceCache{} }
func (m *InstanceCache) String() string            { return proto.CompactTextString(m) }
func (*InstanceCache) ProtoMessage()               {}
func (*InstanceCache) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InstanceCache) GetEntries() map[string]*InstanceCache_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *InstanceCache) GetLastSynced() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastSynced
	}
	return nil
}

// Entry stores info about an instance.
type InstanceCache_Entry struct {
	// LastAccess is last time this instance was retrieved from or put to the
	// cache.
	LastAccess *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=last_access,json=lastAccess" json:"last_access,omitempty"`
}

func (m *InstanceCache_Entry) Reset()                    { *m = InstanceCache_Entry{} }
func (m *InstanceCache_Entry) String() string            { return proto.CompactTextString(m) }
func (*InstanceCache_Entry) ProtoMessage()               {}
func (*InstanceCache_Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *InstanceCache_Entry) GetLastAccess() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastAccess
	}
	return nil
}

func init() {
	proto.RegisterType((*BlobWithSHA1)(nil), "messages.BlobWithSHA1")
	proto.RegisterType((*TagCache)(nil), "messages.TagCache")
	proto.RegisterType((*TagCache_Entry)(nil), "messages.TagCache.Entry")
	proto.RegisterType((*TagCache_FileEntry)(nil), "messages.TagCache.FileEntry")
	proto.RegisterType((*InstanceCache)(nil), "messages.InstanceCache")
	proto.RegisterType((*InstanceCache_Entry)(nil), "messages.InstanceCache.Entry")
}

func init() {
	proto.RegisterFile("github.com/luci/luci-go/cipd/client/cipd/internal/messages/messages.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x8b, 0xd3, 0x40,
	0x18, 0x26, 0xe9, 0xd6, 0x6d, 0xde, 0x54, 0x90, 0x39, 0x85, 0xa8, 0x6c, 0x29, 0x1e, 0x7a, 0x31,
	0x61, 0xbb, 0x20, 0xa2, 0xa0, 0xac, 0x5f, 0xd8, 0x8b, 0x87, 0xec, 0x82, 0x78, 0x2a, 0x93, 0xe9,
	0xdb, 0x64, 0xd8, 0xc9, 0xa4, 0x64, 0xa6, 0x0b, 0x3d, 0xfb, 0x0b, 0xfc, 0x21, 0xfe, 0x47, 0x99,
	0x99, 0x4c, 0x5d, 0x83, 0x2c, 0x7b, 0x09, 0xcf, 0x3c, 0x79, 0xde, 0xcf, 0xe7, 0x85, 0x55, 0xc5,
	0x75, 0xbd, 0x2f, 0x33, 0xd6, 0x36, 0xb9, 0xd8, 0x33, 0x6e, 0x3f, 0x2f, 0xab, 0x36, 0x67, 0x7c,
	0xb7, 0xc9, 0x99, 0xe0, 0x28, 0xb5, 0xc3, 0x5c, 0x6a, 0xec, 0x24, 0x15, 0x79, 0x83, 0x4a, 0xd1,
	0x0a, 0xd5, 0x11, 0x64, 0xbb, 0xae, 0xd5, 0x2d, 0x99, 0xf8, 0x77, 0x7a, 0x56, 0xb5, 0x6d, 0x25,
	0x30, 0xb7, 0x7c, 0xb9, 0xdf, 0xe6, 0x9a, 0x37, 0xa8, 0x34, 0x6d, 0x76, 0x4e, 0x3a, 0x7f, 0x05,
	0xd3, 0x0f, 0xa2, 0x2d, 0xbf, 0x73, 0x5d, 0x5f, 0x7d, 0xbd, 0x3c, 0x27, 0x04, 0x4e, 0x4a, 0xd1,
	0x96, 0x49, 0x30, 0x0b, 0x16, 0xd3, 0xc2, 0x62, 0xc3, 0xa9, 0x9a, 0x9e, 0x27, 0xa1, 0xe3, 0x0c,
	0x9e, 0xff, 0x1c, 0xc1, 0xe4, 0x9a, 0x56, 0x1f, 0x29, 0xab, 0x91, 0x2c, 0xe1, 0x14, 0xa5, 0xee,
	0x38, 0xaa, 0x24, 0x98, 0x8d, 0x16, 0xf1, 0x32, 0xc9, 0x8e, 0x1d, 0x79, 0x51, 0xf6, 0x59, 0xea,
	0xee, 0x50, 0x78, 0x21, 0x79, 0x0f, 0xd3, 0x2d, 0x17, 0xb8, 0xf6, 0x81, 0xa1, 0x0d, 0x7c, 0xf6,
	0x9f, 0xc0, 0x2f, 0x5c, 0xa0, 0x0b, 0x8e, 0xb7, 0x3d, 0xe4, 0xa8, 0x52, 0x09, 0x63, 0xcb, 0x92,
	0x04, 0x4e, 0x15, 0x76, 0xb7, 0x9c, 0x61, 0x72, 0x32, 0x0b, 0x16, 0x51, 0xe1, 0x9f, 0xe6, 0xcf,
	0x8e, 0xb2, 0x1b, 0x5a, 0xa1, 0x9d, 0x27, 0x2a, 0xfc, 0x93, 0x3c, 0x81, 0x91, 0xa6, 0x95, 0x9d,
	0x28, 0x2a, 0x0c, 0x24, 0x67, 0x10, 0x73, 0xa9, 0x34, 0x95, 0x0c, 0xd7, 0x7c, 0x93, 0x8c, 0xec,
	0x1f, 0xf0, 0xd4, 0x6a, 0x93, 0xfe, 0x0a, 0x20, 0x3a, 0xb6, 0x72, 0xb7, 0xe8, 0xf8, 0xa1, 0x45,
	0x07, 0x25, 0xc2, 0x61, 0x09, 0xf2, 0x14, 0x22, 0xbb, 0x13, 0x49, 0x1b, 0xec, 0x3b, 0x98, 0x18,
	0xe2, 0x1b, 0x6d, 0xd0, 0xb8, 0x50, 0x53, 0x55, 0xf7, 0x33, 0x5a, 0x3c, 0xff, 0x1d, 0xc2, 0xe3,
	0x55, 0x1f, 0xef, 0xac, 0x78, 0x37, 0xb4, 0xe2, 0xc5, 0xdf, 0x8d, 0xfe, 0xa3, 0xcc, 0xfa, 0x3d,
	0x0e, 0x6c, 0x79, 0x0b, 0xb1, 0xa0, 0x4a, 0xaf, 0xd5, 0x41, 0x32, 0x74, 0x3d, 0xc6, 0xcb, 0x34,
	0x73, 0x67, 0x94, 0xf9, 0x33, 0xca, 0xae, 0xfd, 0x19, 0x15, 0x60, 0xe4, 0x57, 0x56, 0x9d, 0x7e,
	0xf2, 0x96, 0xf8, 0x2c, 0x94, 0x31, 0x54, 0xea, 0xa1, 0x59, 0x2e, 0xad, 0x3a, 0xfd, 0x01, 0xd3,
	0xbb, 0xbd, 0x19, 0xaf, 0x6e, 0xf0, 0xd0, 0x2f, 0xd3, 0x40, 0x72, 0x01, 0xe3, 0x5b, 0x2a, 0xf6,
	0xd8, 0x27, 0x7e, 0x7e, 0xdf, 0x88, 0x87, 0xc2, 0x69, 0xdf, 0x84, 0xaf, 0x83, 0xf2, 0x91, 0x2d,
	0x7d, 0xf1, 0x27, 0x00, 0x00, 0xff, 0xff, 0x88, 0x1b, 0x5b, 0x96, 0x6c, 0x03, 0x00, 0x00,
}
