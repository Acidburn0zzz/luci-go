// Copyright 2016 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Command svcdec stands for 'service decorator'. It reads a service interface
// XYZServer generated by protoc and generates DecoratedXYZ with this structure:
//
//   type DecoratedXYZ struct {
//     Service XYZServer
//     Prelude func(c context.Context, methodName string, req proto.Message) (context.Context, error)
//   }
//
// DecoratedXYZ has the same methods as XYZServer: they call Prelude before
// forwarding the call to the corresponding XYZServer method.
//
// svcdec is designed to be run through go generate:
// 	//go:generate svcdec -type GreetServer
package main

import (
	"os"
	"strings"

	"golang.org/x/net/context"

	"github.com/luci/luci-go/tools/internal/svctool"
)

func generate(c context.Context, a *svctool.GeneratorArgs) error {
	args := templateArgs{
		PackageName:  a.PackageName,
		ExtraImports: a.ExtraImports,
	}
	for _, svc := range a.Services {
		args.Services = append(args.Services, &service{
			Service:    svc,
			StructName: "Decorated" + strings.TrimSuffix(svc.TypeName, "Server"),
		})
	}

	// Execute template.
	return tmpl.Execute(a.Out, args)
}

func tool() *svctool.Tool {
	return &svctool.Tool{Name: "svcdec", OutputFilenameSuffix: "dec"}
}

func main() {
	tool().Main(os.Args[1:], generate)
}
