package test

import prpc "github.com/luci/luci-go/server/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()				{ *m = HelloRequest{} }
func (m *HelloRequest) String() string			{ return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()			{}
func (*HelloRequest) Descriptor() ([]byte, []int)	{ return fileDescriptor0, []int{0} }

type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()			{ *m = HelloReply{} }
func (m *HelloReply) String() string		{ return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()		{}
func (*HelloReply) Descriptor() ([]byte, []int)	{ return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*HelloRequest)(nil), "test.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "test.HelloReply")
}

var _ context.Context
var _ grpc.ClientConn

type GreeterClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/test.Greeter/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type GreeterServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterGreeterServer(s prpc.Registrar, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(GreeterServer).SayHello(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName:	"test.Greeter",
	HandlerType:	(*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName:	"SayHello",
			Handler:	_Greeter_SayHello_Handler,
		},
	},
	Streams:	[]grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{

	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x64, 0xb8, 0x78, 0x3c, 0x52,
	0x73, 0x72, 0xf2, 0x83, 0x52, 0x0b, 0x4b, 0x81, 0x7c, 0x21, 0x1e, 0x2e, 0x96, 0xbc, 0xc4, 0xdc,
	0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x4e, 0x25, 0x59, 0x2e, 0x2e, 0xa8, 0x6c, 0x41, 0x4e, 0xa5,
	0x10, 0x3f, 0x17, 0x7b, 0x6e, 0x6a, 0x71, 0x71, 0x62, 0x3a, 0x54, 0xda, 0xc8, 0x96, 0x8b, 0xdd,
	0xbd, 0x28, 0x35, 0xb5, 0x24, 0xb5, 0x48, 0xc8, 0x88, 0x8b, 0x23, 0x38, 0xb1, 0x12, 0xac, 0x58,
	0x48, 0x48, 0x0f, 0x6c, 0x0d, 0xb2, 0xb9, 0x52, 0x02, 0x28, 0x62, 0x40, 0xd3, 0x94, 0x18, 0x92,
	0xd8, 0xc0, 0x0e, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x61, 0x7c, 0x92, 0xb8, 0x96, 0x00,
	0x00, 0x00,
}
