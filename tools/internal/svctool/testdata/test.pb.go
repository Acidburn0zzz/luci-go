// Code generated by protoc-gen-go.
// source: test.proto
// DO NOT EDIT!

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	M1
	M2
	Void
*/
package test

import prpccommon "github.com/luci/luci-go/common/prpc"
import prpc "github.com/luci/luci-go/server/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import sub "github.com/luci/luci-go/tools/internal/svctool/testdata/sub"
import google_protobuf "github.com/luci/luci-go/common/proto/google"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type M1 struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *M1) Reset()                    { *m = M1{} }
func (m *M1) String() string            { return proto.CompactTextString(m) }
func (*M1) ProtoMessage()               {}
func (*M1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The response message containing the greetings
type M2 struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *M2) Reset()                    { *m = M2{} }
func (m *M2) String() string            { return proto.CompactTextString(m) }
func (*M2) ProtoMessage()               {}
func (*M2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*M1)(nil), "test.M1")
	proto.RegisterType((*M2)(nil), "test.M2")
	proto.RegisterType((*Void)(nil), "test.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for S1 service

type S1Client interface {
	M(ctx context.Context, in *M1, opts ...grpc.CallOption) (*M2, error)
}
type s1PRPCClient struct {
	client *prpccommon.Client
}

func NewS1PRPCClient(client *prpccommon.Client) S1Client {
	return &s1PRPCClient{client}
}

func (c *s1PRPCClient) M(ctx context.Context, in *M1, opts ...grpc.CallOption) (*M2, error) {
	out := new(M2)
	err := c.client.Call(ctx, "test.S1", "M", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type s1Client struct {
	cc *grpc.ClientConn
}

func NewS1Client(cc *grpc.ClientConn) S1Client {
	return &s1Client{cc}
}

func (c *s1Client) M(ctx context.Context, in *M1, opts ...grpc.CallOption) (*M2, error) {
	out := new(M2)
	err := grpc.Invoke(ctx, "/test.S1/M", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for S1 service

type S1Server interface {
	M(context.Context, *M1) (*M2, error)
}

func RegisterS1Server(s prpc.Registrar, srv S1Server) {
	s.RegisterService(&_S1_serviceDesc, srv)
}

func _S1_M_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(M1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S1Server).M(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.S1/M",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S1Server).M(ctx, req.(*M1))
	}
	return interceptor(ctx, in, info, handler)
}

var _S1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.S1",
	HandlerType: (*S1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "M",
			Handler:    _S1_M_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for S2 service

type S2Client interface {
	Get(ctx context.Context, in *Void, opts ...grpc.CallOption) (*M1, error)
	Set(ctx context.Context, in *M1, opts ...grpc.CallOption) (*Void, error)
	Imp(ctx context.Context, in *sub.Sub, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}
type s2PRPCClient struct {
	client *prpccommon.Client
}

func NewS2PRPCClient(client *prpccommon.Client) S2Client {
	return &s2PRPCClient{client}
}

func (c *s2PRPCClient) Get(ctx context.Context, in *Void, opts ...grpc.CallOption) (*M1, error) {
	out := new(M1)
	err := c.client.Call(ctx, "test.S2", "Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s2PRPCClient) Set(ctx context.Context, in *M1, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.client.Call(ctx, "test.S2", "Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s2PRPCClient) Imp(ctx context.Context, in *sub.Sub, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := c.client.Call(ctx, "test.S2", "Imp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type s2Client struct {
	cc *grpc.ClientConn
}

func NewS2Client(cc *grpc.ClientConn) S2Client {
	return &s2Client{cc}
}

func (c *s2Client) Get(ctx context.Context, in *Void, opts ...grpc.CallOption) (*M1, error) {
	out := new(M1)
	err := grpc.Invoke(ctx, "/test.S2/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s2Client) Set(ctx context.Context, in *M1, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := grpc.Invoke(ctx, "/test.S2/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s2Client) Imp(ctx context.Context, in *sub.Sub, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/test.S2/Imp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for S2 service

type S2Server interface {
	Get(context.Context, *Void) (*M1, error)
	Set(context.Context, *M1) (*Void, error)
	Imp(context.Context, *sub.Sub) (*google_protobuf.Empty, error)
}

func RegisterS2Server(s prpc.Registrar, srv S2Server) {
	s.RegisterService(&_S2_serviceDesc, srv)
}

func _S2_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S2Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.S2/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S2Server).Get(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _S2_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(M1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S2Server).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.S2/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S2Server).Set(ctx, req.(*M1))
	}
	return interceptor(ctx, in, info, handler)
}

func _S2_Imp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sub.Sub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S2Server).Imp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.S2/Imp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S2Server).Imp(ctx, req.(*sub.Sub))
	}
	return interceptor(ctx, in, info, handler)
}

var _S2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.S2",
	HandlerType: (*S2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _S2_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _S2_Set_Handler,
		},
		{
			MethodName: "Imp",
			Handler:    _S2_Imp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x8f, 0xcf, 0x4e, 0xc4, 0x20,
	0x10, 0x87, 0xb7, 0xbb, 0xcd, 0xaa, 0x73, 0xe4, 0x60, 0x6a, 0x8d, 0x7f, 0xc2, 0x49, 0x0f, 0x42,
	0x8a, 0xcf, 0xb0, 0x31, 0x1e, 0x7a, 0xb1, 0x89, 0x77, 0xe8, 0x22, 0x36, 0x29, 0xa5, 0x59, 0x06,
	0x13, 0xdf, 0x5e, 0xa0, 0xa9, 0x7a, 0x80, 0xcc, 0xcc, 0xf7, 0x9b, 0x49, 0x3e, 0x00, 0xd4, 0x1e,
	0xd9, 0x7c, 0x72, 0xe8, 0x48, 0x99, 0xea, 0xfa, 0x60, 0x06, 0xfc, 0x0c, 0x8a, 0xf5, 0xce, 0xf2,
	0x31, 0xf4, 0x43, 0xfe, 0x9e, 0x8c, 0xe3, 0xe8, 0xdc, 0xe8, 0xf9, 0x30, 0xa1, 0x3e, 0x4d, 0x72,
	0xe4, 0xfe, 0xab, 0x4f, 0x13, 0x9e, 0x96, 0x8e, 0x12, 0x25, 0xf7, 0x41, 0xa5, 0xb7, 0x1c, 0xab,
	0xaf, 0x8d, 0x73, 0x66, 0xd4, 0x3c, 0x77, 0x2a, 0x7c, 0x70, 0x6d, 0x67, 0xfc, 0x5e, 0x20, 0xad,
	0x60, 0xdb, 0x36, 0x84, 0x40, 0x39, 0x49, 0xab, 0xab, 0xe2, 0xbe, 0x78, 0xb8, 0x78, 0xcb, 0x35,
	0xbd, 0x8d, 0x44, 0x90, 0x0a, 0xce, 0xac, 0xf6, 0x5e, 0x9a, 0x15, 0xae, 0x2d, 0xdd, 0x43, 0xf9,
	0xee, 0x86, 0xa3, 0xb8, 0x83, 0x6d, 0xd7, 0x90, 0x2b, 0x28, 0x5a, 0x72, 0xce, 0xb2, 0x43, 0xdb,
	0xd4, 0x6b, 0x25, 0xe8, 0x46, 0xd8, 0x18, 0x10, 0xe4, 0x06, 0x76, 0x2f, 0x1a, 0x09, 0x2c, 0x20,
	0x6d, 0xfe, 0x86, 0x1a, 0xba, 0x49, 0xb8, 0x8b, 0xf8, 0xef, 0xc2, 0xbf, 0x60, 0xc4, 0x8f, 0xb0,
	0x7b, 0xb5, 0x73, 0xc4, 0x49, 0xab, 0x0b, 0xaa, 0xbe, 0x64, 0x8b, 0x15, 0x5b, 0xad, 0xd8, 0x21,
	0x59, 0xd1, 0x8d, 0xda, 0xe7, 0xc9, 0xf3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x28, 0xf2,
	0xa1, 0x50, 0x01, 0x00, 0x00,
}
