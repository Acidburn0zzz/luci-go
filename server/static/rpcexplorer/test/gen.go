package main

// This file generates descriptor.html. Run itself:
//go:generate go run gen.go

import (
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/luci/luci-go/common/proto/google/descriptor"
)

func run() error {
	descFile, err := ioutil.TempFile("", "desc")
	if err != nil {
		return err
	}

	protoc := exec.Command(
		"protoc",
		"--descriptor_set_out="+descFile.Name(),
		"--include_source_info",
		"types.proto")
	protoc.Stdout = os.Stdout
	protoc.Stderr = os.Stderr
	if err := protoc.Run(); err != nil {
		return fmt.Errorf("protoc: %s", err)
	}

	descBytes, err := ioutil.ReadAll(descFile)
	if err != nil {
		return err
	}
	if len(descBytes) == 0 {
		return fmt.Errorf("desc file was read as empty")
	}

	desc := &descriptor.FileDescriptorSet{}
	if err := proto.Unmarshal(descBytes, desc); err != nil {
		return fmt.Errorf("could not read descriptor file: %s", err)
	}

	out, err := os.Create("descriptor.html")
	if err != nil {
		return err
	}
	_, err = fmt.Fprint(out, `<!--
  Copyright 2016 The Chromium Authors. All rights reserved.
  Use of this source code is governed by a BSD-style license that can be
  found in the LICENSE file.
  -->

<!-- This file is generated by gen.go -->

<script>
var testDescriptor = `)
	if err != nil {
		return err
	}

	m := jsonpb.Marshaler{}
	m.Indent = "  "
	if err := m.Marshal(out, desc); err != nil {
		return err
	}

	_, err = fmt.Fprintln(out, ";\n</script>")
	return err
}

func main() {
	if err := run(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
