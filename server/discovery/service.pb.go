// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package discovery is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Void
	DescribeResponse
*/
package discovery

import prpccommon "github.com/luci/luci-go/common/prpc"
import prpc "github.com/luci/luci-go/server/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Void is an empty message.
type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// DescribeResponse describes services.
type DescribeResponse struct {
	// FileDescriptionSet is a binary-encoded FileDescriptorSet message.
	// Contains descriptions of all services, their types and all transitive
	// dependencies.
	FileDescriptionSet []byte `protobuf:"bytes,1,opt,name=fileDescriptionSet,proto3" json:"fileDescriptionSet,omitempty"`
	// Services are service names provided by a server.
	Services []string `protobuf:"bytes,2,rep,name=services" json:"services,omitempty"`
}

func (m *DescribeResponse) Reset()                    { *m = DescribeResponse{} }
func (m *DescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*DescribeResponse) ProtoMessage()               {}
func (*DescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Void)(nil), "discovery.Void")
	proto.RegisterType((*DescribeResponse)(nil), "discovery.DescribeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Discovery service

type DiscoveryClient interface {
	// Returns a list of services and a
	// descriptor.FileDescriptorSet that covers them all.
	Describe(ctx context.Context, in *Void, opts ...grpc.CallOption) (*DescribeResponse, error)
}
type discoveryPRPCClient struct {
	client *prpccommon.Client
}

func NewDiscoveryPRPCClient(client *prpccommon.Client) DiscoveryClient {
	return &discoveryPRPCClient{client}
}

func (c *discoveryPRPCClient) Describe(ctx context.Context, in *Void, opts ...grpc.CallOption) (*DescribeResponse, error) {
	out := new(DescribeResponse)
	err := c.client.Call(ctx, "discovery.Discovery", "Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type discoveryClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryClient(cc *grpc.ClientConn) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) Describe(ctx context.Context, in *Void, opts ...grpc.CallOption) (*DescribeResponse, error) {
	out := new(DescribeResponse)
	err := grpc.Invoke(ctx, "/discovery.Discovery/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Discovery service

type DiscoveryServer interface {
	// Returns a list of services and a
	// descriptor.FileDescriptorSet that covers them all.
	Describe(context.Context, *Void) (*DescribeResponse, error)
}

func RegisterDiscoveryServer(s prpc.Registrar, srv DiscoveryServer) {
	s.RegisterService(&_Discovery_serviceDesc, srv)
}

func _Discovery_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DiscoveryServer).Describe(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Discovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.Discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Describe",
			Handler:    _Discovery_Describe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xc9, 0x2c, 0x4e, 0xce,
	0x2f, 0x4b, 0x2d, 0xaa, 0x54, 0x62, 0xe3, 0x62, 0x09, 0xcb, 0xcf, 0x4c, 0x51, 0x72, 0xe0, 0x12,
	0x70, 0x49, 0x2d, 0x4e, 0x2e, 0xca, 0x4c, 0x4a, 0x0d, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e,
	0x15, 0x92, 0xe2, 0x12, 0x4a, 0xcb, 0xcc, 0x49, 0x85, 0x88, 0x17, 0x94, 0x64, 0xe6, 0xe7, 0x05,
	0xa7, 0x96, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x08, 0x09, 0x70, 0x71, 0x40, 0xcd, 0x2c, 0x96,
	0x60, 0x52, 0x60, 0xd6, 0xe0, 0x34, 0x72, 0xe7, 0xe2, 0x74, 0x81, 0x19, 0x2b, 0x64, 0xc5, 0xc5,
	0x01, 0x33, 0x4e, 0x88, 0x5f, 0x0f, 0x6e, 0x9d, 0x1e, 0xc8, 0x2e, 0x29, 0x69, 0x24, 0x01, 0x74,
	0x4b, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x8e, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xae, 0x0f,
	0xd5, 0x2d, 0xb5, 0x00, 0x00, 0x00,
}
