// Code generated by protoc-gen-go.
// source: replication.proto
// DO NOT EDIT!

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	replication.proto

It has these top-level messages:
	ServiceLinkTicket
	ServiceLinkRequest
	ServiceLinkResponse
	AuthGroup
	AuthSecret
	AuthIPWhitelist
	AuthIPWhitelistAssignment
	AuthDB
	AuthDBRevision
	ChangeNotification
	ReplicationPushRequest
	ReplicationPushResponse
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Status codes.
type ServiceLinkResponse_Status int32

const (
	// The service is now linked and primary will be pushing updates to it.
	ServiceLinkResponse_SUCCESS ServiceLinkResponse_Status = 0
	// Primary do not replies.
	ServiceLinkResponse_TRANSPORT_ERROR ServiceLinkResponse_Status = 1
	// Linking ticket is invalid or expired.
	ServiceLinkResponse_BAD_TICKET ServiceLinkResponse_Status = 2
	// Linking ticket was generated for another app, not the calling one.
	ServiceLinkResponse_AUTH_ERROR ServiceLinkResponse_Status = 3
)

var ServiceLinkResponse_Status_name = map[int32]string{
	0: "SUCCESS",
	1: "TRANSPORT_ERROR",
	2: "BAD_TICKET",
	3: "AUTH_ERROR",
}
var ServiceLinkResponse_Status_value = map[string]int32{
	"SUCCESS":         0,
	"TRANSPORT_ERROR": 1,
	"BAD_TICKET":      2,
	"AUTH_ERROR":      3,
}

func (x ServiceLinkResponse_Status) Enum() *ServiceLinkResponse_Status {
	p := new(ServiceLinkResponse_Status)
	*p = x
	return p
}
func (x ServiceLinkResponse_Status) String() string {
	return proto.EnumName(ServiceLinkResponse_Status_name, int32(x))
}
func (x *ServiceLinkResponse_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServiceLinkResponse_Status_value, data, "ServiceLinkResponse_Status")
	if err != nil {
		return err
	}
	*x = ServiceLinkResponse_Status(value)
	return nil
}

// Overall status of the operation.
type ReplicationPushResponse_Status int32

const (
	// Replica accepted the push request and updated its copy of auth db.
	ReplicationPushResponse_APPLIED ReplicationPushResponse_Status = 0
	// Replica has a newer version of AuthDB, the push request is skipped.
	ReplicationPushResponse_SKIPPED ReplicationPushResponse_Status = 1
	// Non fatal error happened, the push request may be retried.
	ReplicationPushResponse_TRANSIENT_ERROR ReplicationPushResponse_Status = 2
	// Fatal error happened, the push request must not be retried.
	ReplicationPushResponse_FATAL_ERROR ReplicationPushResponse_Status = 3
)

var ReplicationPushResponse_Status_name = map[int32]string{
	0: "APPLIED",
	1: "SKIPPED",
	2: "TRANSIENT_ERROR",
	3: "FATAL_ERROR",
}
var ReplicationPushResponse_Status_value = map[string]int32{
	"APPLIED":         0,
	"SKIPPED":         1,
	"TRANSIENT_ERROR": 2,
	"FATAL_ERROR":     3,
}

func (x ReplicationPushResponse_Status) Enum() *ReplicationPushResponse_Status {
	p := new(ReplicationPushResponse_Status)
	*p = x
	return p
}
func (x ReplicationPushResponse_Status) String() string {
	return proto.EnumName(ReplicationPushResponse_Status_name, int32(x))
}
func (x *ReplicationPushResponse_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReplicationPushResponse_Status_value, data, "ReplicationPushResponse_Status")
	if err != nil {
		return err
	}
	*x = ReplicationPushResponse_Status(value)
	return nil
}

// Error codes, for TRANSIENT_ERROR and FATAL_ERROR statuses.
type ReplicationPushResponse_ErrorCode int32

const (
	// Trying to push an update to service that is not a replica.
	ReplicationPushResponse_NOT_A_REPLICA ReplicationPushResponse_ErrorCode = 1
	// Replica doesn't know about the service that pushing the update.
	ReplicationPushResponse_FORBIDDEN ReplicationPushResponse_ErrorCode = 2
	// Signature headers are missing.
	ReplicationPushResponse_MISSING_SIGNATURE ReplicationPushResponse_ErrorCode = 3
	// Signature is not valid.
	ReplicationPushResponse_BAD_SIGNATURE ReplicationPushResponse_ErrorCode = 4
	// Format of the request is not valid.
	ReplicationPushResponse_BAD_REQUEST ReplicationPushResponse_ErrorCode = 5
)

var ReplicationPushResponse_ErrorCode_name = map[int32]string{
	1: "NOT_A_REPLICA",
	2: "FORBIDDEN",
	3: "MISSING_SIGNATURE",
	4: "BAD_SIGNATURE",
	5: "BAD_REQUEST",
}
var ReplicationPushResponse_ErrorCode_value = map[string]int32{
	"NOT_A_REPLICA":     1,
	"FORBIDDEN":         2,
	"MISSING_SIGNATURE": 3,
	"BAD_SIGNATURE":     4,
	"BAD_REQUEST":       5,
}

func (x ReplicationPushResponse_ErrorCode) Enum() *ReplicationPushResponse_ErrorCode {
	p := new(ReplicationPushResponse_ErrorCode)
	*p = x
	return p
}
func (x ReplicationPushResponse_ErrorCode) String() string {
	return proto.EnumName(ReplicationPushResponse_ErrorCode_name, int32(x))
}
func (x *ReplicationPushResponse_ErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReplicationPushResponse_ErrorCode_value, data, "ReplicationPushResponse_ErrorCode")
	if err != nil {
		return err
	}
	*x = ReplicationPushResponse_ErrorCode(value)
	return nil
}

// Generated by Primary, passed to Replica to initiate linking process.
type ServiceLinkTicket struct {
	// GAE application ID of Primary that generated this ticket. Replica will send
	// ServiceLinkRequest to this service when it processes the ticket.
	PrimaryId *string `protobuf:"bytes,1,req,name=primary_id" json:"primary_id,omitempty"`
	// URL to the root page of a primary service, i.e. https://<...>.appspot.com.
	// Useful when testing on dev appserver and on non-default version.
	PrimaryUrl *string `protobuf:"bytes,2,req,name=primary_url" json:"primary_url,omitempty"`
	// Identity of a user that generated this ticket.
	GeneratedBy *string `protobuf:"bytes,3,req,name=generated_by" json:"generated_by,omitempty"`
	// Opaque blob passed back to Primary in ServiceLinkRequest. Its exact
	// structure is an implementation detail of Primary. It contains app_id of
	// a replica this ticket is intended for, timestamp and HMAC tag.
	Ticket           []byte `protobuf:"bytes,4,req,name=ticket" json:"ticket,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ServiceLinkTicket) Reset()         { *m = ServiceLinkTicket{} }
func (m *ServiceLinkTicket) String() string { return proto.CompactTextString(m) }
func (*ServiceLinkTicket) ProtoMessage()    {}

func (m *ServiceLinkTicket) GetPrimaryId() string {
	if m != nil && m.PrimaryId != nil {
		return *m.PrimaryId
	}
	return ""
}

func (m *ServiceLinkTicket) GetPrimaryUrl() string {
	if m != nil && m.PrimaryUrl != nil {
		return *m.PrimaryUrl
	}
	return ""
}

func (m *ServiceLinkTicket) GetGeneratedBy() string {
	if m != nil && m.GeneratedBy != nil {
		return *m.GeneratedBy
	}
	return ""
}

func (m *ServiceLinkTicket) GetTicket() []byte {
	if m != nil {
		return m.Ticket
	}
	return nil
}

// Sent from Replica to Primary via direct serivce <-> service HTTP call,
// replicas app_id would be available via X-Appengine-Inbound-Appid header.
type ServiceLinkRequest struct {
	// Same ticket that was passed to Replica via ServiceLinkTicket.
	Ticket []byte `protobuf:"bytes,1,req,name=ticket" json:"ticket,omitempty"`
	// URL to use when making requests to Replica from Primary.
	ReplicaUrl *string `protobuf:"bytes,2,req,name=replica_url" json:"replica_url,omitempty"`
	// Identity of a user that accepted the ticket and initiated this request.
	InitiatedBy      *string `protobuf:"bytes,3,req,name=initiated_by" json:"initiated_by,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ServiceLinkRequest) Reset()         { *m = ServiceLinkRequest{} }
func (m *ServiceLinkRequest) String() string { return proto.CompactTextString(m) }
func (*ServiceLinkRequest) ProtoMessage()    {}

func (m *ServiceLinkRequest) GetTicket() []byte {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *ServiceLinkRequest) GetReplicaUrl() string {
	if m != nil && m.ReplicaUrl != nil {
		return *m.ReplicaUrl
	}
	return ""
}

func (m *ServiceLinkRequest) GetInitiatedBy() string {
	if m != nil && m.InitiatedBy != nil {
		return *m.InitiatedBy
	}
	return ""
}

// Primary's response to ServiceLinkRequest. Always returned with HTTP code 200.
type ServiceLinkResponse struct {
	Status           *ServiceLinkResponse_Status `protobuf:"varint,1,req,name=status,enum=protocol.ServiceLinkResponse_Status" json:"status,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *ServiceLinkResponse) Reset()         { *m = ServiceLinkResponse{} }
func (m *ServiceLinkResponse) String() string { return proto.CompactTextString(m) }
func (*ServiceLinkResponse) ProtoMessage()    {}

func (m *ServiceLinkResponse) GetStatus() ServiceLinkResponse_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ServiceLinkResponse_SUCCESS
}

// Some user group. Corresponds to AuthGroup entity in model.py.
type AuthGroup struct {
	// Name of the group.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// List of members that are explicitly in this group.
	Members []string `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	// List of identity-glob expressions (like 'user:*@example.com').
	Globs []string `protobuf:"bytes,3,rep,name=globs" json:"globs,omitempty"`
	// List of nested group names.
	Nested []string `protobuf:"bytes,4,rep,name=nested" json:"nested,omitempty"`
	// Human readable description.
	Description *string `protobuf:"bytes,5,req,name=description" json:"description,omitempty"`
	// When the group was created. Microseconds since epoch.
	CreatedTs *int64 `protobuf:"varint,6,req,name=created_ts" json:"created_ts,omitempty"`
	// Who created the group.
	CreatedBy *string `protobuf:"bytes,7,req,name=created_by" json:"created_by,omitempty"`
	// When the group was modified last time. Microseconds since epoch.
	ModifiedTs *int64 `protobuf:"varint,8,req,name=modified_ts" json:"modified_ts,omitempty"`
	// Who modified the group last time.
	ModifiedBy *string `protobuf:"bytes,9,req,name=modified_by" json:"modified_by,omitempty"`
	// A name of the group that can modify or delete this group.
	Owners           *string `protobuf:"bytes,10,opt,name=owners" json:"owners,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AuthGroup) Reset()         { *m = AuthGroup{} }
func (m *AuthGroup) String() string { return proto.CompactTextString(m) }
func (*AuthGroup) ProtoMessage()    {}

func (m *AuthGroup) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AuthGroup) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *AuthGroup) GetGlobs() []string {
	if m != nil {
		return m.Globs
	}
	return nil
}

func (m *AuthGroup) GetNested() []string {
	if m != nil {
		return m.Nested
	}
	return nil
}

func (m *AuthGroup) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *AuthGroup) GetCreatedTs() int64 {
	if m != nil && m.CreatedTs != nil {
		return *m.CreatedTs
	}
	return 0
}

func (m *AuthGroup) GetCreatedBy() string {
	if m != nil && m.CreatedBy != nil {
		return *m.CreatedBy
	}
	return ""
}

func (m *AuthGroup) GetModifiedTs() int64 {
	if m != nil && m.ModifiedTs != nil {
		return *m.ModifiedTs
	}
	return 0
}

func (m *AuthGroup) GetModifiedBy() string {
	if m != nil && m.ModifiedBy != nil {
		return *m.ModifiedBy
	}
	return ""
}

func (m *AuthGroup) GetOwners() string {
	if m != nil && m.Owners != nil {
		return *m.Owners
	}
	return ""
}

// Some secret blob. Corresponds to AuthSecret entity in model.py.
type AuthSecret struct {
	// Name of the secret.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Last several values of a secret, with current value in front.
	Values [][]byte `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
	// When secret was modified last time. Microseconds since epoch.
	ModifiedTs *int64 `protobuf:"varint,3,req,name=modified_ts" json:"modified_ts,omitempty"`
	// Who modified the secret last time.
	ModifiedBy       *string `protobuf:"bytes,4,req,name=modified_by" json:"modified_by,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AuthSecret) Reset()         { *m = AuthSecret{} }
func (m *AuthSecret) String() string { return proto.CompactTextString(m) }
func (*AuthSecret) ProtoMessage()    {}

func (m *AuthSecret) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AuthSecret) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *AuthSecret) GetModifiedTs() int64 {
	if m != nil && m.ModifiedTs != nil {
		return *m.ModifiedTs
	}
	return 0
}

func (m *AuthSecret) GetModifiedBy() string {
	if m != nil && m.ModifiedBy != nil {
		return *m.ModifiedBy
	}
	return ""
}

// A named set of whitelisted IP addresses. Corresponds to AuthIPWhitelist
// entity in model.py.
type AuthIPWhitelist struct {
	// Name of the IP whitelist.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// The list of IP subnets.
	Subnets []string `protobuf:"bytes,2,rep,name=subnets" json:"subnets,omitempty"`
	// Human readable description.
	Description *string `protobuf:"bytes,3,req,name=description" json:"description,omitempty"`
	// When the list was created. Microseconds since epoch.
	CreatedTs *int64 `protobuf:"varint,4,req,name=created_ts" json:"created_ts,omitempty"`
	// Who created the list.
	CreatedBy *string `protobuf:"bytes,5,req,name=created_by" json:"created_by,omitempty"`
	// When the list was modified. Microseconds since epoch.
	ModifiedTs *int64 `protobuf:"varint,6,req,name=modified_ts" json:"modified_ts,omitempty"`
	// Who modified the list the last time.
	ModifiedBy       *string `protobuf:"bytes,7,req,name=modified_by" json:"modified_by,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AuthIPWhitelist) Reset()         { *m = AuthIPWhitelist{} }
func (m *AuthIPWhitelist) String() string { return proto.CompactTextString(m) }
func (*AuthIPWhitelist) ProtoMessage()    {}

func (m *AuthIPWhitelist) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *AuthIPWhitelist) GetSubnets() []string {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *AuthIPWhitelist) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *AuthIPWhitelist) GetCreatedTs() int64 {
	if m != nil && m.CreatedTs != nil {
		return *m.CreatedTs
	}
	return 0
}

func (m *AuthIPWhitelist) GetCreatedBy() string {
	if m != nil && m.CreatedBy != nil {
		return *m.CreatedBy
	}
	return ""
}

func (m *AuthIPWhitelist) GetModifiedTs() int64 {
	if m != nil && m.ModifiedTs != nil {
		return *m.ModifiedTs
	}
	return 0
}

func (m *AuthIPWhitelist) GetModifiedBy() string {
	if m != nil && m.ModifiedBy != nil {
		return *m.ModifiedBy
	}
	return ""
}

// A pair (identity, IP whitelist name) plus some metadata. Corresponds to
// AuthIPWhitelistAssignments.Assignment model in model.py.
type AuthIPWhitelistAssignment struct {
	// Identity name to limit by IP whitelist.
	Identity *string `protobuf:"bytes,1,req,name=identity" json:"identity,omitempty"`
	// Name of IP whitelist to use (see AuthIPWhitelist).
	IpWhitelist *string `protobuf:"bytes,2,req,name=ip_whitelist" json:"ip_whitelist,omitempty"`
	// Why the assignment was created.
	Comment *string `protobuf:"bytes,3,req,name=comment" json:"comment,omitempty"`
	// When the assignment was created. Microseconds since epoch.
	CreatedTs *int64 `protobuf:"varint,4,req,name=created_ts" json:"created_ts,omitempty"`
	// Who created the assignment.
	CreatedBy        *string `protobuf:"bytes,5,req,name=created_by" json:"created_by,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AuthIPWhitelistAssignment) Reset()         { *m = AuthIPWhitelistAssignment{} }
func (m *AuthIPWhitelistAssignment) String() string { return proto.CompactTextString(m) }
func (*AuthIPWhitelistAssignment) ProtoMessage()    {}

func (m *AuthIPWhitelistAssignment) GetIdentity() string {
	if m != nil && m.Identity != nil {
		return *m.Identity
	}
	return ""
}

func (m *AuthIPWhitelistAssignment) GetIpWhitelist() string {
	if m != nil && m.IpWhitelist != nil {
		return *m.IpWhitelist
	}
	return ""
}

func (m *AuthIPWhitelistAssignment) GetComment() string {
	if m != nil && m.Comment != nil {
		return *m.Comment
	}
	return ""
}

func (m *AuthIPWhitelistAssignment) GetCreatedTs() int64 {
	if m != nil && m.CreatedTs != nil {
		return *m.CreatedTs
	}
	return 0
}

func (m *AuthIPWhitelistAssignment) GetCreatedBy() string {
	if m != nil && m.CreatedBy != nil {
		return *m.CreatedBy
	}
	return ""
}

// An entire database of auth configuration that is being replicated.
// Corresponds to AuthGlobalConfig entity in model.py, plus a list of all groups
// and a list of global secrets.
type AuthDB struct {
	// OAuth2 client_id to use to mint new OAuth2 tokens.
	OauthClientId *string `protobuf:"bytes,1,req,name=oauth_client_id" json:"oauth_client_id,omitempty"`
	// OAuth2 client secret. Not so secret really, since it's passed to clients.
	OauthClientSecret *string `protobuf:"bytes,2,req,name=oauth_client_secret" json:"oauth_client_secret,omitempty"`
	// Additional OAuth2 client_ids allowed to access the services.
	OauthAdditionalClientIds []string `protobuf:"bytes,3,rep,name=oauth_additional_client_ids" json:"oauth_additional_client_ids,omitempty"`
	// All groups.
	Groups []*AuthGroup `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	// Global secrets shared between services.
	Secrets []*AuthSecret `protobuf:"bytes,5,rep,name=secrets" json:"secrets,omitempty"`
	// All IP whitelists.
	IpWhitelists []*AuthIPWhitelist `protobuf:"bytes,6,rep,name=ip_whitelists" json:"ip_whitelists,omitempty"`
	// Mapping 'account -> IP whitlist to use for that account'.
	IpWhitelistAssignments []*AuthIPWhitelistAssignment `protobuf:"bytes,7,rep,name=ip_whitelist_assignments" json:"ip_whitelist_assignments,omitempty"`
	XXX_unrecognized       []byte                       `json:"-"`
}

func (m *AuthDB) Reset()         { *m = AuthDB{} }
func (m *AuthDB) String() string { return proto.CompactTextString(m) }
func (*AuthDB) ProtoMessage()    {}

func (m *AuthDB) GetOauthClientId() string {
	if m != nil && m.OauthClientId != nil {
		return *m.OauthClientId
	}
	return ""
}

func (m *AuthDB) GetOauthClientSecret() string {
	if m != nil && m.OauthClientSecret != nil {
		return *m.OauthClientSecret
	}
	return ""
}

func (m *AuthDB) GetOauthAdditionalClientIds() []string {
	if m != nil {
		return m.OauthAdditionalClientIds
	}
	return nil
}

func (m *AuthDB) GetGroups() []*AuthGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *AuthDB) GetSecrets() []*AuthSecret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *AuthDB) GetIpWhitelists() []*AuthIPWhitelist {
	if m != nil {
		return m.IpWhitelists
	}
	return nil
}

func (m *AuthDB) GetIpWhitelistAssignments() []*AuthIPWhitelistAssignment {
	if m != nil {
		return m.IpWhitelistAssignments
	}
	return nil
}

// Information about some particular revision of auth DB.
type AuthDBRevision struct {
	// GAE App ID of a service holding primary copy of Auth DB.
	PrimaryId *string `protobuf:"bytes,1,req,name=primary_id" json:"primary_id,omitempty"`
	// Revision of Auth DB being pushed.
	AuthDbRev *int64 `protobuf:"varint,2,req,name=auth_db_rev" json:"auth_db_rev,omitempty"`
	// Timestamp of that revision by Primary's clock, microseconds since epoch.
	ModifiedTs       *int64 `protobuf:"varint,3,req,name=modified_ts" json:"modified_ts,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AuthDBRevision) Reset()         { *m = AuthDBRevision{} }
func (m *AuthDBRevision) String() string { return proto.CompactTextString(m) }
func (*AuthDBRevision) ProtoMessage()    {}

func (m *AuthDBRevision) GetPrimaryId() string {
	if m != nil && m.PrimaryId != nil {
		return *m.PrimaryId
	}
	return ""
}

func (m *AuthDBRevision) GetAuthDbRev() int64 {
	if m != nil && m.AuthDbRev != nil {
		return *m.AuthDbRev
	}
	return 0
}

func (m *AuthDBRevision) GetModifiedTs() int64 {
	if m != nil && m.ModifiedTs != nil {
		return *m.ModifiedTs
	}
	return 0
}

// Published by Primary into 'auth-db-changed' PubSub topic. The body of the
// message is base64 encoded serialized ChangeNotification. Additional
// attributes are:
//  X-AuthDB-SigKey-v1: <id of a public key>
//  X-AuthDB-SigVal-v1: <base64 encoded RSA-SHA256(blob) signature>
type ChangeNotification struct {
	// New revision of the AuthDB.
	Revision         *AuthDBRevision `protobuf:"bytes,1,opt,name=revision" json:"revision,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *ChangeNotification) Reset()         { *m = ChangeNotification{} }
func (m *ChangeNotification) String() string { return proto.CompactTextString(m) }
func (*ChangeNotification) ProtoMessage()    {}

func (m *ChangeNotification) GetRevision() *AuthDBRevision {
	if m != nil {
		return m.Revision
	}
	return nil
}

// Sent from Primary to Replica to update Replica's AuthDB.
// Primary signs the entire serialized message with its private key and appends
// two headers to HTTP request that carries the blob:
//  X-AuthDB-SigKey-v1: <id of a public key>
//  X-AuthDB-SigVal-v1: <base64 encoded RSA-SHA256(SHA512(blob)) signature>
type ReplicationPushRequest struct {
	// Revision that is being pushed.
	Revision *AuthDBRevision `protobuf:"bytes,1,opt,name=revision" json:"revision,omitempty"`
	// An entire database of auth configuration for specific revision.
	AuthDb *AuthDB `protobuf:"bytes,2,opt,name=auth_db" json:"auth_db,omitempty"`
	// Version of 'auth' component on Primary, see components/auth/version.py.
	AuthCodeVersion  *string `protobuf:"bytes,3,opt,name=auth_code_version" json:"auth_code_version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReplicationPushRequest) Reset()         { *m = ReplicationPushRequest{} }
func (m *ReplicationPushRequest) String() string { return proto.CompactTextString(m) }
func (*ReplicationPushRequest) ProtoMessage()    {}

func (m *ReplicationPushRequest) GetRevision() *AuthDBRevision {
	if m != nil {
		return m.Revision
	}
	return nil
}

func (m *ReplicationPushRequest) GetAuthDb() *AuthDB {
	if m != nil {
		return m.AuthDb
	}
	return nil
}

func (m *ReplicationPushRequest) GetAuthCodeVersion() string {
	if m != nil && m.AuthCodeVersion != nil {
		return *m.AuthCodeVersion
	}
	return ""
}

// Replica's response to ReplicationPushRequest.
type ReplicationPushResponse struct {
	// Overall status of the operation.
	Status *ReplicationPushResponse_Status `protobuf:"varint,1,req,name=status,enum=protocol.ReplicationPushResponse_Status" json:"status,omitempty"`
	// Revision known by Replica (set for APPLIED and SKIPPED statuses).
	CurrentRevision *AuthDBRevision `protobuf:"bytes,2,opt,name=current_revision" json:"current_revision,omitempty"`
	// Present for TRANSIENT_ERROR and FATAL_ERROR statuses.
	ErrorCode *ReplicationPushResponse_ErrorCode `protobuf:"varint,3,opt,name=error_code,enum=protocol.ReplicationPushResponse_ErrorCode" json:"error_code,omitempty"`
	// Version of 'auth' component on Replica, see components/auth/version.py.
	AuthCodeVersion  *string `protobuf:"bytes,4,opt,name=auth_code_version" json:"auth_code_version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReplicationPushResponse) Reset()         { *m = ReplicationPushResponse{} }
func (m *ReplicationPushResponse) String() string { return proto.CompactTextString(m) }
func (*ReplicationPushResponse) ProtoMessage()    {}

func (m *ReplicationPushResponse) GetStatus() ReplicationPushResponse_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ReplicationPushResponse_APPLIED
}

func (m *ReplicationPushResponse) GetCurrentRevision() *AuthDBRevision {
	if m != nil {
		return m.CurrentRevision
	}
	return nil
}

func (m *ReplicationPushResponse) GetErrorCode() ReplicationPushResponse_ErrorCode {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return ReplicationPushResponse_NOT_A_REPLICA
}

func (m *ReplicationPushResponse) GetAuthCodeVersion() string {
	if m != nil && m.AuthCodeVersion != nil {
		return *m.AuthCodeVersion
	}
	return ""
}

func init() {
	proto.RegisterEnum("protocol.ServiceLinkResponse_Status", ServiceLinkResponse_Status_name, ServiceLinkResponse_Status_value)
	proto.RegisterEnum("protocol.ReplicationPushResponse_Status", ReplicationPushResponse_Status_name, ReplicationPushResponse_Status_value)
	proto.RegisterEnum("protocol.ReplicationPushResponse_ErrorCode", ReplicationPushResponse_ErrorCode_name, ReplicationPushResponse_ErrorCode_value)
}
