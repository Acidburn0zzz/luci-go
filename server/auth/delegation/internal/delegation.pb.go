// Code generated by protoc-gen-go.
// source: github.com/luci/luci-go/server/auth/delegation/internal/delegation.proto
// DO NOT EDIT!

/*
Package internal is a generated protocol buffer package.

It is generated from these files:
	github.com/luci/luci-go/server/auth/delegation/internal/delegation.proto

It has these top-level messages:
	DelegationToken
	Subtoken
*/
package internal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Signed serialized Subtoken.
//
// This message is just an envelope that carries the serialized Subtoken message
// and its signature.
//
// Reserved IDs: 1.
type DelegationToken struct {
	// Identity of a service that signed this token (e.g. 'service:app-id').
	//
	// Will be queries (via SSL) for the public key to use for signature
	// verification.
	//
	// Required.
	SignerId *string `protobuf:"bytes,2,opt,name=signer_id,json=signerId" json:"signer_id,omitempty"`
	// ID of a key used for making the signature.
	//
	// There can be multiple active keys at any moment in time: one used for new
	// signatures, and one being rotated out (but still valid for verification).
	//
	// The lifetime of the token indirectly depends on the lifetime of the signing
	// key, which is 24h. So delegation tokens can't live longer than 24h.
	//
	// Required.
	SigningKeyId *string `protobuf:"bytes,3,opt,name=signing_key_id,json=signingKeyId" json:"signing_key_id,omitempty"`
	// The signature: PKCS1_v1_5+SHA256(serialized_subtoken, signing_key_id).
	//
	// Required.
	Pkcs1Sha256Sig []byte `protobuf:"bytes,4,opt,name=pkcs1_sha256_sig,json=pkcs1Sha256Sig" json:"pkcs1_sha256_sig,omitempty"`
	// Serialized Subtoken message. It's signature is stored in pkcs1_sha256_sig.
	//
	// Required.
	SerializedSubtoken []byte `protobuf:"bytes,5,opt,name=serialized_subtoken,json=serializedSubtoken" json:"serialized_subtoken,omitempty"`
	XXX_unrecognized   []byte `json:"-"`
}

func (m *DelegationToken) Reset()                    { *m = DelegationToken{} }
func (m *DelegationToken) String() string            { return proto.CompactTextString(m) }
func (*DelegationToken) ProtoMessage()               {}
func (*DelegationToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DelegationToken) GetSignerId() string {
	if m != nil && m.SignerId != nil {
		return *m.SignerId
	}
	return ""
}

func (m *DelegationToken) GetSigningKeyId() string {
	if m != nil && m.SigningKeyId != nil {
		return *m.SigningKeyId
	}
	return ""
}

func (m *DelegationToken) GetPkcs1Sha256Sig() []byte {
	if m != nil {
		return m.Pkcs1Sha256Sig
	}
	return nil
}

func (m *DelegationToken) GetSerializedSubtoken() []byte {
	if m != nil {
		return m.SerializedSubtoken
	}
	return nil
}

// Identifies who delegates what authority to whom where.
type Subtoken struct {
	// WHO. Identity whose authority is delegated. Usually it's the identity that
	// generates the delegation token.
	//
	// Required.
	IssuerId *string `protobuf:"bytes,1,opt,name=issuer_id,json=issuerId" json:"issuer_id,omitempty"`
	// When the subtoken was generated (and when it becomes valid).
	//
	// Number of seconds since epoch (Unix timestamp).
	//
	// Required.
	CreationTime *int64 `protobuf:"varint,2,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	// How long the token is considered valid (in seconds).
	//
	// Required.
	ValidityDuration *int32 `protobuf:"varint,3,opt,name=validity_duration,json=validityDuration" json:"validity_duration,omitempty"`
	// Identifier of this subtoken.
	//
	// Used for logging and tracking purposes.
	//
	// Required.
	SubtokenId *int64 `protobuf:"varint,4,opt,name=subtoken_id,json=subtokenId" json:"subtoken_id,omitempty"`
	// To WHOM the authority is delegated.
	//
	// Each item can be an identity string (e.g. "user:<email>"), a "group:<name>"
	// string, or special '*' string which means "Any bearer can use the token".
	//
	// Required.
	Audience []string `protobuf:"bytes,5,rep,name=audience" json:"audience,omitempty"`
	// WHERE the token is valid.
	//
	// List of services (specified as service identities, e.g. "service:app-id")
	// that should accept this token. May also contain special '*' string, which
	// means "All services".
	//
	// Required.
	Services []string `protobuf:"bytes,6,rep,name=services" json:"services,omitempty"`
	// If this token was minted on some else's behalf (i.e. issuer_id field was
	// provided externally) stores an identify of whoever initiated the minting
	// request.
	//
	// Optional field.
	ImpersonatorId   *string `protobuf:"bytes,7,opt,name=impersonator_id,json=impersonatorId" json:"impersonator_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Subtoken) Reset()                    { *m = Subtoken{} }
func (m *Subtoken) String() string            { return proto.CompactTextString(m) }
func (*Subtoken) ProtoMessage()               {}
func (*Subtoken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Subtoken) GetIssuerId() string {
	if m != nil && m.IssuerId != nil {
		return *m.IssuerId
	}
	return ""
}

func (m *Subtoken) GetCreationTime() int64 {
	if m != nil && m.CreationTime != nil {
		return *m.CreationTime
	}
	return 0
}

func (m *Subtoken) GetValidityDuration() int32 {
	if m != nil && m.ValidityDuration != nil {
		return *m.ValidityDuration
	}
	return 0
}

func (m *Subtoken) GetSubtokenId() int64 {
	if m != nil && m.SubtokenId != nil {
		return *m.SubtokenId
	}
	return 0
}

func (m *Subtoken) GetAudience() []string {
	if m != nil {
		return m.Audience
	}
	return nil
}

func (m *Subtoken) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Subtoken) GetImpersonatorId() string {
	if m != nil && m.ImpersonatorId != nil {
		return *m.ImpersonatorId
	}
	return ""
}

func init() {
	proto.RegisterType((*DelegationToken)(nil), "internal.DelegationToken")
	proto.RegisterType((*Subtoken)(nil), "internal.Subtoken")
}

func init() {
	proto.RegisterFile("github.com/luci/luci-go/server/auth/delegation/internal/delegation.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x91, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0x53, 0x01, 0x2d, 0x2b, 0x02, 0xae, 0x97, 0x46, 0x0f, 0x1a, 0x34, 0x91, 0xc4, 0x48,
	0xa3, 0x89, 0x3e, 0x01, 0x07, 0x89, 0xb7, 0xc2, 0xbd, 0x29, 0xdd, 0x49, 0x99, 0x50, 0x76, 0xc9,
	0xfe, 0x21, 0xc1, 0x97, 0xf2, 0x01, 0xbd, 0xb8, 0xbb, 0x65, 0x95, 0x4b, 0xd3, 0xf9, 0xfd, 0x26,
	0x9d, 0xef, 0x4b, 0xc9, 0x47, 0x85, 0x7a, 0x65, 0x96, 0x93, 0x52, 0x6c, 0xd2, 0xda, 0x94, 0xe8,
	0x1f, 0xcf, 0x95, 0x48, 0x15, 0xc8, 0x1d, 0xc8, 0xb4, 0x30, 0x7a, 0x95, 0x32, 0xa8, 0xa1, 0x2a,
	0x34, 0x0a, 0x9e, 0x22, 0xd7, 0x20, 0x79, 0x51, 0x1f, 0xb1, 0xc9, 0x56, 0x0a, 0x2d, 0x68, 0x1c,
	0xd4, 0xe8, 0x3b, 0x22, 0x83, 0xe9, 0x9f, 0x5e, 0x88, 0x35, 0x70, 0x7a, 0x43, 0xba, 0x0a, 0x2b,
	0x0e, 0x32, 0x47, 0x96, 0x9c, 0xdc, 0x45, 0xe3, 0x6e, 0x16, 0x37, 0x60, 0xc6, 0xe8, 0x03, 0xe9,
	0xbb, 0x77, 0xe4, 0x55, 0xbe, 0x86, 0xbd, 0xdb, 0x68, 0xf9, 0x8d, 0xde, 0x81, 0x7e, 0xc2, 0xde,
	0x6e, 0x8d, 0xc9, 0x70, 0xbb, 0x2e, 0xd5, 0x4b, 0xae, 0x56, 0xc5, 0xeb, 0xdb, 0x7b, 0x6e, 0x65,
	0xd2, 0xb6, 0x7b, 0xbd, 0xac, 0xef, 0xf9, 0xdc, 0xe3, 0x39, 0x56, 0x34, 0x25, 0x57, 0x36, 0x3e,
	0x16, 0x35, 0x7e, 0x01, 0xcb, 0x95, 0x59, 0x6a, 0x97, 0x21, 0xe9, 0xf8, 0x65, 0xfa, 0xaf, 0xe6,
	0x07, 0x33, 0xfa, 0x89, 0x48, 0x1c, 0x06, 0x17, 0x15, 0x95, 0x32, 0x4d, 0xd4, 0xa8, 0x89, 0xda,
	0x00, 0x1b, 0xe2, 0x9e, 0x5c, 0x94, 0x12, 0x7c, 0xb1, 0x5c, 0xe3, 0x06, 0x7c, 0x97, 0x56, 0xd6,
	0x0b, 0x70, 0x61, 0x19, 0x7d, 0x22, 0x97, 0x3b, 0x7b, 0x81, 0xa1, 0xde, 0xe7, 0xcc, 0x48, 0x2f,
	0x7c, 0xa5, 0x4e, 0x36, 0x0c, 0x62, 0x7a, 0xe0, 0xf4, 0x96, 0x9c, 0x87, 0x84, 0xee, 0x60, 0xdb,
	0x7f, 0x8f, 0x04, 0x64, 0x4f, 0x5e, 0x93, 0xb8, 0x30, 0x0c, 0x81, 0x97, 0x60, 0x2b, 0xb4, 0x5c,
	0x9c, 0x30, 0x3b, 0xe7, 0x7e, 0x14, 0x96, 0xa0, 0x92, 0xd3, 0xc6, 0x85, 0x99, 0x3e, 0x92, 0x01,
	0x6e, 0xb6, 0x20, 0x95, 0xe0, 0x85, 0x16, 0xbe, 0xcd, 0x99, 0x6f, 0xd3, 0x3f, 0xc6, 0x33, 0xf6,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x29, 0x1e, 0x45, 0x4a, 0x04, 0x02, 0x00, 0x00,
}
