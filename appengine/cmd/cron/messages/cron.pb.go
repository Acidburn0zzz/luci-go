// Code generated by protoc-gen-go.
// source: cron.proto
// DO NOT EDIT!

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	cron.proto

It has these top-level messages:
	Job
	Task
	NoopTask
	UrlFetchTask
	ProjectConfig
*/
package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Job specifies a single cron job belonging to a project.
type Job struct {
	// Id is a name of the job (unique for the project).
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Schedule in regular cron expression format.
	Schedule *string `protobuf:"bytes,2,opt,name=schedule" json:"schedule,omitempty"`
	// Disables is true to disable this job.
	Disabled *bool `protobuf:"varint,3,opt,name=disabled" json:"disabled,omitempty"`
	// Task defines what exactly to execute.
	Task             *Task  `protobuf:"bytes,4,opt,name=task" json:"task,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}

func (m *Job) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Job) GetSchedule() string {
	if m != nil && m.Schedule != nil {
		return *m.Schedule
	}
	return ""
}

func (m *Job) GetDisabled() bool {
	if m != nil && m.Disabled != nil {
		return *m.Disabled
	}
	return false
}

func (m *Job) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

// Task defines what exactly to do. One and only one field must be set.
type Task struct {
	// Noop is used for testing. It is "do nothing" task.
	Noop *NoopTask `protobuf:"bytes,1,opt,name=noop" json:"noop,omitempty"`
	// UrlFetch can be used to make a simple HTTP call.
	UrlFetch         *UrlFetchTask `protobuf:"bytes,2,opt,name=url_fetch" json:"url_fetch,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}

func (m *Task) GetNoop() *NoopTask {
	if m != nil {
		return m.Noop
	}
	return nil
}

func (m *Task) GetUrlFetch() *UrlFetchTask {
	if m != nil {
		return m.UrlFetch
	}
	return nil
}

// NoopTask is used for testing. It is "do nothing" task.
type NoopTask struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *NoopTask) Reset()         { *m = NoopTask{} }
func (m *NoopTask) String() string { return proto.CompactTextString(m) }
func (*NoopTask) ProtoMessage()    {}

// UrlFetchTask specifies parameters for simple HTTP call.
type UrlFetchTask struct {
	// Method is HTTP method to use, such as "GET" or "POST".
	Method *string `protobuf:"bytes,1,opt,name=method,def=GET" json:"method,omitempty"`
	// Url to send the request to.
	Url *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	// Timeout is how long to wait for request to complete.
	TimeoutSec       *int32 `protobuf:"varint,3,opt,name=timeout_sec,def=60" json:"timeout_sec,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UrlFetchTask) Reset()         { *m = UrlFetchTask{} }
func (m *UrlFetchTask) String() string { return proto.CompactTextString(m) }
func (*UrlFetchTask) ProtoMessage()    {}

const Default_UrlFetchTask_Method string = "GET"
const Default_UrlFetchTask_TimeoutSec int32 = 60

func (m *UrlFetchTask) GetMethod() string {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return Default_UrlFetchTask_Method
}

func (m *UrlFetchTask) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *UrlFetchTask) GetTimeoutSec() int32 {
	if m != nil && m.TimeoutSec != nil {
		return *m.TimeoutSec
	}
	return Default_UrlFetchTask_TimeoutSec
}

// ProjectConfig defines a schema for cron.cfg files that describe cron jobs
// belonging to some project.
type ProjectConfig struct {
	// Job is a set of jobs defines in the project. It's singular to make
	// text-encoded proto definitions more readable.
	Job              []*Job `protobuf:"bytes,1,rep,name=job" json:"job,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProjectConfig) Reset()         { *m = ProjectConfig{} }
func (m *ProjectConfig) String() string { return proto.CompactTextString(m) }
func (*ProjectConfig) ProtoMessage()    {}

func (m *ProjectConfig) GetJob() []*Job {
	if m != nil {
		return m.Job
	}
	return nil
}
