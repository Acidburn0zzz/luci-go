// Code generated by protoc-gen-go.
// source: github.com/luci/luci-go/tokenserver/api/admin/v1/service_accounts.proto
// DO NOT EDIT!

package admin

import prpc "github.com/luci/luci-go/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tokenserver "github.com/luci/luci-go/tokenserver/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CreateServiceAccountRequest is parameters for CreateServiceAccount call.
type CreateServiceAccountRequest struct {
	Ca    string `protobuf:"bytes,1,opt,name=ca" json:"ca,omitempty"`
	Fqdn  string `protobuf:"bytes,2,opt,name=fqdn" json:"fqdn,omitempty"`
	Force bool   `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`
}

func (m *CreateServiceAccountRequest) Reset()                    { *m = CreateServiceAccountRequest{} }
func (m *CreateServiceAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceAccountRequest) ProtoMessage()               {}
func (*CreateServiceAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// CreateServiceAccountResponse is returned by CreateServiceAccount call.
type CreateServiceAccountResponse struct {
	ServiceAccount *tokenserver.ServiceAccount `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount" json:"service_account,omitempty"`
}

func (m *CreateServiceAccountResponse) Reset()                    { *m = CreateServiceAccountResponse{} }
func (m *CreateServiceAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceAccountResponse) ProtoMessage()               {}
func (*CreateServiceAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CreateServiceAccountResponse) GetServiceAccount() *tokenserver.ServiceAccount {
	if m != nil {
		return m.ServiceAccount
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateServiceAccountRequest)(nil), "tokenserver.admin.CreateServiceAccountRequest")
	proto.RegisterType((*CreateServiceAccountResponse)(nil), "tokenserver.admin.CreateServiceAccountResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ServiceAccounts service

type ServiceAccountsClient interface {
	// CreateServiceAccount creates Google Cloud IAM service account associated
	// with given host.
	//
	// It uses token server configuration to pick a cloud project and to derive
	// service account ID. See documentation for CertificateAuthorityConfig proto
	// message for more info.
	//
	// This operation is idempotent.
	CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*CreateServiceAccountResponse, error)
}
type serviceAccountsPRPCClient struct {
	client *prpc.Client
}

func NewServiceAccountsPRPCClient(client *prpc.Client) ServiceAccountsClient {
	return &serviceAccountsPRPCClient{client}
}

func (c *serviceAccountsPRPCClient) CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*CreateServiceAccountResponse, error) {
	out := new(CreateServiceAccountResponse)
	err := c.client.Call(ctx, "tokenserver.admin.ServiceAccounts", "CreateServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type serviceAccountsClient struct {
	cc *grpc.ClientConn
}

func NewServiceAccountsClient(cc *grpc.ClientConn) ServiceAccountsClient {
	return &serviceAccountsClient{cc}
}

func (c *serviceAccountsClient) CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*CreateServiceAccountResponse, error) {
	out := new(CreateServiceAccountResponse)
	err := grpc.Invoke(ctx, "/tokenserver.admin.ServiceAccounts/CreateServiceAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceAccounts service

type ServiceAccountsServer interface {
	// CreateServiceAccount creates Google Cloud IAM service account associated
	// with given host.
	//
	// It uses token server configuration to pick a cloud project and to derive
	// service account ID. See documentation for CertificateAuthorityConfig proto
	// message for more info.
	//
	// This operation is idempotent.
	CreateServiceAccount(context.Context, *CreateServiceAccountRequest) (*CreateServiceAccountResponse, error)
}

func RegisterServiceAccountsServer(s prpc.Registrar, srv ServiceAccountsServer) {
	s.RegisterService(&_ServiceAccounts_serviceDesc, srv)
}

func _ServiceAccounts_CreateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountsServer).CreateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenserver.admin.ServiceAccounts/CreateServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountsServer).CreateServiceAccount(ctx, req.(*CreateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceAccounts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tokenserver.admin.ServiceAccounts",
	HandlerType: (*ServiceAccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServiceAccount",
			Handler:    _ServiceAccounts_CreateServiceAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor2,
}

func init() {
	proto.RegisterFile("github.com/luci/luci-go/tokenserver/api/admin/v1/service_accounts.proto", fileDescriptor2)
}

var fileDescriptor2 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x72, 0x4f, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0x29, 0x4d, 0xce, 0x04, 0x13, 0xba, 0xe9, 0xf9,
	0xfa, 0x25, 0xf9, 0xd9, 0xa9, 0x79, 0xc5, 0xa9, 0x45, 0x65, 0xa9, 0x45, 0xfa, 0x89, 0x05, 0x99,
	0xfa, 0x89, 0x29, 0xb9, 0x99, 0x79, 0xfa, 0x65, 0x86, 0xfa, 0x20, 0xb1, 0xcc, 0xe4, 0xd4, 0xf8,
	0xc4, 0xe4, 0xe4, 0xfc, 0xd2, 0xbc, 0x92, 0x62, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0x41,
	0x24, 0x0d, 0x7a, 0x60, 0xc5, 0x52, 0xb6, 0xc4, 0x9a, 0x8d, 0x66, 0x24, 0xc4, 0x44, 0xa5, 0x70,
	0x2e, 0x69, 0xe7, 0xa2, 0xd4, 0xc4, 0x92, 0xd4, 0x60, 0x88, 0xb4, 0x23, 0x44, 0x36, 0x28, 0xb5,
	0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x88, 0x8f, 0x8b, 0x29, 0x39, 0x51, 0x82, 0x51, 0x81, 0x51, 0x83,
	0x33, 0x08, 0xc8, 0x12, 0x12, 0xe2, 0x62, 0x49, 0x2b, 0x4c, 0xc9, 0x93, 0x60, 0x02, 0x8b, 0x80,
	0xd9, 0x42, 0x22, 0x5c, 0xac, 0x69, 0xf9, 0x45, 0xc9, 0xa9, 0x12, 0xcc, 0x40, 0x41, 0x8e, 0x20,
	0x08, 0x47, 0x29, 0x85, 0x4b, 0x06, 0xbb, 0xc1, 0xc5, 0x05, 0xf9, 0x40, 0x67, 0x09, 0xb9, 0x70,
	0xf1, 0xa3, 0xb9, 0x08, 0x6c, 0x0d, 0xb7, 0x91, 0xb4, 0x1e, 0xb2, 0x27, 0xd1, 0x74, 0xf3, 0x15,
	0xa3, 0xf0, 0x8d, 0xba, 0x18, 0xb9, 0xf8, 0x51, 0x95, 0x14, 0x0b, 0x95, 0x73, 0x89, 0x60, 0xb3,
	0x59, 0x48, 0x4f, 0x0f, 0x23, 0xf4, 0xf4, 0xf0, 0xf8, 0x5d, 0x4a, 0x9f, 0x68, 0xf5, 0x10, 0x2f,
	0x25, 0xb1, 0x81, 0x83, 0xd4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xff, 0x4a, 0x83, 0x30, 0xef,
	0x01, 0x00, 0x00,
}
