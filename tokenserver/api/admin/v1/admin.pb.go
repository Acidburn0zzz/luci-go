// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/luci/luci-go/tokenserver/api/admin/v1/admin.proto

/*
Package admin is a generated protocol buffer package.

It is generated from these files:
	github.com/luci/luci-go/tokenserver/api/admin/v1/admin.proto
	github.com/luci/luci-go/tokenserver/api/admin/v1/certificate_authorities.proto
	github.com/luci/luci-go/tokenserver/api/admin/v1/config.proto

It has these top-level messages:
	ImportedConfigs
	InspectMachineTokenRequest
	InspectMachineTokenResponse
	InspectDelegationTokenRequest
	InspectDelegationTokenResponse
	InspectOAuthTokenGrantRequest
	InspectOAuthTokenGrantResponse
	FetchCRLRequest
	FetchCRLResponse
	ListCAsResponse
	GetCAStatusRequest
	GetCAStatusResponse
	IsRevokedCertRequest
	IsRevokedCertResponse
	CheckCertificateRequest
	CheckCertificateResponse
	CRLStatus
	TokenServerConfig
	CertificateAuthorityConfig
	DomainConfig
	DelegationPermissions
	DelegationRule
	ServiceAccountsPermissions
	ServiceAccountRule
*/
package admin

import prpc "github.com/luci/luci-go/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import messages "github.com/luci/luci-go/server/auth/delegation/messages"
import tokenserver "github.com/luci/luci-go/tokenserver/api"
import tokenserver1 "github.com/luci/luci-go/tokenserver/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ImportedConfigs is returned by Import<something>Configs methods on success.
type ImportedConfigs struct {
	// The revision of the configs that are now in the datastore.
	//
	// It's either the imported revision, if configs change, or a previously known
	// revision, if configs at HEAD are same.
	Revision string `protobuf:"bytes,1,opt,name=revision" json:"revision,omitempty"`
}

func (m *ImportedConfigs) Reset()                    { *m = ImportedConfigs{} }
func (m *ImportedConfigs) String() string            { return proto.CompactTextString(m) }
func (*ImportedConfigs) ProtoMessage()               {}
func (*ImportedConfigs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ImportedConfigs) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

// InspectMachineTokenRequest is body of InspectMachineToken RPC call.
//
// It contains machine token of some kind.
type InspectMachineTokenRequest struct {
	// The type of token being checked.
	//
	// Currently only LUCI_MACHINE_TOKEN is supported. This is also the default.
	TokenType tokenserver.MachineTokenType `protobuf:"varint,1,opt,name=token_type,json=tokenType,enum=tokenserver.MachineTokenType" json:"token_type,omitempty"`
	// The token body. Exact meaning depends on token_type.
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *InspectMachineTokenRequest) Reset()                    { *m = InspectMachineTokenRequest{} }
func (m *InspectMachineTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectMachineTokenRequest) ProtoMessage()               {}
func (*InspectMachineTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InspectMachineTokenRequest) GetTokenType() tokenserver.MachineTokenType {
	if m != nil {
		return m.TokenType
	}
	return tokenserver.MachineTokenType_UNKNOWN_TYPE
}

func (m *InspectMachineTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// InspectMachineTokenResponse is return value of InspectMachineToken RPC call.
type InspectMachineTokenResponse struct {
	// True if the token is valid.
	//
	// A token is valid if its signature is correct, it hasn't expired yet and
	// the credentials it was built from (e.g. a certificate) wasn't revoked.
	Valid bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	// Human readable summary of why token is invalid.
	//
	// Summarizes the rest of the fields of this struct. Set only if 'valid' is
	// false.
	InvalidityReason string `protobuf:"bytes,2,opt,name=invalidity_reason,json=invalidityReason" json:"invalidity_reason,omitempty"`
	// True if the token signature was verified.
	//
	// It means the token was generated by the token server and its body is not
	// a garbage. Note that a token can be correctly signed, but invalid (if it
	// has expired or was revoked).
	//
	// If 'signed' is false, the fields below may (or may not) be a garbage.
	//
	// The token server uses private keys managed by Google Cloud Platform, they
	// are constantly being rotated and "old" signatures become invalid over time
	// (when corresponding keys are rotated out of existence).
	//
	// If 'signed' is false, use the rest of the response only as FYI, possibly
	// invalid or even maliciously constructed.
	Signed bool `protobuf:"varint,3,opt,name=signed" json:"signed,omitempty"`
	// True if the token signature was verified and token hasn't expired yet.
	//
	// We use "non_" prefix to make default 'false' value safer.
	NonExpired bool `protobuf:"varint,4,opt,name=non_expired,json=nonExpired" json:"non_expired,omitempty"`
	// True if the token signature was verified and the token wasn't revoked.
	//
	// It is possible for an expired token to be non revoked. They are independent
	// properties.
	//
	// We use "non_" prefix to make default 'false' value safer.
	NonRevoked bool `protobuf:"varint,5,opt,name=non_revoked,json=nonRevoked" json:"non_revoked,omitempty"`
	// Id of a private key used to sign this token, if applicable.
	SigningKeyId string `protobuf:"bytes,6,opt,name=signing_key_id,json=signingKeyId" json:"signing_key_id,omitempty"`
	// Name of a CA that issued the cert the token is based on, if applicable.
	//
	// Resolved from 'ca_id' field of the token body.
	CertCaName string `protobuf:"bytes,7,opt,name=cert_ca_name,json=certCaName" json:"cert_ca_name,omitempty"`
	// The decoded token body (depends on token_type request parameter). Empty if
	// token was malformed and couldn't be deserialized.
	//
	// Types that are valid to be assigned to TokenType:
	//	*InspectMachineTokenResponse_LuciMachineToken
	TokenType isInspectMachineTokenResponse_TokenType `protobuf_oneof:"token_type"`
}

func (m *InspectMachineTokenResponse) Reset()                    { *m = InspectMachineTokenResponse{} }
func (m *InspectMachineTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*InspectMachineTokenResponse) ProtoMessage()               {}
func (*InspectMachineTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isInspectMachineTokenResponse_TokenType interface {
	isInspectMachineTokenResponse_TokenType()
}

type InspectMachineTokenResponse_LuciMachineToken struct {
	LuciMachineToken *tokenserver.MachineTokenBody `protobuf:"bytes,20,opt,name=luci_machine_token,json=luciMachineToken,oneof"`
}

func (*InspectMachineTokenResponse_LuciMachineToken) isInspectMachineTokenResponse_TokenType() {}

func (m *InspectMachineTokenResponse) GetTokenType() isInspectMachineTokenResponse_TokenType {
	if m != nil {
		return m.TokenType
	}
	return nil
}

func (m *InspectMachineTokenResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *InspectMachineTokenResponse) GetInvalidityReason() string {
	if m != nil {
		return m.InvalidityReason
	}
	return ""
}

func (m *InspectMachineTokenResponse) GetSigned() bool {
	if m != nil {
		return m.Signed
	}
	return false
}

func (m *InspectMachineTokenResponse) GetNonExpired() bool {
	if m != nil {
		return m.NonExpired
	}
	return false
}

func (m *InspectMachineTokenResponse) GetNonRevoked() bool {
	if m != nil {
		return m.NonRevoked
	}
	return false
}

func (m *InspectMachineTokenResponse) GetSigningKeyId() string {
	if m != nil {
		return m.SigningKeyId
	}
	return ""
}

func (m *InspectMachineTokenResponse) GetCertCaName() string {
	if m != nil {
		return m.CertCaName
	}
	return ""
}

func (m *InspectMachineTokenResponse) GetLuciMachineToken() *tokenserver.MachineTokenBody {
	if x, ok := m.GetTokenType().(*InspectMachineTokenResponse_LuciMachineToken); ok {
		return x.LuciMachineToken
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InspectMachineTokenResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InspectMachineTokenResponse_OneofMarshaler, _InspectMachineTokenResponse_OneofUnmarshaler, _InspectMachineTokenResponse_OneofSizer, []interface{}{
		(*InspectMachineTokenResponse_LuciMachineToken)(nil),
	}
}

func _InspectMachineTokenResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InspectMachineTokenResponse)
	// token_type
	switch x := m.TokenType.(type) {
	case *InspectMachineTokenResponse_LuciMachineToken:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LuciMachineToken); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InspectMachineTokenResponse.TokenType has unexpected type %T", x)
	}
	return nil
}

func _InspectMachineTokenResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InspectMachineTokenResponse)
	switch tag {
	case 20: // token_type.luci_machine_token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(tokenserver.MachineTokenBody)
		err := b.DecodeMessage(msg)
		m.TokenType = &InspectMachineTokenResponse_LuciMachineToken{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InspectMachineTokenResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InspectMachineTokenResponse)
	// token_type
	switch x := m.TokenType.(type) {
	case *InspectMachineTokenResponse_LuciMachineToken:
		s := proto.Size(x.LuciMachineToken)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// InspectDelegationTokenRequest is body of InspectDelegationToken RPC call.
type InspectDelegationTokenRequest struct {
	// The token body.
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *InspectDelegationTokenRequest) Reset()                    { *m = InspectDelegationTokenRequest{} }
func (m *InspectDelegationTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectDelegationTokenRequest) ProtoMessage()               {}
func (*InspectDelegationTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *InspectDelegationTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// InspectDelegationTokenResponse is return value of InspectDelegationToken RPC.
type InspectDelegationTokenResponse struct {
	// True if the token is valid.
	//
	// A token is valid if its signature is correct and it hasn't expired yet.
	Valid bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	// Human readable summary of why token is invalid.
	//
	// Summarizes the rest of the fields of this struct. Set only if 'valid' is
	// false.
	InvalidityReason string `protobuf:"bytes,2,opt,name=invalidity_reason,json=invalidityReason" json:"invalidity_reason,omitempty"`
	// True if the token signature was verified.
	//
	// It means the token was generated by the token server and its body is not
	// a garbage. Note that a token can be correctly signed, but invalid (if it
	// has expired).
	//
	// If 'signed' is false, the fields below may (or may not) be a garbage.
	//
	// The token server uses private keys managed by Google Cloud Platform, they
	// are constantly being rotated and "old" signatures become invalid over time
	// (when corresponding keys are rotated out of existence).
	//
	// If 'signed' is false, use the rest of the response only as FYI, possibly
	// invalid or even maliciously constructed.
	Signed bool `protobuf:"varint,3,opt,name=signed" json:"signed,omitempty"`
	// True if the token signature was verified and token hasn't expired yet.
	//
	// We use "non_" prefix to make default 'false' value safer.
	NonExpired bool `protobuf:"varint,4,opt,name=non_expired,json=nonExpired" json:"non_expired,omitempty"`
	// The deserialized token envelope.
	//
	// May be empty if token was malformed and couldn't be deserialized.
	Envelope *messages.DelegationToken `protobuf:"bytes,5,opt,name=envelope" json:"envelope,omitempty"`
	// The deserialized token body (deserialized 'envelope.serialized_subtoken').
	//
	// May be empty if token was malformed and couldn't be deserialized.
	Subtoken *messages.Subtoken `protobuf:"bytes,6,opt,name=subtoken" json:"subtoken,omitempty"`
}

func (m *InspectDelegationTokenResponse) Reset()                    { *m = InspectDelegationTokenResponse{} }
func (m *InspectDelegationTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*InspectDelegationTokenResponse) ProtoMessage()               {}
func (*InspectDelegationTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *InspectDelegationTokenResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *InspectDelegationTokenResponse) GetInvalidityReason() string {
	if m != nil {
		return m.InvalidityReason
	}
	return ""
}

func (m *InspectDelegationTokenResponse) GetSigned() bool {
	if m != nil {
		return m.Signed
	}
	return false
}

func (m *InspectDelegationTokenResponse) GetNonExpired() bool {
	if m != nil {
		return m.NonExpired
	}
	return false
}

func (m *InspectDelegationTokenResponse) GetEnvelope() *messages.DelegationToken {
	if m != nil {
		return m.Envelope
	}
	return nil
}

func (m *InspectDelegationTokenResponse) GetSubtoken() *messages.Subtoken {
	if m != nil {
		return m.Subtoken
	}
	return nil
}

// InspectOAuthTokenGrantRequest is body of InspectOAuthTokenGrant RPC call.
type InspectOAuthTokenGrantRequest struct {
	// The token body.
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *InspectOAuthTokenGrantRequest) Reset()                    { *m = InspectOAuthTokenGrantRequest{} }
func (m *InspectOAuthTokenGrantRequest) String() string            { return proto.CompactTextString(m) }
func (*InspectOAuthTokenGrantRequest) ProtoMessage()               {}
func (*InspectOAuthTokenGrantRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InspectOAuthTokenGrantRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// InspectOAuthTokenGrantResponse is return value of InspectOAuthTokenGrant RPC.
type InspectOAuthTokenGrantResponse struct {
	// True if the token is valid.
	//
	// A token is valid if its signature is correct, it hasn't expired yet and
	// token server rules still allow it.
	Valid bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	// Human readable summary of why token is invalid.
	//
	// Summarizes the rest of the fields of this struct. Set only if 'valid' is
	// false.
	InvalidityReason string `protobuf:"bytes,2,opt,name=invalidity_reason,json=invalidityReason" json:"invalidity_reason,omitempty"`
	// True if the token signature was verified.
	//
	// It means the token was generated by the token server and its body is not
	// a garbage. Note that a token can be correctly signed, but invalid (if it
	// has expired).
	//
	// If 'signed' is false, the fields below may (or may not) be a garbage.
	//
	// The token server uses private keys managed by Google Cloud Platform, they
	// are constantly being rotated and "old" signatures become invalid over time
	// (when corresponding keys are rotated out of existence).
	//
	// If 'signed' is false, use the rest of the response only as FYI, possibly
	// invalid or even maliciously constructed.
	Signed bool `protobuf:"varint,3,opt,name=signed" json:"signed,omitempty"`
	// True if the token signature was verified and token hasn't expired yet.
	//
	// We use "non_" prefix to make default 'false' value safer.
	NonExpired bool `protobuf:"varint,4,opt,name=non_expired,json=nonExpired" json:"non_expired,omitempty"`
	// ID of a token server private key used to sign the token.
	SigningKeyId string `protobuf:"bytes,5,opt,name=signing_key_id,json=signingKeyId" json:"signing_key_id,omitempty"`
	// The deserialized token body.
	//
	// May be empty if token was malformed and couldn't be deserialized.
	TokenBody *tokenserver1.OAuthTokenGrantBody `protobuf:"bytes,6,opt,name=token_body,json=tokenBody" json:"token_body,omitempty"`
	// The service_accounts.cfg rule that governs the service account usage.
	//
	// May be present even if the token is not allowed by it.
	MatchingRule *ServiceAccountRule `protobuf:"bytes,7,opt,name=matching_rule,json=matchingRule" json:"matching_rule,omitempty"`
	// True if current service_accounts.cfg rules allow this token.
	AllowedByRules bool `protobuf:"varint,8,opt,name=allowed_by_rules,json=allowedByRules" json:"allowed_by_rules,omitempty"`
}

func (m *InspectOAuthTokenGrantResponse) Reset()                    { *m = InspectOAuthTokenGrantResponse{} }
func (m *InspectOAuthTokenGrantResponse) String() string            { return proto.CompactTextString(m) }
func (*InspectOAuthTokenGrantResponse) ProtoMessage()               {}
func (*InspectOAuthTokenGrantResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *InspectOAuthTokenGrantResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *InspectOAuthTokenGrantResponse) GetInvalidityReason() string {
	if m != nil {
		return m.InvalidityReason
	}
	return ""
}

func (m *InspectOAuthTokenGrantResponse) GetSigned() bool {
	if m != nil {
		return m.Signed
	}
	return false
}

func (m *InspectOAuthTokenGrantResponse) GetNonExpired() bool {
	if m != nil {
		return m.NonExpired
	}
	return false
}

func (m *InspectOAuthTokenGrantResponse) GetSigningKeyId() string {
	if m != nil {
		return m.SigningKeyId
	}
	return ""
}

func (m *InspectOAuthTokenGrantResponse) GetTokenBody() *tokenserver1.OAuthTokenGrantBody {
	if m != nil {
		return m.TokenBody
	}
	return nil
}

func (m *InspectOAuthTokenGrantResponse) GetMatchingRule() *ServiceAccountRule {
	if m != nil {
		return m.MatchingRule
	}
	return nil
}

func (m *InspectOAuthTokenGrantResponse) GetAllowedByRules() bool {
	if m != nil {
		return m.AllowedByRules
	}
	return false
}

func init() {
	proto.RegisterType((*ImportedConfigs)(nil), "tokenserver.admin.ImportedConfigs")
	proto.RegisterType((*InspectMachineTokenRequest)(nil), "tokenserver.admin.InspectMachineTokenRequest")
	proto.RegisterType((*InspectMachineTokenResponse)(nil), "tokenserver.admin.InspectMachineTokenResponse")
	proto.RegisterType((*InspectDelegationTokenRequest)(nil), "tokenserver.admin.InspectDelegationTokenRequest")
	proto.RegisterType((*InspectDelegationTokenResponse)(nil), "tokenserver.admin.InspectDelegationTokenResponse")
	proto.RegisterType((*InspectOAuthTokenGrantRequest)(nil), "tokenserver.admin.InspectOAuthTokenGrantRequest")
	proto.RegisterType((*InspectOAuthTokenGrantResponse)(nil), "tokenserver.admin.InspectOAuthTokenGrantResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Admin service

type AdminClient interface {
	// ImportCAConfigs makes the server read 'tokenserver.cfg'.
	ImportCAConfigs(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ImportedConfigs, error)
	// ImportDelegationConfigs makes the server read 'delegation.cfg'.
	ImportDelegationConfigs(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ImportedConfigs, error)
	// ImportServiceAccountsConfigs makes the server read 'service_accounts.cfg'.
	ImportServiceAccountsConfigs(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ImportedConfigs, error)
	// InspectMachineToken decodes a machine token and verifies it is valid.
	//
	// It verifies the token was signed by a private key of the token server and
	// checks token's expiration time and revocation status.
	//
	// It tries to give as much information about the token and its status as
	// possible (e.g. it checks for revocation status even if token is already
	// expired).
	//
	// Administrators can use this call to debug issues with tokens.
	//
	// Returns:
	//   InspectMachineTokenResponse for tokens of supported kind.
	//   grpc.InvalidArgument error for unsupported token kind.
	//   grpc.Internal error for transient errors.
	InspectMachineToken(ctx context.Context, in *InspectMachineTokenRequest, opts ...grpc.CallOption) (*InspectMachineTokenResponse, error)
	// InspectDelegationToken decodes a delegation token and verifies it is valid.
	//
	// It verifies the token was signed by a private key of the token server and
	// checks token's expiration time.
	//
	// It tries to give as much information about the token and its status as
	// possible (e.g. attempts to decode the body even if the signing key has been
	// rotated already).
	//
	// Administrators can use this call to debug issues with tokens.
	//
	// Returns:
	//   InspectDelegationTokenResponse for tokens of supported kind.
	//   grpc.InvalidArgument error for unsupported token kind.
	//   grpc.Internal error for transient errors.
	InspectDelegationToken(ctx context.Context, in *InspectDelegationTokenRequest, opts ...grpc.CallOption) (*InspectDelegationTokenResponse, error)
	// InspectOAuthTokenGrant decodes OAuth token grant and verifies it is valid.
	//
	// It verifies the token was signed by a private key of the token server and
	// checks token's expiration time.
	//
	// It tries to give as much information about the token and its status as
	// possible (e.g. attempts to decode the body even if the signing key has been
	// rotated already).
	//
	// Administrators can use this call to debug issues with tokens.
	//
	// Returns:
	//   InspectOAuthTokenGrantResponse for tokens of supported kind.
	//   grpc.InvalidArgument error for unsupported token kind.
	//   grpc.Internal error for transient errors.
	InspectOAuthTokenGrant(ctx context.Context, in *InspectOAuthTokenGrantRequest, opts ...grpc.CallOption) (*InspectOAuthTokenGrantResponse, error)
}
type adminPRPCClient struct {
	client *prpc.Client
}

func NewAdminPRPCClient(client *prpc.Client) AdminClient {
	return &adminPRPCClient{client}
}

func (c *adminPRPCClient) ImportCAConfigs(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ImportedConfigs, error) {
	out := new(ImportedConfigs)
	err := c.client.Call(ctx, "tokenserver.admin.Admin", "ImportCAConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPRPCClient) ImportDelegationConfigs(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ImportedConfigs, error) {
	out := new(ImportedConfigs)
	err := c.client.Call(ctx, "tokenserver.admin.Admin", "ImportDelegationConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPRPCClient) ImportServiceAccountsConfigs(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ImportedConfigs, error) {
	out := new(ImportedConfigs)
	err := c.client.Call(ctx, "tokenserver.admin.Admin", "ImportServiceAccountsConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPRPCClient) InspectMachineToken(ctx context.Context, in *InspectMachineTokenRequest, opts ...grpc.CallOption) (*InspectMachineTokenResponse, error) {
	out := new(InspectMachineTokenResponse)
	err := c.client.Call(ctx, "tokenserver.admin.Admin", "InspectMachineToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPRPCClient) InspectDelegationToken(ctx context.Context, in *InspectDelegationTokenRequest, opts ...grpc.CallOption) (*InspectDelegationTokenResponse, error) {
	out := new(InspectDelegationTokenResponse)
	err := c.client.Call(ctx, "tokenserver.admin.Admin", "InspectDelegationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPRPCClient) InspectOAuthTokenGrant(ctx context.Context, in *InspectOAuthTokenGrantRequest, opts ...grpc.CallOption) (*InspectOAuthTokenGrantResponse, error) {
	out := new(InspectOAuthTokenGrantResponse)
	err := c.client.Call(ctx, "tokenserver.admin.Admin", "InspectOAuthTokenGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) ImportCAConfigs(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ImportedConfigs, error) {
	out := new(ImportedConfigs)
	err := grpc.Invoke(ctx, "/tokenserver.admin.Admin/ImportCAConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ImportDelegationConfigs(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ImportedConfigs, error) {
	out := new(ImportedConfigs)
	err := grpc.Invoke(ctx, "/tokenserver.admin.Admin/ImportDelegationConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ImportServiceAccountsConfigs(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ImportedConfigs, error) {
	out := new(ImportedConfigs)
	err := grpc.Invoke(ctx, "/tokenserver.admin.Admin/ImportServiceAccountsConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) InspectMachineToken(ctx context.Context, in *InspectMachineTokenRequest, opts ...grpc.CallOption) (*InspectMachineTokenResponse, error) {
	out := new(InspectMachineTokenResponse)
	err := grpc.Invoke(ctx, "/tokenserver.admin.Admin/InspectMachineToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) InspectDelegationToken(ctx context.Context, in *InspectDelegationTokenRequest, opts ...grpc.CallOption) (*InspectDelegationTokenResponse, error) {
	out := new(InspectDelegationTokenResponse)
	err := grpc.Invoke(ctx, "/tokenserver.admin.Admin/InspectDelegationToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) InspectOAuthTokenGrant(ctx context.Context, in *InspectOAuthTokenGrantRequest, opts ...grpc.CallOption) (*InspectOAuthTokenGrantResponse, error) {
	out := new(InspectOAuthTokenGrantResponse)
	err := grpc.Invoke(ctx, "/tokenserver.admin.Admin/InspectOAuthTokenGrant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Admin service

type AdminServer interface {
	// ImportCAConfigs makes the server read 'tokenserver.cfg'.
	ImportCAConfigs(context.Context, *google_protobuf.Empty) (*ImportedConfigs, error)
	// ImportDelegationConfigs makes the server read 'delegation.cfg'.
	ImportDelegationConfigs(context.Context, *google_protobuf.Empty) (*ImportedConfigs, error)
	// ImportServiceAccountsConfigs makes the server read 'service_accounts.cfg'.
	ImportServiceAccountsConfigs(context.Context, *google_protobuf.Empty) (*ImportedConfigs, error)
	// InspectMachineToken decodes a machine token and verifies it is valid.
	//
	// It verifies the token was signed by a private key of the token server and
	// checks token's expiration time and revocation status.
	//
	// It tries to give as much information about the token and its status as
	// possible (e.g. it checks for revocation status even if token is already
	// expired).
	//
	// Administrators can use this call to debug issues with tokens.
	//
	// Returns:
	//   InspectMachineTokenResponse for tokens of supported kind.
	//   grpc.InvalidArgument error for unsupported token kind.
	//   grpc.Internal error for transient errors.
	InspectMachineToken(context.Context, *InspectMachineTokenRequest) (*InspectMachineTokenResponse, error)
	// InspectDelegationToken decodes a delegation token and verifies it is valid.
	//
	// It verifies the token was signed by a private key of the token server and
	// checks token's expiration time.
	//
	// It tries to give as much information about the token and its status as
	// possible (e.g. attempts to decode the body even if the signing key has been
	// rotated already).
	//
	// Administrators can use this call to debug issues with tokens.
	//
	// Returns:
	//   InspectDelegationTokenResponse for tokens of supported kind.
	//   grpc.InvalidArgument error for unsupported token kind.
	//   grpc.Internal error for transient errors.
	InspectDelegationToken(context.Context, *InspectDelegationTokenRequest) (*InspectDelegationTokenResponse, error)
	// InspectOAuthTokenGrant decodes OAuth token grant and verifies it is valid.
	//
	// It verifies the token was signed by a private key of the token server and
	// checks token's expiration time.
	//
	// It tries to give as much information about the token and its status as
	// possible (e.g. attempts to decode the body even if the signing key has been
	// rotated already).
	//
	// Administrators can use this call to debug issues with tokens.
	//
	// Returns:
	//   InspectOAuthTokenGrantResponse for tokens of supported kind.
	//   grpc.InvalidArgument error for unsupported token kind.
	//   grpc.Internal error for transient errors.
	InspectOAuthTokenGrant(context.Context, *InspectOAuthTokenGrantRequest) (*InspectOAuthTokenGrantResponse, error)
}

func RegisterAdminServer(s prpc.Registrar, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_ImportCAConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ImportCAConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenserver.admin.Admin/ImportCAConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ImportCAConfigs(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ImportDelegationConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ImportDelegationConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenserver.admin.Admin/ImportDelegationConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ImportDelegationConfigs(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ImportServiceAccountsConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ImportServiceAccountsConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenserver.admin.Admin/ImportServiceAccountsConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ImportServiceAccountsConfigs(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_InspectMachineToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectMachineTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).InspectMachineToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenserver.admin.Admin/InspectMachineToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).InspectMachineToken(ctx, req.(*InspectMachineTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_InspectDelegationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectDelegationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).InspectDelegationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenserver.admin.Admin/InspectDelegationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).InspectDelegationToken(ctx, req.(*InspectDelegationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_InspectOAuthTokenGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectOAuthTokenGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).InspectOAuthTokenGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenserver.admin.Admin/InspectOAuthTokenGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).InspectOAuthTokenGrant(ctx, req.(*InspectOAuthTokenGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tokenserver.admin.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportCAConfigs",
			Handler:    _Admin_ImportCAConfigs_Handler,
		},
		{
			MethodName: "ImportDelegationConfigs",
			Handler:    _Admin_ImportDelegationConfigs_Handler,
		},
		{
			MethodName: "ImportServiceAccountsConfigs",
			Handler:    _Admin_ImportServiceAccountsConfigs_Handler,
		},
		{
			MethodName: "InspectMachineToken",
			Handler:    _Admin_InspectMachineToken_Handler,
		},
		{
			MethodName: "InspectDelegationToken",
			Handler:    _Admin_InspectDelegationToken_Handler,
		},
		{
			MethodName: "InspectOAuthTokenGrant",
			Handler:    _Admin_InspectOAuthTokenGrant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/luci/luci-go/tokenserver/api/admin/v1/admin.proto",
}

func init() {
	proto.RegisterFile("github.com/luci/luci-go/tokenserver/api/admin/v1/admin.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x41, 0x4f, 0xdb, 0x4a,
	0x10, 0x7e, 0xe1, 0x91, 0xbc, 0xb0, 0xc9, 0xe3, 0xc1, 0x3e, 0x44, 0xdd, 0x50, 0xda, 0x28, 0x6a,
	0x25, 0xa4, 0x0a, 0xbb, 0xa4, 0xe2, 0x54, 0x2a, 0x14, 0x28, 0x2a, 0xb4, 0xa2, 0x95, 0x0c, 0xbd,
	0xf4, 0x62, 0x39, 0xf6, 0xe0, 0xac, 0xb0, 0x77, 0x5d, 0xef, 0x3a, 0xad, 0x0f, 0x3d, 0xf5, 0x87,
	0xf6, 0x77, 0xf4, 0x50, 0xa9, 0xf2, 0xae, 0x9d, 0x38, 0x89, 0x13, 0x81, 0xc4, 0x81, 0x8b, 0xb5,
	0x3b, 0x3b, 0xdf, 0x37, 0xb3, 0x33, 0xdf, 0x8e, 0xd1, 0x81, 0x47, 0xc4, 0x20, 0xee, 0xeb, 0x0e,
	0x0b, 0x0c, 0x3f, 0x76, 0x88, 0xfc, 0xec, 0x7a, 0xcc, 0x10, 0xec, 0x1a, 0x28, 0x87, 0x68, 0x08,
	0x91, 0x61, 0x87, 0xc4, 0xb0, 0xdd, 0x80, 0x50, 0x63, 0xb8, 0xa7, 0x16, 0x7a, 0x18, 0x31, 0xc1,
	0xf0, 0x7a, 0xc1, 0x4b, 0x97, 0x07, 0xad, 0x2d, 0x8f, 0x31, 0xcf, 0x07, 0x43, 0x3a, 0xf4, 0xe3,
	0x2b, 0x03, 0x82, 0x50, 0x24, 0xca, 0xbf, 0x75, 0x3a, 0x2f, 0x5a, 0x1e, 0x28, 0x16, 0x03, 0xc3,
	0x05, 0x1f, 0x3c, 0x5b, 0x10, 0x46, 0x8d, 0x00, 0x38, 0xb7, 0x3d, 0xe0, 0x05, 0x5b, 0xc6, 0xf4,
	0xfa, 0xd6, 0x79, 0x3b, 0x8c, 0x5e, 0x11, 0x2f, 0x83, 0xbf, 0xba, 0x29, 0x3c, 0xb0, 0x9d, 0x01,
	0xa1, 0x60, 0x49, 0x7b, 0x06, 0x3e, 0xbc, 0x29, 0x98, 0xa5, 0xf7, 0x51, 0x50, 0xcb, 0x8b, 0x6c,
	0x2a, 0x14, 0x41, 0x67, 0x17, 0xfd, 0x77, 0x16, 0x84, 0x2c, 0x12, 0xe0, 0x1e, 0xcb, 0xac, 0x38,
	0x6e, 0xa1, 0x7a, 0x04, 0x43, 0xc2, 0x09, 0xa3, 0x5a, 0xa5, 0x5d, 0xd9, 0x59, 0x31, 0x47, 0xfb,
	0x4e, 0x88, 0x5a, 0x67, 0x94, 0x87, 0xe0, 0x88, 0x73, 0x95, 0xcd, 0x65, 0xca, 0x68, 0xc2, 0x97,
	0x18, 0xb8, 0xc0, 0x07, 0x08, 0xa9, 0x08, 0x22, 0x09, 0x41, 0x62, 0x57, 0xbb, 0xdb, 0x7a, 0xb1,
	0x31, 0x45, 0xd4, 0x65, 0x12, 0x82, 0xb9, 0x22, 0xf2, 0x25, 0xde, 0x40, 0x55, 0xb9, 0xd1, 0x96,
	0x64, 0x50, 0xb5, 0xe9, 0xfc, 0x5c, 0x42, 0x5b, 0xa5, 0x21, 0x79, 0xc8, 0x28, 0x97, 0xa8, 0xa1,
	0xed, 0x13, 0x57, 0x86, 0xab, 0x9b, 0x6a, 0x83, 0x9f, 0xa3, 0x75, 0x42, 0xe5, 0x92, 0x88, 0xc4,
	0x8a, 0xc0, 0xe6, 0x2c, 0xe7, 0x5d, 0x1b, 0x1f, 0x98, 0xd2, 0x8e, 0x37, 0x51, 0x8d, 0x13, 0x8f,
	0x82, 0xab, 0xfd, 0x2d, 0x39, 0xb2, 0x1d, 0x7e, 0x82, 0x1a, 0x94, 0x51, 0x0b, 0xbe, 0x85, 0x24,
	0x02, 0x57, 0x5b, 0x96, 0x87, 0x88, 0x32, 0x7a, 0xa2, 0x2c, 0xb9, 0x43, 0x04, 0x43, 0x76, 0x0d,
	0xae, 0x56, 0x1d, 0x39, 0x98, 0xca, 0x82, 0x9f, 0xa2, 0xd5, 0x94, 0x8b, 0x50, 0xcf, 0xba, 0x86,
	0xc4, 0x22, 0xae, 0x56, 0x93, 0x39, 0x34, 0x33, 0xeb, 0x7b, 0x48, 0xce, 0x5c, 0xdc, 0x46, 0x4d,
	0x07, 0x22, 0x61, 0x39, 0xb6, 0x45, 0xed, 0x00, 0xb4, 0x7f, 0xa4, 0x0f, 0x4a, 0x6d, 0xc7, 0xf6,
	0x07, 0x3b, 0x00, 0x7c, 0x8e, 0x70, 0xda, 0x58, 0x6b, 0x42, 0x02, 0xda, 0x46, 0xbb, 0xb2, 0xd3,
	0x58, 0x50, 0xe0, 0x23, 0xe6, 0x26, 0xa7, 0x7f, 0x99, 0x6b, 0x29, 0x74, 0xc2, 0xde, 0x2c, 0xf6,
	0xa9, 0xb3, 0x8f, 0xb6, 0xb3, 0x02, 0xbf, 0x19, 0x49, 0x7b, 0xa2, 0xad, 0xa3, 0xc6, 0x54, 0x8a,
	0x8d, 0xf9, 0xb1, 0x84, 0x1e, 0xcf, 0xc3, 0xdd, 0x83, 0xde, 0xec, 0xa3, 0x3a, 0xd0, 0x21, 0xf8,
	0x2c, 0x04, 0xd9, 0x98, 0x46, 0xf7, 0xa1, 0x9e, 0xbf, 0x61, 0x7d, 0x3a, 0xe1, 0x91, 0x2b, 0xd6,
	0x51, 0x9d, 0xc7, 0x7d, 0x75, 0xdd, 0x9a, 0x84, 0xe1, 0x31, 0xec, 0x22, 0x3b, 0x31, 0x47, 0x3e,
	0x85, 0xe2, 0x7d, 0xec, 0xc5, 0x62, 0x20, 0xe9, 0xde, 0xa6, 0xef, 0x6b, 0x71, 0xf1, 0x7e, 0x8d,
	0x8b, 0x37, 0x83, 0xbb, 0x07, 0xc5, 0x9b, 0xd5, 0x6d, 0xb5, 0x44, 0xb7, 0x87, 0xb9, 0x8c, 0xfa,
	0xcc, 0x4d, 0xb2, 0x6a, 0xb5, 0x27, 0xd4, 0x38, 0x75, 0xb7, 0x54, 0x90, 0xd9, 0x8b, 0x4f, 0x97,
	0xf8, 0x1d, 0xfa, 0x37, 0xb0, 0x45, 0x2a, 0x4c, 0xcf, 0x8a, 0x62, 0x5f, 0x29, 0xbf, 0xd1, 0x7d,
	0xa6, 0xcf, 0xcc, 0x72, 0xfd, 0x02, 0xa2, 0x21, 0x71, 0xa0, 0xe7, 0x38, 0x2c, 0xa6, 0xc2, 0x8c,
	0x7d, 0x30, 0x9b, 0x39, 0x36, 0xdd, 0xe1, 0x1d, 0xb4, 0x66, 0xfb, 0x3e, 0xfb, 0x0a, 0xae, 0xd5,
	0x4f, 0x24, 0x1b, 0xd7, 0xea, 0xf2, 0x62, 0xab, 0x99, 0xfd, 0x28, 0x49, 0x1d, 0x79, 0xf7, 0xf7,
	0x32, 0xaa, 0xf6, 0x52, 0x52, 0x7c, 0x9e, 0x0f, 0xbf, 0xe3, 0x5e, 0x3e, 0xfc, 0x36, 0x75, 0xf5,
	0xd3, 0xd0, 0xf3, 0x9f, 0x86, 0x7e, 0x92, 0xfe, 0x34, 0x5a, 0x9d, 0x92, 0x9c, 0xa6, 0x07, 0xe7,
	0x27, 0xf4, 0x40, 0x99, 0xc6, 0xf2, 0xba, 0x0b, 0xda, 0xcf, 0xe8, 0x91, 0x32, 0x4d, 0xd6, 0x80,
	0xdf, 0x05, 0xb7, 0x40, 0xff, 0x97, 0x0c, 0x57, 0xbc, 0x5b, 0x06, 0x9d, 0x3b, 0xf7, 0x5b, 0xfa,
	0x4d, 0xdd, 0x33, 0x69, 0x7f, 0x47, 0x9b, 0xe5, 0x93, 0x03, 0xbf, 0x98, 0xcf, 0x54, 0x3e, 0x9c,
	0x5a, 0x7b, 0xb7, 0x40, 0xcc, 0x84, 0x9f, 0xd2, 0xe7, 0xa2, 0xf0, 0xe5, 0xcf, 0x7b, 0x51, 0xf8,
	0x39, 0x0f, 0xbb, 0x5f, 0x93, 0x7d, 0x7a, 0xf9, 0x27, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xfc, 0xfe,
	0x18, 0xf0, 0x08, 0x00, 0x00,
}
