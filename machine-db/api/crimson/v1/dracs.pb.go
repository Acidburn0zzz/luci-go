// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/machine-db/api/crimson/v1/dracs.proto

package crimson

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A DRAC in the database.
type DRAC struct {
	// The name of this DRAC on the network. With VLAN, uniquely identifies this DRAC.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The machine this DRAC belongs to. Uniquely identifies this DRAC.
	Machine string `protobuf:"bytes,2,opt,name=machine" json:"machine,omitempty"`
	// The IPv4 address associated with this DRAC.
	Ipv4 string `protobuf:"bytes,3,opt,name=ipv4" json:"ipv4,omitempty"`
	// The VLAN this DRAC belongs to.
	// When creating a DRAC, omit this field. It will be inferred from the IPv4 address.
	Vlan int64 `protobuf:"varint,4,opt,name=vlan" json:"vlan,omitempty"`
}

func (m *DRAC) Reset()                    { *m = DRAC{} }
func (m *DRAC) String() string            { return proto.CompactTextString(m) }
func (*DRAC) ProtoMessage()               {}
func (*DRAC) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *DRAC) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DRAC) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

func (m *DRAC) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *DRAC) GetVlan() int64 {
	if m != nil {
		return m.Vlan
	}
	return 0
}

// A request to create a new DRAC in the database.
type CreateDRACRequest struct {
	// The DRAC to create in the database.
	Drac *DRAC `protobuf:"bytes,1,opt,name=drac" json:"drac,omitempty"`
}

func (m *CreateDRACRequest) Reset()                    { *m = CreateDRACRequest{} }
func (m *CreateDRACRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDRACRequest) ProtoMessage()               {}
func (*CreateDRACRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CreateDRACRequest) GetDrac() *DRAC {
	if m != nil {
		return m.Drac
	}
	return nil
}

// A request to list DRACs in the database.
type ListDRACsRequest struct {
	// The names of DRACs to get.
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	// The machines to filter retrieved DRACs on.
	Machines []string `protobuf:"bytes,2,rep,name=machines" json:"machines,omitempty"`
	// The IPv4 addresses to filter returned DRACs on.
	Ipv4S []string `protobuf:"bytes,3,rep,name=ipv4s" json:"ipv4s,omitempty"`
	// The VLANs to filter returned DRACs on.
	Vlans []int64 `protobuf:"varint,4,rep,packed,name=vlans" json:"vlans,omitempty"`
}

func (m *ListDRACsRequest) Reset()                    { *m = ListDRACsRequest{} }
func (m *ListDRACsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDRACsRequest) ProtoMessage()               {}
func (*ListDRACsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *ListDRACsRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *ListDRACsRequest) GetMachines() []string {
	if m != nil {
		return m.Machines
	}
	return nil
}

func (m *ListDRACsRequest) GetIpv4S() []string {
	if m != nil {
		return m.Ipv4S
	}
	return nil
}

func (m *ListDRACsRequest) GetVlans() []int64 {
	if m != nil {
		return m.Vlans
	}
	return nil
}

// A response containing a list of DRACs in the database.
type ListDRACsResponse struct {
	// The DRACs matching this request.
	Dracs []*DRAC `protobuf:"bytes,1,rep,name=dracs" json:"dracs,omitempty"`
}

func (m *ListDRACsResponse) Reset()                    { *m = ListDRACsResponse{} }
func (m *ListDRACsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListDRACsResponse) ProtoMessage()               {}
func (*ListDRACsResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *ListDRACsResponse) GetDracs() []*DRAC {
	if m != nil {
		return m.Dracs
	}
	return nil
}

func init() {
	proto.RegisterType((*DRAC)(nil), "crimson.DRAC")
	proto.RegisterType((*CreateDRACRequest)(nil), "crimson.CreateDRACRequest")
	proto.RegisterType((*ListDRACsRequest)(nil), "crimson.ListDRACsRequest")
	proto.RegisterType((*ListDRACsResponse)(nil), "crimson.ListDRACsResponse")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/machine-db/api/crimson/v1/dracs.proto", fileDescriptor2)
}

var fileDescriptor2 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x95, 0x3a, 0xa5, 0xf4, 0x10, 0x12, 0xb5, 0x18, 0x2c, 0xa6, 0x10, 0x96, 0x2c, 0xc4,
	0xe2, 0x8f, 0x10, 0x62, 0x43, 0x65, 0x64, 0xf2, 0xcc, 0xe2, 0xa6, 0x56, 0x6b, 0xa9, 0x89, 0x83,
	0x2f, 0xcd, 0xe7, 0x47, 0x77, 0x4e, 0x11, 0x12, 0xdb, 0xbd, 0x77, 0xf7, 0xfc, 0x7e, 0x32, 0xbc,
	0xed, 0x42, 0xdd, 0xec, 0x63, 0x68, 0xfd, 0xb1, 0xad, 0x43, 0xdc, 0xe9, 0xc3, 0xb1, 0xf1, 0xba,
	0xb5, 0xcd, 0xde, 0x77, 0xee, 0x7e, 0xbb, 0xd1, 0xb6, 0xf7, 0xba, 0x89, 0xbe, 0xc5, 0xd0, 0xe9,
	0xf1, 0x41, 0x6f, 0xa3, 0x6d, 0xb0, 0xee, 0x63, 0x18, 0x82, 0x5c, 0x4c, 0x7e, 0xf9, 0x05, 0xf9,
	0x87, 0x79, 0x5f, 0x4b, 0x09, 0x79, 0x67, 0x5b, 0xa7, 0xb2, 0x22, 0xab, 0x96, 0x86, 0x67, 0xa9,
	0x60, 0x31, 0xbd, 0xa6, 0x66, 0x6c, 0x9f, 0x24, 0x5d, 0xfb, 0x7e, 0x7c, 0x56, 0x22, 0x5d, 0xd3,
	0x4c, 0xde, 0x78, 0xb0, 0x9d, 0xca, 0x8b, 0xac, 0x12, 0x86, 0xe7, 0xf2, 0x05, 0x56, 0xeb, 0xe8,
	0xec, 0xe0, 0xa8, 0xc3, 0xb8, 0xef, 0xa3, 0xc3, 0x41, 0xde, 0x42, 0x4e, 0x28, 0x5c, 0x75, 0xf1,
	0x78, 0x59, 0x4f, 0x28, 0x35, 0xdf, 0xf0, 0xaa, 0xec, 0xe1, 0xea, 0xd3, 0xe3, 0x40, 0x0e, 0x9e,
	0x62, 0xd7, 0x30, 0x27, 0x2a, 0x54, 0x59, 0x21, 0xaa, 0xa5, 0x49, 0x42, 0xde, 0xc0, 0xf9, 0x04,
	0x85, 0x6a, 0xc6, 0x8b, 0x5f, 0x4d, 0x09, 0x22, 0x43, 0x25, 0x52, 0x82, 0x05, 0xb9, 0xc4, 0x86,
	0x2a, 0x2f, 0x44, 0x25, 0x4c, 0x12, 0xe5, 0x2b, 0xac, 0xfe, 0x34, 0x62, 0x1f, 0x3a, 0x74, 0xf2,
	0x0e, 0xe6, 0xfc, 0x69, 0x5c, 0xf9, 0x0f, 0x35, 0xed, 0x36, 0x67, 0xfc, 0xa3, 0x4f, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x7b, 0xa2, 0x7a, 0x2b, 0x8f, 0x01, 0x00, 0x00,
}
