// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/machine-db/api/crimson/v1/oses.proto

package crimson

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "go.chromium.org/luci/machine-db/api/common/v1"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// An operating system in the database.
type OS struct {
	// The name of this operating system. Uniquely identifies this operating system.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// A description of this operating system.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// The state of this operating system.
	State common.State `protobuf:"varint,3,opt,name=state,enum=common.State" json:"state,omitempty"`
}

func (m *OS) Reset()                    { *m = OS{} }
func (m *OS) String() string            { return proto.CompactTextString(m) }
func (*OS) ProtoMessage()               {}
func (*OS) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *OS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OS) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *OS) GetState() common.State {
	if m != nil {
		return m.State
	}
	return common.State_STATE_UNSPECIFIED
}

// A request to list operating systems in the database.
type ListOSesRequest struct {
	// The names of operating systems to retrieve.
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (m *ListOSesRequest) Reset()                    { *m = ListOSesRequest{} }
func (m *ListOSesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListOSesRequest) ProtoMessage()               {}
func (*ListOSesRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *ListOSesRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

// A response containing a list of operating systems in the database.
type ListOSesResponse struct {
	// The operating systems matching the request.
	Oses []*OS `protobuf:"bytes,1,rep,name=oses" json:"oses,omitempty"`
}

func (m *ListOSesResponse) Reset()                    { *m = ListOSesResponse{} }
func (m *ListOSesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListOSesResponse) ProtoMessage()               {}
func (*ListOSesResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *ListOSesResponse) GetOses() []*OS {
	if m != nil {
		return m.Oses
	}
	return nil
}

func init() {
	proto.RegisterType((*OS)(nil), "crimson.OS")
	proto.RegisterType((*ListOSesRequest)(nil), "crimson.ListOSesRequest")
	proto.RegisterType((*ListOSesResponse)(nil), "crimson.ListOSesResponse")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/machine-db/api/crimson/v1/oses.proto", fileDescriptor5)
}

var fileDescriptor5 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0xe9, 0xfe, 0x51, 0x76, 0x8a, 0x7f, 0x08, 0x1e, 0x8a, 0x17, 0x4b, 0x3d, 0xd8, 0x8b,
	0x09, 0xee, 0x9e, 0xf4, 0x33, 0x08, 0x85, 0xf4, 0x03, 0x48, 0x37, 0x1b, 0x76, 0x07, 0x4c, 0xa6,
	0x66, 0x52, 0x3f, 0xbf, 0x34, 0xad, 0xe8, 0x71, 0x6f, 0x33, 0xef, 0x3d, 0x7e, 0x8f, 0x07, 0xaf,
	0x47, 0x92, 0xe6, 0x14, 0xc8, 0xe1, 0xe0, 0x24, 0x85, 0xa3, 0xfa, 0x1c, 0x0c, 0x2a, 0xd7, 0x99,
	0x13, 0x7a, 0xfb, 0x7c, 0xd8, 0xab, 0xae, 0x47, 0x65, 0x02, 0x3a, 0x26, 0xaf, 0xbe, 0x5f, 0x14,
	0xb1, 0x65, 0xd9, 0x07, 0x8a, 0x24, 0x2e, 0x67, 0xf9, 0xfe, 0xed, 0x2c, 0x06, 0x39, 0x37, 0x21,
	0x38, 0x76, 0xf1, 0x17, 0x52, 0x7d, 0xc0, 0xa2, 0x69, 0x85, 0x80, 0x95, 0xef, 0x9c, 0x2d, 0xb2,
	0x32, 0xab, 0x37, 0x3a, 0xdd, 0xa2, 0x84, 0xfc, 0x60, 0xd9, 0x04, 0xec, 0x23, 0x92, 0x2f, 0x16,
	0xc9, 0xfa, 0x2f, 0x89, 0x47, 0x58, 0x27, 0x56, 0xb1, 0x2c, 0xb3, 0xfa, 0x7a, 0x7b, 0x25, 0xa7,
	0x0e, 0xd9, 0x8e, 0xa2, 0x9e, 0xbc, 0xea, 0x09, 0x6e, 0xde, 0x91, 0x63, 0xd3, 0x5a, 0xd6, 0xf6,
	0x6b, 0xb0, 0x1c, 0xc5, 0x1d, 0xac, 0xc7, 0x06, 0x2e, 0xb2, 0x72, 0x59, 0x6f, 0xf4, 0xf4, 0x54,
	0x3b, 0xb8, 0xfd, 0x0b, 0x72, 0x4f, 0x9e, 0xad, 0x78, 0x80, 0xd5, 0x38, 0x38, 0x05, 0xf3, 0x6d,
	0x2e, 0xe7, 0xc5, 0xb2, 0x69, 0x75, 0x32, 0xf6, 0x17, 0x69, 0xc5, 0xee, 0x27, 0x00, 0x00, 0xff,
	0xff, 0x52, 0x1f, 0xf3, 0xf1, 0x47, 0x01, 0x00, 0x00,
}
