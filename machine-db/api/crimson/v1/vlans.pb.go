// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/machine-db/api/crimson/v1/vlans.proto

package crimson

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "go.chromium.org/luci/machine-db/api/common/v1"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A VLAN in the database.
type VLAN struct {
	// The ID of this VLAN. Uniquely identifies this VLAN.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// An alias for this VLAN.
	Alias string `protobuf:"bytes,2,opt,name=alias" json:"alias,omitempty"`
	// A description of this VLAN.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// The state of this VLAN.
	State common.State `protobuf:"varint,4,opt,name=state,enum=common.State" json:"state,omitempty"`
}

func (m *VLAN) Reset()                    { *m = VLAN{} }
func (m *VLAN) String() string            { return proto.CompactTextString(m) }
func (*VLAN) ProtoMessage()               {}
func (*VLAN) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

func (m *VLAN) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VLAN) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *VLAN) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *VLAN) GetState() common.State {
	if m != nil {
		return m.State
	}
	return common.State_STATE_UNSPECIFIED
}

// A request to list VLANs in the database.
type ListVLANsRequest struct {
	// The IDs of VLANs to retrieve.
	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
	// The aliases of VLANs to retrieve.
	Aliases []string `protobuf:"bytes,2,rep,name=aliases" json:"aliases,omitempty"`
}

func (m *ListVLANsRequest) Reset()                    { *m = ListVLANsRequest{} }
func (m *ListVLANsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVLANsRequest) ProtoMessage()               {}
func (*ListVLANsRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

func (m *ListVLANsRequest) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ListVLANsRequest) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

// A response containing a list of VLANs in the database.
type ListVLANsResponse struct {
	// The VLANs matching the request.
	Vlans []*VLAN `protobuf:"bytes,1,rep,name=vlans" json:"vlans,omitempty"`
}

func (m *ListVLANsResponse) Reset()                    { *m = ListVLANsResponse{} }
func (m *ListVLANsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListVLANsResponse) ProtoMessage()               {}
func (*ListVLANsResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{2} }

func (m *ListVLANsResponse) GetVlans() []*VLAN {
	if m != nil {
		return m.Vlans
	}
	return nil
}

func init() {
	proto.RegisterType((*VLAN)(nil), "crimson.VLAN")
	proto.RegisterType((*ListVLANsRequest)(nil), "crimson.ListVLANsRequest")
	proto.RegisterType((*ListVLANsResponse)(nil), "crimson.ListVLANsResponse")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/machine-db/api/crimson/v1/vlans.proto", fileDescriptor11)
}

var fileDescriptor11 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x31, 0x6b, 0xf3, 0x30,
	0x10, 0x86, 0xb1, 0x95, 0x7c, 0x21, 0x17, 0xbe, 0x90, 0x8a, 0x0e, 0xa2, 0x93, 0x71, 0x17, 0x2f,
	0x95, 0x68, 0xbb, 0x94, 0x0e, 0x85, 0xee, 0xa1, 0x83, 0x0a, 0xdd, 0x15, 0x5b, 0x24, 0x07, 0x96,
	0xe5, 0xfa, 0xe4, 0xfc, 0xfe, 0x22, 0x29, 0x85, 0x8c, 0xdd, 0x7c, 0xef, 0x6b, 0x3d, 0x8f, 0x74,
	0xf0, 0x7a, 0xf4, 0xb2, 0x3d, 0x4d, 0xde, 0xe1, 0xec, 0xa4, 0x9f, 0x8e, 0xaa, 0x9f, 0x5b, 0x54,
	0xce, 0xb4, 0x27, 0x1c, 0xec, 0x43, 0x77, 0x50, 0x66, 0x44, 0xd5, 0x4e, 0xe8, 0xc8, 0x0f, 0xea,
	0xfc, 0xa8, 0xce, 0xbd, 0x19, 0x48, 0x8e, 0x93, 0x0f, 0x9e, 0xaf, 0x2e, 0xf9, 0xdd, 0xdf, 0x20,
	0xde, 0xb9, 0xcc, 0xa0, 0x60, 0x82, 0xbd, 0x40, 0x6a, 0x82, 0xc5, 0xd7, 0xfe, 0xfd, 0x83, 0x6f,
	0xa1, 0xc4, 0x4e, 0x14, 0x55, 0xd1, 0x30, 0x5d, 0x62, 0xc7, 0x6f, 0x61, 0x69, 0x7a, 0x34, 0x24,
	0xca, 0xaa, 0x68, 0xd6, 0x3a, 0x0f, 0xbc, 0x82, 0x4d, 0x67, 0xa9, 0x9d, 0x70, 0x0c, 0xe8, 0x07,
	0xc1, 0x52, 0x77, 0x1d, 0xf1, 0x7b, 0x58, 0x26, 0xbe, 0x58, 0x54, 0x45, 0xb3, 0x7d, 0xfa, 0x2f,
	0xb3, 0x57, 0x7e, 0xc6, 0x50, 0xe7, 0xae, 0x7e, 0x83, 0xdd, 0x1e, 0x29, 0x44, 0x31, 0x69, 0xfb,
	0x3d, 0x5b, 0x0a, 0x7c, 0x07, 0x0c, 0x3b, 0x12, 0x45, 0xc5, 0x1a, 0xa6, 0xe3, 0x27, 0x17, 0xb0,
	0x4a, 0x56, 0x1b, 0x2f, 0xc1, 0x9a, 0xb5, 0xfe, 0x1d, 0xeb, 0x17, 0xb8, 0xb9, 0x3a, 0x4f, 0xa3,
	0x1f, 0xc8, 0x46, 0x73, 0xda, 0x4e, 0x42, 0x6c, 0xa2, 0x39, 0xaf, 0x47, 0xc6, 0xdf, 0x74, 0xee,
	0x0e, 0xff, 0xd2, 0xab, 0x9f, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x16, 0x1f, 0x52, 0x81, 0x78,
	0x01, 0x00, 0x00,
}
