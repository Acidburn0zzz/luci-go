// Code generated by svcdec; DO NOT EDIT

package crimson

import (
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
)

type DecoratedCrimson struct {
	// Service is the service to decorate.
	Service CrimsonServer
	// Prelude is called for each method before forwarding the call to Service.
	// If Prelude returns an error, then the call is skipped and the error is
	// processed via the Postlude (if one is defined), or it is returned directly.
	Prelude func(c context.Context, methodName string, req proto.Message) (context.Context, error)
	// Postlude is called for each method after Service has processed the call, or
	// after the Prelude has returned an error. This takes the the Service's
	// response proto (which may be nil) and/or any error. The decorated
	// service will return the response (possibly mutated) and error that Postlude
	// returns.
	Postlude func(c context.Context, methodName string, rsp proto.Message, err error) error
}

func (s *DecoratedCrimson) ListDatacenters(c context.Context, req *ListDatacentersRequest) (rsp *ListDatacentersResponse, err error) {
	var newCtx context.Context
	if s.Prelude != nil {
		newCtx, err = s.Prelude(c, "ListDatacenters", req)
	}
	if err == nil {
		c = newCtx
		rsp, err = s.Service.ListDatacenters(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "ListDatacenters", rsp, err)
	}
	return
}

func (s *DecoratedCrimson) ListOSes(c context.Context, req *ListOSesRequest) (rsp *ListOSesResponse, err error) {
	var newCtx context.Context
	if s.Prelude != nil {
		newCtx, err = s.Prelude(c, "ListOSes", req)
	}
	if err == nil {
		c = newCtx
		rsp, err = s.Service.ListOSes(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "ListOSes", rsp, err)
	}
	return
}

func (s *DecoratedCrimson) ListPlatforms(c context.Context, req *ListPlatformsRequest) (rsp *ListPlatformsResponse, err error) {
	var newCtx context.Context
	if s.Prelude != nil {
		newCtx, err = s.Prelude(c, "ListPlatforms", req)
	}
	if err == nil {
		c = newCtx
		rsp, err = s.Service.ListPlatforms(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "ListPlatforms", rsp, err)
	}
	return
}

func (s *DecoratedCrimson) ListRacks(c context.Context, req *ListRacksRequest) (rsp *ListRacksResponse, err error) {
	var newCtx context.Context
	if s.Prelude != nil {
		newCtx, err = s.Prelude(c, "ListRacks", req)
	}
	if err == nil {
		c = newCtx
		rsp, err = s.Service.ListRacks(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "ListRacks", rsp, err)
	}
	return
}

func (s *DecoratedCrimson) ListSwitches(c context.Context, req *ListSwitchesRequest) (rsp *ListSwitchesResponse, err error) {
	var newCtx context.Context
	if s.Prelude != nil {
		newCtx, err = s.Prelude(c, "ListSwitches", req)
	}
	if err == nil {
		c = newCtx
		rsp, err = s.Service.ListSwitches(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "ListSwitches", rsp, err)
	}
	return
}

func (s *DecoratedCrimson) ListVLANs(c context.Context, req *ListVLANsRequest) (rsp *ListVLANsResponse, err error) {
	var newCtx context.Context
	if s.Prelude != nil {
		newCtx, err = s.Prelude(c, "ListVLANs", req)
	}
	if err == nil {
		c = newCtx
		rsp, err = s.Service.ListVLANs(c, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(c, "ListVLANs", rsp, err)
	}
	return
}
