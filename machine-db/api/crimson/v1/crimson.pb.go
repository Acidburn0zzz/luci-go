// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/machine-db/api/crimson/v1/crimson.proto

/*
Package crimson is a generated protocol buffer package.

It is generated from these files:
	go.chromium.org/luci/machine-db/api/crimson/v1/crimson.proto
	go.chromium.org/luci/machine-db/api/crimson/v1/datacenters.proto
	go.chromium.org/luci/machine-db/api/crimson/v1/hosts.proto
	go.chromium.org/luci/machine-db/api/crimson/v1/machines.proto
	go.chromium.org/luci/machine-db/api/crimson/v1/oses.proto
	go.chromium.org/luci/machine-db/api/crimson/v1/platforms.proto
	go.chromium.org/luci/machine-db/api/crimson/v1/racks.proto
	go.chromium.org/luci/machine-db/api/crimson/v1/switches.proto
	go.chromium.org/luci/machine-db/api/crimson/v1/vlans.proto

It has these top-level messages:
	DatacentersRequest
	Datacenter
	DatacentersResponse
	Host
	AddHostRequest
	AddHostResponse
	DeleteHostRequest
	DeleteHostResponse
	EditHostRequest
	EditHostResponse
	GetHostsRequest
	GetHostsResponse
	Machine
	AddMachineRequest
	AddMachineResponse
	DeleteMachineRequest
	DeleteMachineResponse
	EditMachineRequest
	EditMachineResponse
	GetMachinesRequest
	GetMachinesResponse
	OSesRequest
	OS
	OSesResponse
	PlatformsRequest
	Platform
	PlatformsResponse
	RacksRequest
	Rack
	RacksResponse
	SwitchesRequest
	Switch
	SwitchesResponse
	VLANsRequest
	VLAN
	VLANsResponse
*/
package crimson

import prpc "go.chromium.org/luci/grpc/prpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Crimson service

type CrimsonClient interface {
	// GetDatacenters retrieves datacenters.
	GetDatacenters(ctx context.Context, in *DatacentersRequest, opts ...grpc.CallOption) (*DatacentersResponse, error)
	// GetOSes retrieves operating systems.
	GetOSes(ctx context.Context, in *OSesRequest, opts ...grpc.CallOption) (*OSesResponse, error)
	// GetPlatforms retrieves platforms.
	GetPlatforms(ctx context.Context, in *PlatformsRequest, opts ...grpc.CallOption) (*PlatformsResponse, error)
	// GetRacks retrieves racks.
	GetRacks(ctx context.Context, in *RacksRequest, opts ...grpc.CallOption) (*RacksResponse, error)
	// GetSwitches retrieves switches.
	GetSwitches(ctx context.Context, in *SwitchesRequest, opts ...grpc.CallOption) (*SwitchesResponse, error)
	// GetVLANs retrieves vlans.
	GetVLANs(ctx context.Context, in *VLANsRequest, opts ...grpc.CallOption) (*VLANsResponse, error)
}
type crimsonPRPCClient struct {
	client *prpc.Client
}

func NewCrimsonPRPCClient(client *prpc.Client) CrimsonClient {
	return &crimsonPRPCClient{client}
}

func (c *crimsonPRPCClient) GetDatacenters(ctx context.Context, in *DatacentersRequest, opts ...grpc.CallOption) (*DatacentersResponse, error) {
	out := new(DatacentersResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "GetDatacenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) GetOSes(ctx context.Context, in *OSesRequest, opts ...grpc.CallOption) (*OSesResponse, error) {
	out := new(OSesResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "GetOSes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) GetPlatforms(ctx context.Context, in *PlatformsRequest, opts ...grpc.CallOption) (*PlatformsResponse, error) {
	out := new(PlatformsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "GetPlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) GetRacks(ctx context.Context, in *RacksRequest, opts ...grpc.CallOption) (*RacksResponse, error) {
	out := new(RacksResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "GetRacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) GetSwitches(ctx context.Context, in *SwitchesRequest, opts ...grpc.CallOption) (*SwitchesResponse, error) {
	out := new(SwitchesResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "GetSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) GetVLANs(ctx context.Context, in *VLANsRequest, opts ...grpc.CallOption) (*VLANsResponse, error) {
	out := new(VLANsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "GetVLANs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type crimsonClient struct {
	cc *grpc.ClientConn
}

func NewCrimsonClient(cc *grpc.ClientConn) CrimsonClient {
	return &crimsonClient{cc}
}

func (c *crimsonClient) GetDatacenters(ctx context.Context, in *DatacentersRequest, opts ...grpc.CallOption) (*DatacentersResponse, error) {
	out := new(DatacentersResponse)
	err := grpc.Invoke(ctx, "/crimson.Crimson/GetDatacenters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) GetOSes(ctx context.Context, in *OSesRequest, opts ...grpc.CallOption) (*OSesResponse, error) {
	out := new(OSesResponse)
	err := grpc.Invoke(ctx, "/crimson.Crimson/GetOSes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) GetPlatforms(ctx context.Context, in *PlatformsRequest, opts ...grpc.CallOption) (*PlatformsResponse, error) {
	out := new(PlatformsResponse)
	err := grpc.Invoke(ctx, "/crimson.Crimson/GetPlatforms", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) GetRacks(ctx context.Context, in *RacksRequest, opts ...grpc.CallOption) (*RacksResponse, error) {
	out := new(RacksResponse)
	err := grpc.Invoke(ctx, "/crimson.Crimson/GetRacks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) GetSwitches(ctx context.Context, in *SwitchesRequest, opts ...grpc.CallOption) (*SwitchesResponse, error) {
	out := new(SwitchesResponse)
	err := grpc.Invoke(ctx, "/crimson.Crimson/GetSwitches", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) GetVLANs(ctx context.Context, in *VLANsRequest, opts ...grpc.CallOption) (*VLANsResponse, error) {
	out := new(VLANsResponse)
	err := grpc.Invoke(ctx, "/crimson.Crimson/GetVLANs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Crimson service

type CrimsonServer interface {
	// GetDatacenters retrieves datacenters.
	GetDatacenters(context.Context, *DatacentersRequest) (*DatacentersResponse, error)
	// GetOSes retrieves operating systems.
	GetOSes(context.Context, *OSesRequest) (*OSesResponse, error)
	// GetPlatforms retrieves platforms.
	GetPlatforms(context.Context, *PlatformsRequest) (*PlatformsResponse, error)
	// GetRacks retrieves racks.
	GetRacks(context.Context, *RacksRequest) (*RacksResponse, error)
	// GetSwitches retrieves switches.
	GetSwitches(context.Context, *SwitchesRequest) (*SwitchesResponse, error)
	// GetVLANs retrieves vlans.
	GetVLANs(context.Context, *VLANsRequest) (*VLANsResponse, error)
}

func RegisterCrimsonServer(s prpc.Registrar, srv CrimsonServer) {
	s.RegisterService(&_Crimson_serviceDesc, srv)
}

func _Crimson_GetDatacenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatacentersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).GetDatacenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/GetDatacenters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).GetDatacenters(ctx, req.(*DatacentersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_GetOSes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OSesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).GetOSes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/GetOSes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).GetOSes(ctx, req.(*OSesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_GetPlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).GetPlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/GetPlatforms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).GetPlatforms(ctx, req.(*PlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_GetRacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).GetRacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/GetRacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).GetRacks(ctx, req.(*RacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_GetSwitches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).GetSwitches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/GetSwitches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).GetSwitches(ctx, req.(*SwitchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_GetVLANs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VLANsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).GetVLANs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/GetVLANs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).GetVLANs(ctx, req.(*VLANsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crimson_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crimson.Crimson",
	HandlerType: (*CrimsonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDatacenters",
			Handler:    _Crimson_GetDatacenters_Handler,
		},
		{
			MethodName: "GetOSes",
			Handler:    _Crimson_GetOSes_Handler,
		},
		{
			MethodName: "GetPlatforms",
			Handler:    _Crimson_GetPlatforms_Handler,
		},
		{
			MethodName: "GetRacks",
			Handler:    _Crimson_GetRacks_Handler,
		},
		{
			MethodName: "GetSwitches",
			Handler:    _Crimson_GetSwitches_Handler,
		},
		{
			MethodName: "GetVLANs",
			Handler:    _Crimson_GetVLANs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/machine-db/api/crimson/v1/crimson.proto",
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/machine-db/api/crimson/v1/crimson.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x5f, 0x4b, 0xc3, 0x30,
	0x14, 0xc5, 0x1f, 0x04, 0x27, 0x51, 0x7c, 0x08, 0x2a, 0xae, 0xfa, 0x15, 0x6c, 0x51, 0x41, 0x98,
	0xa8, 0xf8, 0x97, 0x3e, 0x28, 0x2a, 0x1b, 0xf8, 0x9e, 0x65, 0xd7, 0x35, 0xd8, 0x26, 0x35, 0xb9,
	0x9d, 0x1f, 0xc3, 0xaf, 0x2c, 0x6b, 0x73, 0xbb, 0x39, 0xfb, 0x12, 0xdf, 0x72, 0xcf, 0xbd, 0xbf,
	0x73, 0xe0, 0x84, 0x5d, 0x4c, 0x4d, 0x2c, 0x33, 0x6b, 0x0a, 0x55, 0x15, 0xb1, 0xb1, 0xd3, 0x24,
	0xaf, 0xa4, 0x4a, 0x0a, 0x21, 0x33, 0xa5, 0xe1, 0x68, 0x32, 0x4e, 0x44, 0xa9, 0x12, 0x69, 0x55,
	0xe1, 0x8c, 0x4e, 0x66, 0xc7, 0xf4, 0x8c, 0x4b, 0x6b, 0xd0, 0xf0, 0x9e, 0x1f, 0xa3, 0xeb, 0x40,
	0x9b, 0x89, 0x40, 0x21, 0x41, 0x23, 0x58, 0xd7, 0x58, 0x45, 0x83, 0x40, 0x07, 0xe3, 0x80, 0xd0,
	0xab, 0x40, 0xb4, 0xcc, 0x05, 0xbe, 0x1b, 0x5b, 0x10, 0x7f, 0x1e, 0xc8, 0x5b, 0x21, 0x3f, 0x88,
	0xbd, 0x0c, 0x64, 0xdd, 0x97, 0x42, 0x99, 0xc1, 0x7f, 0xa3, 0x67, 0xb9, 0xd0, 0x9e, 0x3d, 0xf9,
	0x5e, 0x63, 0xbd, 0xbb, 0x66, 0xc5, 0x1f, 0xd9, 0x76, 0x0a, 0x78, 0xbf, 0x68, 0x95, 0x1f, 0xc4,
	0xf4, 0x55, 0x4b, 0xea, 0x10, 0x3e, 0x2b, 0x70, 0x18, 0x1d, 0x76, 0x2f, 0x5d, 0x69, 0xb4, 0x03,
	0x7e, 0xc6, 0x7a, 0x29, 0xe0, 0xcb, 0x08, 0x1c, 0xdf, 0x69, 0x0f, 0xe7, 0x23, 0xe1, 0xbb, 0x2b,
	0xaa, 0xe7, 0x1e, 0xd8, 0x56, 0x0a, 0xf8, 0x4a, 0xed, 0xf2, 0x7e, 0x7b, 0xd6, 0x6a, 0xe4, 0x10,
	0x75, 0xad, 0xbc, 0xcd, 0x80, 0x6d, 0xa4, 0x80, 0xc3, 0x79, 0xc9, 0x7c, 0x91, 0x54, 0xcf, 0x84,
	0xef, 0xad, 0xca, 0x1e, 0xbd, 0x65, 0x9b, 0x29, 0xe0, 0xc8, 0x77, 0xcc, 0xf7, 0xdb, 0x33, 0x92,
	0xc8, 0xa0, 0xdf, 0xb1, 0xf9, 0x15, 0xff, 0xf6, 0x74, 0xf3, 0xbc, 0x1c, 0x5f, 0xcf, 0x7f, 0xe3,
	0xbd, 0xdc, 0xa0, 0xe3, 0xf5, 0xfa, 0x63, 0x4e, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x60, 0x9a,
	0x1f, 0x3c, 0x55, 0x03, 0x00, 0x00,
}
