// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/machine-db/api/crimson/v1/vms.proto

package crimson

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "google.golang.org/genproto/protobuf/field_mask"
import common "go.chromium.org/luci/machine-db/api/common/v1"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A VM in the database.
type VM struct {
	// The name of this VM on the network. With VLAN ID, uniquely identifies this VM.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The VLAN this VM belongs to. With hostname, uniquely identifies this VM.
	// When creating a VM, omit this field. It will be inferred from the IPv4 address.
	Vlan int64 `protobuf:"varint,2,opt,name=vlan" json:"vlan,omitempty"`
	// The physical host this VM is running on.
	Host string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	// The VLAN this VM's physical host belongs to.
	HostVlan int64 `protobuf:"varint,4,opt,name=host_vlan,json=hostVlan" json:"host_vlan,omitempty"`
	// The operating system running on this VM.
	Os string `protobuf:"bytes,5,opt,name=os" json:"os,omitempty"`
	// A description of this VM.
	Description string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	// The deployment ticket associated with this VM.
	DeploymentTicket string `protobuf:"bytes,7,opt,name=deployment_ticket,json=deploymentTicket" json:"deployment_ticket,omitempty"`
	// The IPv4 address associated with this host.
	Ipv4 string `protobuf:"bytes,8,opt,name=ipv4" json:"ipv4,omitempty"`
	// The state of this VM.
	State common.State `protobuf:"varint,9,opt,name=state,enum=common.State" json:"state,omitempty"`
}

func (m *VM) Reset()                    { *m = VM{} }
func (m *VM) String() string            { return proto.CompactTextString(m) }
func (*VM) ProtoMessage()               {}
func (*VM) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *VM) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VM) GetVlan() int64 {
	if m != nil {
		return m.Vlan
	}
	return 0
}

func (m *VM) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *VM) GetHostVlan() int64 {
	if m != nil {
		return m.HostVlan
	}
	return 0
}

func (m *VM) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *VM) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *VM) GetDeploymentTicket() string {
	if m != nil {
		return m.DeploymentTicket
	}
	return ""
}

func (m *VM) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *VM) GetState() common.State {
	if m != nil {
		return m.State
	}
	return common.State_STATE_UNSPECIFIED
}

// A request to create a new VM in the database.
type CreateVMRequest struct {
	// The VM to create in the database.
	Vm *VM `protobuf:"bytes,1,opt,name=vm" json:"vm,omitempty"`
}

func (m *CreateVMRequest) Reset()                    { *m = CreateVMRequest{} }
func (m *CreateVMRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVMRequest) ProtoMessage()               {}
func (*CreateVMRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *CreateVMRequest) GetVm() *VM {
	if m != nil {
		return m.Vm
	}
	return nil
}

// A request to list VMs in the database.
type ListVMsRequest struct {
	// The names of VMs to get.
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	// The VLANs to filter retrieved VMs on.
	Vlans []int64 `protobuf:"varint,2,rep,packed,name=vlans" json:"vlans,omitempty"`
	// The IPv4 addresses to filter returned VMs on.
	Ipv4S []string `protobuf:"bytes,3,rep,name=ipv4s" json:"ipv4s,omitempty"`
}

func (m *ListVMsRequest) Reset()                    { *m = ListVMsRequest{} }
func (m *ListVMsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVMsRequest) ProtoMessage()               {}
func (*ListVMsRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

func (m *ListVMsRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *ListVMsRequest) GetVlans() []int64 {
	if m != nil {
		return m.Vlans
	}
	return nil
}

func (m *ListVMsRequest) GetIpv4S() []string {
	if m != nil {
		return m.Ipv4S
	}
	return nil
}

// A response containing a list of VMs in the database.
type ListVMsResponse struct {
	// The VMs matching this request.
	Vms []*VM `protobuf:"bytes,1,rep,name=vms" json:"vms,omitempty"`
}

func (m *ListVMsResponse) Reset()                    { *m = ListVMsResponse{} }
func (m *ListVMsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListVMsResponse) ProtoMessage()               {}
func (*ListVMsResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

func (m *ListVMsResponse) GetVms() []*VM {
	if m != nil {
		return m.Vms
	}
	return nil
}

// A request to update a VM in the database.
type UpdateVMRequest struct {
	// The VM to update in the database.
	Vm *VM `protobuf:"bytes,1,opt,name=vm" json:"vm,omitempty"`
	// The fields to update in the VM.
	UpdateMask *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdateVMRequest) Reset()                    { *m = UpdateVMRequest{} }
func (m *UpdateVMRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateVMRequest) ProtoMessage()               {}
func (*UpdateVMRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{4} }

func (m *UpdateVMRequest) GetVm() *VM {
	if m != nil {
		return m.Vm
	}
	return nil
}

func (m *UpdateVMRequest) GetUpdateMask() *google_protobuf1.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func init() {
	proto.RegisterType((*VM)(nil), "crimson.VM")
	proto.RegisterType((*CreateVMRequest)(nil), "crimson.CreateVMRequest")
	proto.RegisterType((*ListVMsRequest)(nil), "crimson.ListVMsRequest")
	proto.RegisterType((*ListVMsResponse)(nil), "crimson.ListVMsResponse")
	proto.RegisterType((*UpdateVMRequest)(nil), "crimson.UpdateVMRequest")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/machine-db/api/crimson/v1/vms.proto", fileDescriptor13)
}

var fileDescriptor13 = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x8f, 0xd3, 0x30,
	0x10, 0x85, 0x95, 0x64, 0xbb, 0xbb, 0x75, 0x44, 0x0b, 0x16, 0x07, 0xab, 0x08, 0x29, 0x0a, 0x97,
	0x48, 0x08, 0x07, 0x0a, 0x07, 0x04, 0x47, 0x24, 0x4e, 0xe4, 0x62, 0x20, 0xd7, 0xca, 0x4d, 0xbc,
	0xad, 0x95, 0x38, 0x0e, 0xb1, 0x13, 0x89, 0x1f, 0xce, 0x1d, 0xcd, 0xb8, 0x0b, 0x88, 0xd3, 0x9e,
	0x3a, 0xf3, 0xcd, 0xab, 0xe7, 0xcd, 0x64, 0xc8, 0xfb, 0x93, 0xe5, 0xcd, 0x79, 0xb2, 0x46, 0xcf,
	0x86, 0xdb, 0xe9, 0x54, 0xf6, 0x73, 0xa3, 0x4b, 0x23, 0x9b, 0xb3, 0x1e, 0xd4, 0xab, 0xf6, 0x58,
	0xca, 0x51, 0x97, 0xcd, 0xa4, 0x8d, 0xb3, 0x43, 0xb9, 0xbc, 0x29, 0x17, 0xe3, 0xf8, 0x38, 0x59,
	0x6f, 0xe9, 0xcd, 0x85, 0xee, 0xb2, 0x93, 0xb5, 0xa7, 0x5e, 0x95, 0x88, 0x8f, 0xf3, 0x5d, 0x79,
	0xa7, 0x55, 0xdf, 0x1e, 0x8c, 0x74, 0x5d, 0x90, 0xee, 0x3e, 0x3c, 0xa8, 0x89, 0x35, 0x26, 0xf4,
	0x70, 0x5e, 0x7a, 0x75, 0x69, 0x93, 0xff, 0x8a, 0x48, 0x5c, 0x57, 0x94, 0x92, 0xab, 0x41, 0x1a,
	0xc5, 0xa2, 0x2c, 0x2a, 0xd6, 0x02, 0x63, 0x60, 0x4b, 0x2f, 0x07, 0x16, 0x67, 0x51, 0x91, 0x08,
	0x8c, 0x81, 0x9d, 0xad, 0xf3, 0x2c, 0x09, 0x3a, 0x88, 0xe9, 0x33, 0xb2, 0x86, 0xdf, 0x03, 0x8a,
	0xaf, 0x50, 0x7c, 0x0b, 0xa0, 0x86, 0x3f, 0x6c, 0x48, 0x6c, 0x1d, 0x5b, 0xa1, 0x3c, 0xb6, 0x8e,
	0x66, 0x24, 0x6d, 0x95, 0x6b, 0x26, 0x3d, 0x7a, 0x6d, 0x07, 0x76, 0x8d, 0x85, 0x7f, 0x11, 0x7d,
	0x49, 0x9e, 0xb4, 0x6a, 0xec, 0xed, 0x4f, 0xa3, 0x06, 0x7f, 0xf0, 0xba, 0xe9, 0x94, 0x67, 0x37,
	0xa8, 0x7b, 0xfc, 0xb7, 0xf0, 0x0d, 0x39, 0xf8, 0xd1, 0xe3, 0xf2, 0x8e, 0xdd, 0x06, 0x3f, 0x10,
	0xd3, 0x17, 0x64, 0x85, 0x23, 0xb2, 0x75, 0x16, 0x15, 0x9b, 0xfd, 0x23, 0x1e, 0x46, 0xe7, 0x5f,
	0x01, 0x8a, 0x50, 0xcb, 0x39, 0xd9, 0x7e, 0x9a, 0x94, 0xf4, 0xaa, 0xae, 0x84, 0xfa, 0x31, 0x2b,
	0x9c, 0x23, 0x5e, 0x0c, 0x6e, 0x20, 0xdd, 0xa7, 0xfc, 0xb2, 0x7e, 0x5e, 0x57, 0x22, 0x5e, 0x4c,
	0x2e, 0xc8, 0xe6, 0x8b, 0x76, 0xbe, 0xae, 0xdc, 0xbd, 0xfc, 0x29, 0x59, 0xc1, 0x9a, 0x1c, 0x8b,
	0xb2, 0xa4, 0x58, 0x8b, 0x90, 0x00, 0x85, 0x3d, 0x38, 0x16, 0x67, 0x49, 0x91, 0x88, 0x90, 0x00,
	0x05, 0x6b, 0x8e, 0x25, 0x41, 0x8b, 0x49, 0xfe, 0x9a, 0x6c, 0xff, 0xbc, 0xe9, 0x46, 0x3b, 0x38,
	0x45, 0x9f, 0x93, 0x64, 0x31, 0xe1, 0xc9, 0xff, 0x4c, 0x00, 0xcf, 0x3b, 0xb2, 0xfd, 0x3e, 0xb6,
	0x0f, 0x76, 0x4d, 0x3f, 0x92, 0x74, 0x46, 0x3d, 0x9e, 0x0b, 0x7e, 0xc9, 0x74, 0xbf, 0xe3, 0xe1,
	0xa2, 0xf8, 0xfd, 0x45, 0xf1, 0xcf, 0x70, 0x51, 0x95, 0x74, 0x9d, 0x20, 0x41, 0x0e, 0xf1, 0xf1,
	0x1a, 0xeb, 0x6f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x45, 0xfa, 0x70, 0x91, 0xc4, 0x02, 0x00,
	0x00,
}
