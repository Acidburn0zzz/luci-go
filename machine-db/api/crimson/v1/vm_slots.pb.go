// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/machine-db/api/crimson/v1/vm_slots.proto

package crimson

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A request to find available VM slots in the database.
type FindVMSlotsRequest struct {
	// The number of available VM slots to find.
	Slots int32 `protobuf:"varint,1,opt,name=slots" json:"slots,omitempty"`
}

func (m *FindVMSlotsRequest) Reset()                    { *m = FindVMSlotsRequest{} }
func (m *FindVMSlotsRequest) String() string            { return proto.CompactTextString(m) }
func (*FindVMSlotsRequest) ProtoMessage()               {}
func (*FindVMSlotsRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *FindVMSlotsRequest) GetSlots() int32 {
	if m != nil {
		return m.Slots
	}
	return 0
}

// A response containing a list of available VM slots in the database.
type FindVMSlotsResponse struct {
	// The hosts with available VM slots.
	// Only includes name, vlan_id, and vm_slots.
	// vm_slots in this context means the number of available VM slots.
	Hosts []*PhysicalHost `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *FindVMSlotsResponse) Reset()                    { *m = FindVMSlotsResponse{} }
func (m *FindVMSlotsResponse) String() string            { return proto.CompactTextString(m) }
func (*FindVMSlotsResponse) ProtoMessage()               {}
func (*FindVMSlotsResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *FindVMSlotsResponse) GetHosts() []*PhysicalHost {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func init() {
	proto.RegisterType((*FindVMSlotsRequest)(nil), "crimson.FindVMSlotsRequest")
	proto.RegisterType((*FindVMSlotsResponse)(nil), "crimson.FindVMSlotsResponse")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/machine-db/api/crimson/v1/vm_slots.proto", fileDescriptor13)
}

var fileDescriptor13 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x4d, 0xcf, 0xd7, 0x4b,
	0xce, 0x28, 0xca, 0xcf, 0xcd, 0x2c, 0xcd, 0xd5, 0xcb, 0x2f, 0x4a, 0xd7, 0xcf, 0x29, 0x4d, 0xce,
	0xd4, 0xcf, 0x4d, 0x4c, 0xce, 0xc8, 0xcc, 0x4b, 0xd5, 0x4d, 0x49, 0xd2, 0x4f, 0x2c, 0xc8, 0xd4,
	0x4f, 0x2e, 0xca, 0xcc, 0x2d, 0xce, 0xcf, 0xd3, 0x2f, 0x33, 0xd4, 0x2f, 0xcb, 0x8d, 0x2f, 0xce,
	0xc9, 0x2f, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x4a, 0x49, 0x39, 0x93,
	0x68, 0x4e, 0x41, 0x46, 0x65, 0x71, 0x66, 0x72, 0x62, 0x4e, 0x7c, 0x46, 0x7e, 0x31, 0xcc, 0x34,
	0x25, 0x2d, 0x2e, 0x21, 0xb7, 0xcc, 0xbc, 0x94, 0x30, 0xdf, 0x60, 0x90, 0x15, 0x41, 0xa9, 0x85,
	0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x22, 0x5c, 0xac, 0x60, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58,
	0x83, 0x20, 0x1c, 0x25, 0x27, 0x2e, 0x61, 0x14, 0xb5, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42,
	0xda, 0x5c, 0xac, 0x60, 0x13, 0x25, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0x44, 0xf5, 0xa0, 0x76,
	0xea, 0x05, 0x40, 0x2d, 0xf4, 0xc8, 0x2f, 0x2e, 0x09, 0x82, 0xa8, 0x49, 0x62, 0x03, 0x5b, 0x6b,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x36, 0x7a, 0x76, 0xbd, 0x05, 0x01, 0x00, 0x00,
}
