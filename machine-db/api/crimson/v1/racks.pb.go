// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/machine-db/api/crimson/v1/racks.proto

package crimson

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "go.chromium.org/luci/machine-db/api/common/v1"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A rack in the database.
type Rack struct {
	// The name of this rack. Uniquely identifies this rack.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// A description of this rack.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// The datacenter this rack belongs to.
	Datacenter string `protobuf:"bytes,3,opt,name=datacenter" json:"datacenter,omitempty"`
	// The state of this rack.
	State common.State `protobuf:"varint,4,opt,name=state,enum=common.State" json:"state,omitempty"`
	// The KVM serving this rack.
	Kvm string `protobuf:"bytes,5,opt,name=kvm" json:"kvm,omitempty"`
}

func (m *Rack) Reset()                    { *m = Rack{} }
func (m *Rack) String() string            { return proto.CompactTextString(m) }
func (*Rack) ProtoMessage()               {}
func (*Rack) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

func (m *Rack) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Rack) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Rack) GetDatacenter() string {
	if m != nil {
		return m.Datacenter
	}
	return ""
}

func (m *Rack) GetState() common.State {
	if m != nil {
		return m.State
	}
	return common.State_STATE_UNSPECIFIED
}

func (m *Rack) GetKvm() string {
	if m != nil {
		return m.Kvm
	}
	return ""
}

// A request to list racks in the database.
type ListRacksRequest struct {
	// The names of racks to retrieve.
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	// The datacenters to filter retrieved racks on.
	Datacenters []string `protobuf:"bytes,2,rep,name=datacenters" json:"datacenters,omitempty"`
	// The KVMs to filter retrieved racks on.
	Kvms []string `protobuf:"bytes,3,rep,name=kvms" json:"kvms,omitempty"`
}

func (m *ListRacksRequest) Reset()                    { *m = ListRacksRequest{} }
func (m *ListRacksRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRacksRequest) ProtoMessage()               {}
func (*ListRacksRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

func (m *ListRacksRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *ListRacksRequest) GetDatacenters() []string {
	if m != nil {
		return m.Datacenters
	}
	return nil
}

func (m *ListRacksRequest) GetKvms() []string {
	if m != nil {
		return m.Kvms
	}
	return nil
}

// A response containing a list of racks in the database.
type ListRacksResponse struct {
	// The racks matching the request.
	Racks []*Rack `protobuf:"bytes,1,rep,name=racks" json:"racks,omitempty"`
}

func (m *ListRacksResponse) Reset()                    { *m = ListRacksResponse{} }
func (m *ListRacksResponse) String() string            { return proto.CompactTextString(m) }
func (*ListRacksResponse) ProtoMessage()               {}
func (*ListRacksResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{2} }

func (m *ListRacksResponse) GetRacks() []*Rack {
	if m != nil {
		return m.Racks
	}
	return nil
}

func init() {
	proto.RegisterType((*Rack)(nil), "crimson.Rack")
	proto.RegisterType((*ListRacksRequest)(nil), "crimson.ListRacksRequest")
	proto.RegisterType((*ListRacksResponse)(nil), "crimson.ListRacksResponse")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/machine-db/api/crimson/v1/racks.proto", fileDescriptor11)
}

var fileDescriptor11 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x95, 0xa6, 0x05, 0xd5, 0x15, 0xa8, 0x58, 0x0c, 0x16, 0x03, 0x8a, 0xc2, 0x92, 0x05,
	0x5b, 0xc0, 0x82, 0xf8, 0x0d, 0x4c, 0x66, 0x47, 0x72, 0x1d, 0xab, 0xb5, 0x82, 0xed, 0xe0, 0x73,
	0xf2, 0x47, 0xf8, 0xc3, 0xc8, 0xe7, 0x0a, 0x65, 0x64, 0xbb, 0xbc, 0x77, 0x79, 0xf7, 0xf9, 0x91,
	0xb7, 0x63, 0xe0, 0xfa, 0x14, 0x83, 0xb3, 0x93, 0xe3, 0x21, 0x1e, 0xc5, 0xd7, 0xa4, 0xad, 0x70,
	0x4a, 0x9f, 0xac, 0x37, 0x8f, 0xfd, 0x41, 0xa8, 0xd1, 0x0a, 0x1d, 0xad, 0x83, 0xe0, 0xc5, 0xfc,
	0x24, 0xa2, 0xd2, 0x03, 0xf0, 0x31, 0x86, 0x14, 0xe8, 0xe5, 0x59, 0xbf, 0xfb, 0x5f, 0x48, 0x70,
	0xae, 0x64, 0x40, 0x52, 0xc9, 0x9c, 0x43, 0xda, 0x9f, 0x8a, 0xac, 0xa5, 0xd2, 0x03, 0xa5, 0x64,
	0xed, 0x95, 0x33, 0xac, 0x6a, 0xaa, 0x6e, 0x2b, 0x71, 0xa6, 0x0d, 0xd9, 0xf5, 0x06, 0x74, 0xb4,
	0x63, 0xb2, 0xc1, 0xb3, 0x15, 0x5a, 0x4b, 0x89, 0xde, 0x13, 0xd2, 0xab, 0xa4, 0xb4, 0xf1, 0xc9,
	0x44, 0x56, 0xe3, 0xc2, 0x42, 0xa1, 0x0f, 0x64, 0x83, 0xe7, 0xd8, 0xba, 0xa9, 0xba, 0xeb, 0xe7,
	0x2b, 0x5e, 0x30, 0xf8, 0x47, 0x16, 0x65, 0xf1, 0xe8, 0x9e, 0xd4, 0xc3, 0xec, 0xd8, 0x06, 0xff,
	0xce, 0x63, 0xfb, 0x49, 0xf6, 0xef, 0x16, 0x52, 0x06, 0x03, 0x69, 0xbe, 0x27, 0x03, 0x89, 0xde,
	0x92, 0x4d, 0x86, 0x02, 0x56, 0x35, 0x75, 0xb7, 0x95, 0xe5, 0x03, 0x11, 0xff, 0xce, 0x01, 0x5b,
	0xa1, 0xb7, 0x94, 0xf2, 0xc3, 0x86, 0xd9, 0x01, 0xab, 0xd1, 0xc2, 0xb9, 0x7d, 0x25, 0x37, 0x8b,
	0x7c, 0x18, 0x83, 0x07, 0x93, 0x59, 0xb1, 0x5e, 0x3c, 0xb0, 0xcb, 0xac, 0xa5, 0x5f, 0x9e, 0xd7,
	0x64, 0xf1, 0x0e, 0x17, 0x58, 0xdb, 0xcb, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x86, 0xec, 0x2f,
	0xd1, 0xb9, 0x01, 0x00, 0x00,
}
