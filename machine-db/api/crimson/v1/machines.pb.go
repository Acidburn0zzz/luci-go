// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/machine-db/api/crimson/v1/machines.proto

package crimson

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "google.golang.org/genproto/protobuf/field_mask"
import common "go.chromium.org/luci/machine-db/api/common/v1"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A machine in the database.
type Machine struct {
	// The name of this machine. Uniquely identifies this machine.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The type of platform this machine is.
	Platform string `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	// The rack this machine belongs to.
	Rack string `protobuf:"bytes,3,opt,name=rack" json:"rack,omitempty"`
	// A description of this machine.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// The asset tag associated with this machine.
	AssetTag string `protobuf:"bytes,5,opt,name=asset_tag,json=assetTag" json:"asset_tag,omitempty"`
	// The service tag associated with this machine.
	ServiceTag string `protobuf:"bytes,6,opt,name=service_tag,json=serviceTag" json:"service_tag,omitempty"`
	// The deployment ticket associated with this machine.
	DeploymentTicket string `protobuf:"bytes,7,opt,name=deployment_ticket,json=deploymentTicket" json:"deployment_ticket,omitempty"`
	// The state of this machine.
	State common.State `protobuf:"varint,8,opt,name=state,enum=common.State" json:"state,omitempty"`
}

func (m *Machine) Reset()                    { *m = Machine{} }
func (m *Machine) String() string            { return proto.CompactTextString(m) }
func (*Machine) ProtoMessage()               {}
func (*Machine) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Machine) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Machine) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Machine) GetRack() string {
	if m != nil {
		return m.Rack
	}
	return ""
}

func (m *Machine) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Machine) GetAssetTag() string {
	if m != nil {
		return m.AssetTag
	}
	return ""
}

func (m *Machine) GetServiceTag() string {
	if m != nil {
		return m.ServiceTag
	}
	return ""
}

func (m *Machine) GetDeploymentTicket() string {
	if m != nil {
		return m.DeploymentTicket
	}
	return ""
}

func (m *Machine) GetState() common.State {
	if m != nil {
		return m.State
	}
	return common.State_STATE_UNSPECIFIED
}

// A request to create a new machine in the database.
type CreateMachineRequest struct {
	// The machine to create in the database.
	Machine *Machine `protobuf:"bytes,1,opt,name=machine" json:"machine,omitempty"`
}

func (m *CreateMachineRequest) Reset()                    { *m = CreateMachineRequest{} }
func (m *CreateMachineRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateMachineRequest) ProtoMessage()               {}
func (*CreateMachineRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *CreateMachineRequest) GetMachine() *Machine {
	if m != nil {
		return m.Machine
	}
	return nil
}

// A request to delete a machine from the database.
type DeleteMachineRequest struct {
	// The name of the machine to delete.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteMachineRequest) Reset()                    { *m = DeleteMachineRequest{} }
func (m *DeleteMachineRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteMachineRequest) ProtoMessage()               {}
func (*DeleteMachineRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *DeleteMachineRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A request to list machines in the database.
type ListMachinesRequest struct {
	// The names of machines to get.
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	// The platforms to filter returned machines on.
	Platforms []string `protobuf:"bytes,2,rep,name=platforms" json:"platforms,omitempty"`
	// The racks to filter returned machines on.
	Racks []string `protobuf:"bytes,3,rep,name=racks" json:"racks,omitempty"`
	// The states to filter returned machines on.
	States []common.State `protobuf:"varint,4,rep,packed,name=states,enum=common.State" json:"states,omitempty"`
}

func (m *ListMachinesRequest) Reset()                    { *m = ListMachinesRequest{} }
func (m *ListMachinesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListMachinesRequest) ProtoMessage()               {}
func (*ListMachinesRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *ListMachinesRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *ListMachinesRequest) GetPlatforms() []string {
	if m != nil {
		return m.Platforms
	}
	return nil
}

func (m *ListMachinesRequest) GetRacks() []string {
	if m != nil {
		return m.Racks
	}
	return nil
}

func (m *ListMachinesRequest) GetStates() []common.State {
	if m != nil {
		return m.States
	}
	return nil
}

// A response containing a list of machines in the database.
type ListMachinesResponse struct {
	// The machines matching this request.
	Machines []*Machine `protobuf:"bytes,1,rep,name=machines" json:"machines,omitempty"`
}

func (m *ListMachinesResponse) Reset()                    { *m = ListMachinesResponse{} }
func (m *ListMachinesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListMachinesResponse) ProtoMessage()               {}
func (*ListMachinesResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *ListMachinesResponse) GetMachines() []*Machine {
	if m != nil {
		return m.Machines
	}
	return nil
}

// A request to update a machine in the database.
type UpdateMachineRequest struct {
	// The machine to update in the database.
	Machine *Machine `protobuf:"bytes,1,opt,name=machine" json:"machine,omitempty"`
	// The fields to update in the machine.
	UpdateMask *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdateMachineRequest) Reset()                    { *m = UpdateMachineRequest{} }
func (m *UpdateMachineRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateMachineRequest) ProtoMessage()               {}
func (*UpdateMachineRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *UpdateMachineRequest) GetMachine() *Machine {
	if m != nil {
		return m.Machine
	}
	return nil
}

func (m *UpdateMachineRequest) GetUpdateMask() *google_protobuf1.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func init() {
	proto.RegisterType((*Machine)(nil), "crimson.Machine")
	proto.RegisterType((*CreateMachineRequest)(nil), "crimson.CreateMachineRequest")
	proto.RegisterType((*DeleteMachineRequest)(nil), "crimson.DeleteMachineRequest")
	proto.RegisterType((*ListMachinesRequest)(nil), "crimson.ListMachinesRequest")
	proto.RegisterType((*ListMachinesResponse)(nil), "crimson.ListMachinesResponse")
	proto.RegisterType((*UpdateMachineRequest)(nil), "crimson.UpdateMachineRequest")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/machine-db/api/crimson/v1/machines.proto", fileDescriptor4)
}

var fileDescriptor4 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x4d, 0x6f, 0xd4, 0x30,
	0x10, 0x55, 0xba, 0xdf, 0x13, 0x81, 0x8a, 0xc9, 0xc1, 0x5a, 0x90, 0x88, 0x82, 0x90, 0x56, 0x05,
	0x1c, 0xb1, 0xdc, 0x40, 0x5c, 0xa0, 0xe2, 0x44, 0x2f, 0xa1, 0x9c, 0x57, 0xde, 0xc4, 0x9b, 0x5a,
	0x89, 0xe3, 0x60, 0x3b, 0x95, 0x38, 0x71, 0xe3, 0x6f, 0x83, 0x32, 0x4e, 0x5a, 0x50, 0xf7, 0x80,
	0xd4, 0x9b, 0xe7, 0xbd, 0xe7, 0x19, 0xcf, 0xf3, 0x83, 0x0f, 0xa5, 0x66, 0xf9, 0x95, 0xd1, 0x4a,
	0x76, 0x8a, 0x69, 0x53, 0xa6, 0x75, 0x97, 0xcb, 0x54, 0xf1, 0xfc, 0x4a, 0x36, 0xe2, 0x75, 0xb1,
	0x4f, 0x79, 0x2b, 0xd3, 0xdc, 0x48, 0x65, 0x75, 0x93, 0x5e, 0xbf, 0x19, 0x19, 0xcb, 0x5a, 0xa3,
	0x9d, 0x26, 0x8b, 0x81, 0x5a, 0xc7, 0xa5, 0xd6, 0x65, 0x2d, 0x52, 0x84, 0xf7, 0xdd, 0x21, 0x3d,
	0x48, 0x51, 0x17, 0x3b, 0xc5, 0x6d, 0xe5, 0xa5, 0xeb, 0x77, 0xff, 0x35, 0x49, 0x2b, 0xe5, 0x07,
	0x59, 0xc7, 0xdd, 0x38, 0x26, 0xf9, 0x1d, 0xc0, 0xe2, 0xc2, 0x2b, 0x09, 0x81, 0x69, 0xc3, 0x95,
	0xa0, 0x41, 0x1c, 0x6c, 0x56, 0x19, 0x9e, 0xc9, 0x1a, 0x96, 0x6d, 0xcd, 0xdd, 0x41, 0x1b, 0x45,
	0x4f, 0x10, 0xbf, 0xa9, 0x7b, 0xbd, 0xe1, 0x79, 0x45, 0x27, 0x5e, 0xdf, 0x9f, 0x49, 0x0c, 0x61,
	0x21, 0x6c, 0x6e, 0x64, 0xeb, 0xa4, 0x6e, 0xe8, 0x14, 0xa9, 0xbf, 0x21, 0xf2, 0x04, 0x56, 0xdc,
	0x5a, 0xe1, 0x76, 0x8e, 0x97, 0x74, 0xe6, 0x5b, 0x22, 0x70, 0xc9, 0x4b, 0xf2, 0x0c, 0x42, 0x2b,
	0xcc, 0xb5, 0xcc, 0x05, 0xd2, 0x73, 0xa4, 0x61, 0x80, 0x7a, 0xc1, 0x4b, 0x78, 0x54, 0x88, 0xb6,
	0xd6, 0x3f, 0x94, 0x68, 0xdc, 0xce, 0xc9, 0xbc, 0x12, 0x8e, 0x2e, 0x50, 0x76, 0x7a, 0x4b, 0x5c,
	0x22, 0x4e, 0x9e, 0xc3, 0x0c, 0x97, 0xa5, 0xcb, 0x38, 0xd8, 0x3c, 0xdc, 0x3e, 0x60, 0xde, 0x04,
	0xf6, 0xb5, 0x07, 0x33, 0xcf, 0x25, 0x1f, 0x21, 0xfa, 0x64, 0x04, 0x77, 0x62, 0xb0, 0x21, 0x13,
	0xdf, 0x3b, 0x61, 0x1d, 0x39, 0x83, 0xc5, 0x60, 0x21, 0x1a, 0x12, 0x6e, 0x4f, 0xd9, 0xf0, 0x25,
	0x6c, 0x54, 0x8e, 0x82, 0xe4, 0x0c, 0xa2, 0x73, 0x51, 0x8b, 0x3b, 0x3d, 0x8e, 0x38, 0x9a, 0xfc,
	0x0a, 0xe0, 0xf1, 0x17, 0x69, 0xdd, 0x20, 0xb5, 0xa3, 0x36, 0x82, 0x59, 0xcf, 0x5b, 0x1a, 0xc4,
	0x93, 0xcd, 0x2a, 0xf3, 0x05, 0x79, 0x0a, 0xab, 0xd1, 0x6f, 0x4b, 0x4f, 0x90, 0xb9, 0x05, 0xfa,
	0x3b, 0xbd, 0xeb, 0x96, 0x4e, 0xfc, 0x1d, 0x2c, 0xc8, 0x0b, 0x98, 0xfb, 0x3f, 0xa6, 0xd3, 0x78,
	0x72, 0x77, 0xef, 0x81, 0x4c, 0xce, 0x21, 0xfa, 0xf7, 0x1d, 0xb6, 0xd5, 0x8d, 0x15, 0xe4, 0x15,
	0x2c, 0xc7, 0x2c, 0xe2, 0x5b, 0x8e, 0x6d, 0x7e, 0xa3, 0x48, 0x7e, 0x42, 0xf4, 0xad, 0x2d, 0xee,
	0x65, 0x1f, 0x79, 0x0f, 0x61, 0x87, 0x3d, 0x30, 0xd5, 0x98, 0xb3, 0x70, 0xbb, 0x66, 0x3e, 0xf8,
	0x6c, 0x0c, 0x3e, 0xfb, 0xdc, 0x07, 0xff, 0x82, 0xdb, 0x2a, 0x83, 0x6e, 0x18, 0x69, 0xab, 0xfd,
	0x1c, 0xf9, 0xb7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xf8, 0xbe, 0xec, 0x70, 0x03, 0x00,
	0x00,
}
