// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/machine-db/api/crimson/v1/nics.proto

package crimson

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "google.golang.org/genproto/protobuf/field_mask"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A network interface in the database.
type NIC struct {
	// The name of this NIC. With machine, uniquely identifies this NIC.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The machine this NIC belongs to. With name, uniquely identifies this NIC.
	Machine string `protobuf:"bytes,2,opt,name=machine" json:"machine,omitempty"`
	// The MAC address associated with this NIC.
	MacAddress string `protobuf:"bytes,3,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	// The switch this NIC is connected to.
	Switch string `protobuf:"bytes,4,opt,name=switch" json:"switch,omitempty"`
	// The switchport this NIC is connected to.
	Switchport int32 `protobuf:"varint,5,opt,name=switchport" json:"switchport,omitempty"`
}

func (m *NIC) Reset()                    { *m = NIC{} }
func (m *NIC) String() string            { return proto.CompactTextString(m) }
func (*NIC) ProtoMessage()               {}
func (*NIC) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *NIC) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NIC) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

func (m *NIC) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *NIC) GetSwitch() string {
	if m != nil {
		return m.Switch
	}
	return ""
}

func (m *NIC) GetSwitchport() int32 {
	if m != nil {
		return m.Switchport
	}
	return 0
}

// A request to create a new NIC in the database.
type CreateNICRequest struct {
	// The NIC to create in the database.
	Nic *NIC `protobuf:"bytes,1,opt,name=nic" json:"nic,omitempty"`
}

func (m *CreateNICRequest) Reset()                    { *m = CreateNICRequest{} }
func (m *CreateNICRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNICRequest) ProtoMessage()               {}
func (*CreateNICRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *CreateNICRequest) GetNic() *NIC {
	if m != nil {
		return m.Nic
	}
	return nil
}

// A request to delete a NIC from the database.
type DeleteNICRequest struct {
	// The name of the NIC to delete.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The machine the NIC belongs to.
	Machine string `protobuf:"bytes,2,opt,name=machine" json:"machine,omitempty"`
}

func (m *DeleteNICRequest) Reset()                    { *m = DeleteNICRequest{} }
func (m *DeleteNICRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNICRequest) ProtoMessage()               {}
func (*DeleteNICRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *DeleteNICRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteNICRequest) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

// A request to list NICs in the database.
type ListNICsRequest struct {
	// The names of NICs to get.
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	// The machines to filter retrieved NICs on.
	Machines []string `protobuf:"bytes,2,rep,name=machines" json:"machines,omitempty"`
	// The MAC addresses to filter retrieved NICs on.
	MacAddresses []string `protobuf:"bytes,3,rep,name=mac_addresses,json=macAddresses" json:"mac_addresses,omitempty"`
	// The switches to filter retrieved NICs on.
	Switches []string `protobuf:"bytes,4,rep,name=switches" json:"switches,omitempty"`
}

func (m *ListNICsRequest) Reset()                    { *m = ListNICsRequest{} }
func (m *ListNICsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNICsRequest) ProtoMessage()               {}
func (*ListNICsRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *ListNICsRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *ListNICsRequest) GetMachines() []string {
	if m != nil {
		return m.Machines
	}
	return nil
}

func (m *ListNICsRequest) GetMacAddresses() []string {
	if m != nil {
		return m.MacAddresses
	}
	return nil
}

func (m *ListNICsRequest) GetSwitches() []string {
	if m != nil {
		return m.Switches
	}
	return nil
}

// A response containing a list of NICs in the database.
type ListNICsResponse struct {
	// The NICs matching this request.
	Nics []*NIC `protobuf:"bytes,1,rep,name=nics" json:"nics,omitempty"`
}

func (m *ListNICsResponse) Reset()                    { *m = ListNICsResponse{} }
func (m *ListNICsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListNICsResponse) ProtoMessage()               {}
func (*ListNICsResponse) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *ListNICsResponse) GetNics() []*NIC {
	if m != nil {
		return m.Nics
	}
	return nil
}

// A request to update a NIC in the database.
type UpdateNICRequest struct {
	// The NIC to update in the database.
	Nic *NIC `protobuf:"bytes,1,opt,name=nic" json:"nic,omitempty"`
	// The fields to update in the NIC.
	UpdateMask *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdateNICRequest) Reset()                    { *m = UpdateNICRequest{} }
func (m *UpdateNICRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateNICRequest) ProtoMessage()               {}
func (*UpdateNICRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *UpdateNICRequest) GetNic() *NIC {
	if m != nil {
		return m.Nic
	}
	return nil
}

func (m *UpdateNICRequest) GetUpdateMask() *google_protobuf1.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func init() {
	proto.RegisterType((*NIC)(nil), "crimson.NIC")
	proto.RegisterType((*CreateNICRequest)(nil), "crimson.CreateNICRequest")
	proto.RegisterType((*DeleteNICRequest)(nil), "crimson.DeleteNICRequest")
	proto.RegisterType((*ListNICsRequest)(nil), "crimson.ListNICsRequest")
	proto.RegisterType((*ListNICsResponse)(nil), "crimson.ListNICsResponse")
	proto.RegisterType((*UpdateNICRequest)(nil), "crimson.UpdateNICRequest")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/machine-db/api/crimson/v1/nics.proto", fileDescriptor7)
}

var fileDescriptor7 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x31, 0xaf, 0xd3, 0x30,
	0x10, 0x56, 0x5e, 0xd2, 0xf7, 0xe8, 0xa5, 0x88, 0xc8, 0x42, 0xc8, 0xea, 0x50, 0xa2, 0xb0, 0x74,
	0xc1, 0x16, 0x85, 0x05, 0xb1, 0x80, 0x82, 0x90, 0x2a, 0x41, 0x87, 0x48, 0xcc, 0x95, 0xeb, 0xb8,
	0xa9, 0xd5, 0x38, 0x0e, 0x71, 0x02, 0x7f, 0x80, 0x91, 0x1f, 0x8d, 0x6c, 0x27, 0xb4, 0xbc, 0xad,
	0xdb, 0x7d, 0xdf, 0x77, 0x77, 0xbe, 0xfb, 0x7c, 0xf0, 0xbe, 0xd2, 0x84, 0x9f, 0x3a, 0xad, 0xe4,
	0xa0, 0x88, 0xee, 0x2a, 0x5a, 0x0f, 0x5c, 0x52, 0xc5, 0xf8, 0x49, 0x36, 0xe2, 0x75, 0x79, 0xa0,
	0xac, 0x95, 0x94, 0x77, 0x52, 0x19, 0xdd, 0xd0, 0x9f, 0x6f, 0x68, 0x23, 0xb9, 0x21, 0x6d, 0xa7,
	0x7b, 0x8d, 0x1e, 0x46, 0x7a, 0x99, 0x56, 0x5a, 0x57, 0xb5, 0xa0, 0x8e, 0x3e, 0x0c, 0x47, 0x7a,
	0x94, 0xa2, 0x2e, 0xf7, 0x8a, 0x99, 0xb3, 0x4f, 0xcd, 0xfe, 0x04, 0x10, 0xee, 0xb6, 0x39, 0x42,
	0x10, 0x35, 0x4c, 0x09, 0x1c, 0xa4, 0xc1, 0x7a, 0x5e, 0xb8, 0x18, 0x61, 0x78, 0x18, 0x9f, 0xc3,
	0x77, 0x8e, 0x9e, 0x20, 0x7a, 0x09, 0xb1, 0x62, 0x7c, 0xcf, 0xca, 0xb2, 0x13, 0xc6, 0xe0, 0xd0,
	0xa9, 0xa0, 0x18, 0xff, 0xe4, 0x19, 0xf4, 0x02, 0xee, 0xcd, 0x2f, 0xd9, 0xf3, 0x13, 0x8e, 0x9c,
	0x36, 0x22, 0xb4, 0x02, 0xf0, 0x51, 0xab, 0xbb, 0x1e, 0xcf, 0xd2, 0x60, 0x3d, 0x2b, 0xae, 0x98,
	0x6c, 0x03, 0x49, 0xde, 0x09, 0xd6, 0x8b, 0xdd, 0x36, 0x2f, 0xc4, 0x8f, 0x41, 0x98, 0x1e, 0xad,
	0x20, 0x6c, 0x24, 0x77, 0x93, 0xc5, 0x9b, 0x05, 0x19, 0x77, 0x23, 0x36, 0xc3, 0x0a, 0xd9, 0x47,
	0x48, 0x3e, 0x8b, 0x5a, 0xfc, 0x57, 0x73, 0xd3, 0x3a, 0xd9, 0xef, 0x00, 0x9e, 0x7d, 0x95, 0xa6,
	0xdf, 0x6d, 0x73, 0x33, 0x75, 0x78, 0x0e, 0x33, 0x5b, 0x65, 0x70, 0x90, 0x86, 0xeb, 0x79, 0xe1,
	0x01, 0x5a, 0xc2, 0x93, 0xb1, 0xc8, 0xe0, 0x3b, 0x27, 0xfc, 0xc3, 0xe8, 0x15, 0x3c, 0xbd, 0x32,
	0x45, 0x58, 0x5b, 0x6c, 0xc2, 0xe2, 0x62, 0x8b, 0x6f, 0xe0, 0xd7, 0x15, 0x06, 0x47, 0xbe, 0xc1,
	0x84, 0xb3, 0x77, 0x90, 0x5c, 0xa6, 0x30, 0xad, 0x6e, 0x8c, 0x40, 0x29, 0x44, 0xf6, 0x63, 0xdd,
	0x14, 0x8f, 0xb7, 0x77, 0x4a, 0xa6, 0x21, 0xf9, 0xde, 0x96, 0x37, 0x59, 0x86, 0x3e, 0x40, 0x3c,
	0xb8, 0x1a, 0x77, 0x0a, 0xce, 0x8e, 0x78, 0xb3, 0x24, 0xfe, 0x5a, 0xc8, 0x74, 0x2d, 0xe4, 0x8b,
	0xbd, 0x96, 0x6f, 0xcc, 0x9c, 0x0b, 0xf0, 0xe9, 0x36, 0x3e, 0xdc, 0x3b, 0xfd, 0xed, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xe1, 0xa9, 0x68, 0xca, 0xa1, 0x02, 0x00, 0x00,
}
