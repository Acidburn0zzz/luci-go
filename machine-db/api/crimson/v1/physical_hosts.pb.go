// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/machine-db/api/crimson/v1/physical_hosts.proto

package crimson

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A physical host in the database.
type PhysicalHost struct {
	// The name of this host on the network. With VLAN ID, uniquely identifies this host.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The VLAN this host belongs to. With hostname, uniquely identifies this host.
	Vlan int64 `protobuf:"varint,2,opt,name=vlan" json:"vlan,omitempty"`
	// The machine backing this host.
	Machine string `protobuf:"bytes,3,opt,name=machine" json:"machine,omitempty"`
	// The operating system backing this host.
	Os string `protobuf:"bytes,5,opt,name=os" json:"os,omitempty"`
	// The number of VMs which can be deployed on this host.
	VmSlots int32 `protobuf:"varint,6,opt,name=vm_slots,json=vmSlots" json:"vm_slots,omitempty"`
	// A description of this host.
	Description string `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	// The deployment ticket associated with this host.
	DeploymentTicket string `protobuf:"bytes,8,opt,name=deployment_ticket,json=deploymentTicket" json:"deployment_ticket,omitempty"`
}

func (m *PhysicalHost) Reset()                    { *m = PhysicalHost{} }
func (m *PhysicalHost) String() string            { return proto.CompactTextString(m) }
func (*PhysicalHost) ProtoMessage()               {}
func (*PhysicalHost) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *PhysicalHost) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PhysicalHost) GetVlan() int64 {
	if m != nil {
		return m.Vlan
	}
	return 0
}

func (m *PhysicalHost) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

func (m *PhysicalHost) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *PhysicalHost) GetVmSlots() int32 {
	if m != nil {
		return m.VmSlots
	}
	return 0
}

func (m *PhysicalHost) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PhysicalHost) GetDeploymentTicket() string {
	if m != nil {
		return m.DeploymentTicket
	}
	return ""
}

// CreatePhysicalHostRequest is a request to create a new physical host in the database.
type CreatePhysicalHostRequest struct {
	// The host to create in the database.
	Host *PhysicalHost `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
}

func (m *CreatePhysicalHostRequest) Reset()                    { *m = CreatePhysicalHostRequest{} }
func (m *CreatePhysicalHostRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePhysicalHostRequest) ProtoMessage()               {}
func (*CreatePhysicalHostRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *CreatePhysicalHostRequest) GetHost() *PhysicalHost {
	if m != nil {
		return m.Host
	}
	return nil
}

// ListPhysicalHostsRequest is a request to list physical hosts in the database.
type ListPhysicalHostsRequest struct {
	// The names of hosts to get.
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	// The VLANs to filter retrieved hosts on.
	Vlans []int64 `protobuf:"varint,2,rep,packed,name=vlans" json:"vlans,omitempty"`
}

func (m *ListPhysicalHostsRequest) Reset()                    { *m = ListPhysicalHostsRequest{} }
func (m *ListPhysicalHostsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPhysicalHostsRequest) ProtoMessage()               {}
func (*ListPhysicalHostsRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *ListPhysicalHostsRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *ListPhysicalHostsRequest) GetVlans() []int64 {
	if m != nil {
		return m.Vlans
	}
	return nil
}

// ListPhysicalHostsResponse is a response to a request to list physical hosts.
type ListPhysicalHostsResponse struct {
	// The hosts matching this request.
	Hosts []*PhysicalHost `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *ListPhysicalHostsResponse) Reset()                    { *m = ListPhysicalHostsResponse{} }
func (m *ListPhysicalHostsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPhysicalHostsResponse) ProtoMessage()               {}
func (*ListPhysicalHostsResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *ListPhysicalHostsResponse) GetHosts() []*PhysicalHost {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func init() {
	proto.RegisterType((*PhysicalHost)(nil), "crimson.PhysicalHost")
	proto.RegisterType((*CreatePhysicalHostRequest)(nil), "crimson.CreatePhysicalHostRequest")
	proto.RegisterType((*ListPhysicalHostsRequest)(nil), "crimson.ListPhysicalHostsRequest")
	proto.RegisterType((*ListPhysicalHostsResponse)(nil), "crimson.ListPhysicalHostsResponse")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/machine-db/api/crimson/v1/physical_hosts.proto", fileDescriptor6)
}

var fileDescriptor6 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4a, 0xfb, 0x40,
	0x10, 0xc6, 0x49, 0xd2, 0x34, 0xed, 0xf4, 0xcf, 0x1f, 0x5d, 0x14, 0xb6, 0xb7, 0x90, 0x53, 0xa4,
	0x98, 0xa0, 0x3e, 0x42, 0xa1, 0xf4, 0xe0, 0x41, 0xa2, 0xf7, 0x92, 0x6e, 0x97, 0x66, 0x31, 0xbb,
	0x13, 0x33, 0xdb, 0x40, 0x5f, 0xd1, 0xa7, 0x92, 0x6c, 0x53, 0xac, 0xa0, 0xb7, 0xf9, 0xbe, 0xf9,
	0x65, 0xb2, 0xf3, 0x0d, 0x2c, 0xf7, 0x98, 0x89, 0xaa, 0x45, 0xad, 0x0e, 0x3a, 0xc3, 0x76, 0x9f,
	0xd7, 0x07, 0xa1, 0x72, 0x5d, 0x8a, 0x4a, 0x19, 0x79, 0xbf, 0xdb, 0xe6, 0x65, 0xa3, 0x72, 0xd1,
	0x2a, 0x4d, 0x68, 0xf2, 0xee, 0x21, 0x6f, 0xaa, 0x23, 0x29, 0x51, 0xd6, 0x9b, 0x0a, 0xc9, 0x52,
	0xd6, 0xb4, 0x68, 0x91, 0x45, 0x03, 0x90, 0x7c, 0x7a, 0xf0, 0xef, 0x65, 0x20, 0xd6, 0x48, 0x96,
	0x31, 0x18, 0x99, 0x52, 0x4b, 0xee, 0xc5, 0x5e, 0x3a, 0x2d, 0x5c, 0xdd, 0x7b, 0x5d, 0x5d, 0x1a,
	0xee, 0xc7, 0x5e, 0x1a, 0x14, 0xae, 0x66, 0x1c, 0xa2, 0xe1, 0x9f, 0x3c, 0x70, 0xe8, 0x59, 0xb2,
	0xff, 0xe0, 0x23, 0xf1, 0xd0, 0x99, 0x3e, 0x12, 0x9b, 0xc3, 0xa4, 0xd3, 0x1b, 0xaa, 0xd1, 0x12,
	0x1f, 0xc7, 0x5e, 0x1a, 0x16, 0x51, 0xa7, 0x5f, 0x7b, 0xc9, 0x62, 0x98, 0xed, 0x24, 0x89, 0x56,
	0x35, 0x56, 0xa1, 0xe1, 0x91, 0xfb, 0xe6, 0xd2, 0x62, 0x0b, 0xb8, 0xde, 0xc9, 0xa6, 0xc6, 0xa3,
	0x96, 0xc6, 0x6e, 0xac, 0x12, 0xef, 0xd2, 0xf2, 0x89, 0xe3, 0xae, 0xbe, 0x1b, 0x6f, 0xce, 0x4f,
	0x56, 0x30, 0x5f, 0xb6, 0xb2, 0xb4, 0xf2, 0x72, 0xa3, 0x42, 0x7e, 0x1c, 0x24, 0x59, 0x76, 0x07,
	0xa3, 0x3e, 0x01, 0xb7, 0xd8, 0xec, 0xf1, 0x36, 0x1b, 0x12, 0xc8, 0x7e, 0xb0, 0x0e, 0x49, 0x56,
	0xc0, 0x9f, 0x15, 0xd9, 0xcb, 0x0e, 0x9d, 0xc7, 0xdc, 0x40, 0xd8, 0x67, 0x42, 0xdc, 0x8b, 0x83,
	0x74, 0x5a, 0x9c, 0x44, 0xef, 0xf6, 0xa9, 0x10, 0xf7, 0xe3, 0x20, 0x0d, 0x8a, 0x93, 0x48, 0xd6,
	0x30, 0xff, 0x65, 0x0e, 0x35, 0x68, 0x48, 0xb2, 0x05, 0x84, 0xee, 0x22, 0x6e, 0xd0, 0x9f, 0x0f,
	0x3a, 0x31, 0xdb, 0xb1, 0x3b, 0xdb, 0xd3, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x7e, 0x1c,
	0xfe, 0xfd, 0x01, 0x00, 0x00,
}
