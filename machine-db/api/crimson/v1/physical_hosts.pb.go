// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/machine-db/api/crimson/v1/physical_hosts.proto

package crimson

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "google.golang.org/genproto/protobuf/field_mask"
import common "go.chromium.org/luci/machine-db/api/common/v1"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A physical host in the database.
type PhysicalHost struct {
	// The name of this host on the network. With VLAN ID, uniquely identifies this host.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The VLAN this host belongs to. With hostname, uniquely identifies this host.
	// When creating a host, omit this field. It will be inferred from the IPv4 address.
	Vlan int64 `protobuf:"varint,2,opt,name=vlan" json:"vlan,omitempty"`
	// The machine backing this host.
	Machine string `protobuf:"bytes,3,opt,name=machine" json:"machine,omitempty"`
	// The operating system backing this host.
	Os string `protobuf:"bytes,4,opt,name=os" json:"os,omitempty"`
	// The number of VMs which can be deployed on this host.
	VmSlots int32 `protobuf:"varint,5,opt,name=vm_slots,json=vmSlots" json:"vm_slots,omitempty"`
	// A description of this host.
	Description string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	// The deployment ticket associated with this host.
	DeploymentTicket string `protobuf:"bytes,7,opt,name=deployment_ticket,json=deploymentTicket" json:"deployment_ticket,omitempty"`
	// The IPv4 address associated with this host.
	Ipv4 string `protobuf:"bytes,8,opt,name=ipv4" json:"ipv4,omitempty"`
	// The state of the machine backing this host.
	State common.State `protobuf:"varint,9,opt,name=state,enum=common.State" json:"state,omitempty"`
}

func (m *PhysicalHost) Reset()                    { *m = PhysicalHost{} }
func (m *PhysicalHost) String() string            { return proto.CompactTextString(m) }
func (*PhysicalHost) ProtoMessage()               {}
func (*PhysicalHost) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *PhysicalHost) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PhysicalHost) GetVlan() int64 {
	if m != nil {
		return m.Vlan
	}
	return 0
}

func (m *PhysicalHost) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

func (m *PhysicalHost) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *PhysicalHost) GetVmSlots() int32 {
	if m != nil {
		return m.VmSlots
	}
	return 0
}

func (m *PhysicalHost) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PhysicalHost) GetDeploymentTicket() string {
	if m != nil {
		return m.DeploymentTicket
	}
	return ""
}

func (m *PhysicalHost) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *PhysicalHost) GetState() common.State {
	if m != nil {
		return m.State
	}
	return common.State_STATE_UNSPECIFIED
}

// A  request to create a new physical host in the database.
type CreatePhysicalHostRequest struct {
	// The host to create in the database.
	Host *PhysicalHost `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
}

func (m *CreatePhysicalHostRequest) Reset()                    { *m = CreatePhysicalHostRequest{} }
func (m *CreatePhysicalHostRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePhysicalHostRequest) ProtoMessage()               {}
func (*CreatePhysicalHostRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *CreatePhysicalHostRequest) GetHost() *PhysicalHost {
	if m != nil {
		return m.Host
	}
	return nil
}

// A request to list physical hosts in the database.
type ListPhysicalHostsRequest struct {
	// The names of hosts to get.
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	// The VLANs to filter retrieved hosts on.
	Vlans []int64 `protobuf:"varint,2,rep,packed,name=vlans" json:"vlans,omitempty"`
	// The IPv4 addresses to filter returned hosts on.
	Ipv4S []string `protobuf:"bytes,3,rep,name=ipv4s" json:"ipv4s,omitempty"`
	// The machines to filter retrieved hosts on.
	Machines []string `protobuf:"bytes,4,rep,name=machines" json:"machines,omitempty"`
	// The operating systems to filter retrieved hosts on.
	Oses []string `protobuf:"bytes,5,rep,name=oses" json:"oses,omitempty"`
	// The states to filter retrieved hosts on.
	States []common.State `protobuf:"varint,6,rep,packed,name=states,enum=common.State" json:"states,omitempty"`
}

func (m *ListPhysicalHostsRequest) Reset()                    { *m = ListPhysicalHostsRequest{} }
func (m *ListPhysicalHostsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPhysicalHostsRequest) ProtoMessage()               {}
func (*ListPhysicalHostsRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *ListPhysicalHostsRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *ListPhysicalHostsRequest) GetVlans() []int64 {
	if m != nil {
		return m.Vlans
	}
	return nil
}

func (m *ListPhysicalHostsRequest) GetIpv4S() []string {
	if m != nil {
		return m.Ipv4S
	}
	return nil
}

func (m *ListPhysicalHostsRequest) GetMachines() []string {
	if m != nil {
		return m.Machines
	}
	return nil
}

func (m *ListPhysicalHostsRequest) GetOses() []string {
	if m != nil {
		return m.Oses
	}
	return nil
}

func (m *ListPhysicalHostsRequest) GetStates() []common.State {
	if m != nil {
		return m.States
	}
	return nil
}

// A response containing a list of physical hosts in the database.
type ListPhysicalHostsResponse struct {
	// The hosts matching this request.
	Hosts []*PhysicalHost `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *ListPhysicalHostsResponse) Reset()                    { *m = ListPhysicalHostsResponse{} }
func (m *ListPhysicalHostsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPhysicalHostsResponse) ProtoMessage()               {}
func (*ListPhysicalHostsResponse) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *ListPhysicalHostsResponse) GetHosts() []*PhysicalHost {
	if m != nil {
		return m.Hosts
	}
	return nil
}

// A request to update a physical host in the database.
type UpdatePhysicalHostRequest struct {
	// The host to update in the database.
	Host *PhysicalHost `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	// The fields to update in the host.
	UpdateMask *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdatePhysicalHostRequest) Reset()                    { *m = UpdatePhysicalHostRequest{} }
func (m *UpdatePhysicalHostRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePhysicalHostRequest) ProtoMessage()               {}
func (*UpdatePhysicalHostRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *UpdatePhysicalHostRequest) GetHost() *PhysicalHost {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *UpdatePhysicalHostRequest) GetUpdateMask() *google_protobuf1.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func init() {
	proto.RegisterType((*PhysicalHost)(nil), "crimson.PhysicalHost")
	proto.RegisterType((*CreatePhysicalHostRequest)(nil), "crimson.CreatePhysicalHostRequest")
	proto.RegisterType((*ListPhysicalHostsRequest)(nil), "crimson.ListPhysicalHostsRequest")
	proto.RegisterType((*ListPhysicalHostsResponse)(nil), "crimson.ListPhysicalHostsResponse")
	proto.RegisterType((*UpdatePhysicalHostRequest)(nil), "crimson.UpdatePhysicalHostRequest")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/machine-db/api/crimson/v1/physical_hosts.proto", fileDescriptor7)
}

var fileDescriptor7 = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4d, 0x8b, 0xd4, 0x4c,
	0x10, 0x26, 0x93, 0xf9, 0xac, 0x79, 0xdf, 0x45, 0x1b, 0x85, 0x9e, 0x39, 0x85, 0x88, 0x10, 0x59,
	0xec, 0xe0, 0xe8, 0x49, 0x8f, 0x0b, 0xcb, 0x1e, 0x14, 0x24, 0xab, 0xe7, 0x21, 0x93, 0xf4, 0xce,
	0x34, 0x93, 0x4e, 0xc7, 0x54, 0x27, 0xb0, 0xe7, 0xfd, 0x49, 0xfe, 0x41, 0xe9, 0xea, 0x8c, 0x8e,
	0xa8, 0x20, 0x78, 0xab, 0xe7, 0x23, 0xa9, 0xaa, 0xa7, 0xbb, 0xe1, 0x6a, 0x6f, 0x44, 0x71, 0x68,
	0x8d, 0x56, 0x9d, 0x16, 0xa6, 0xdd, 0xa7, 0x55, 0x57, 0xa8, 0x54, 0xe7, 0xc5, 0x41, 0xd5, 0xf2,
	0x65, 0xb9, 0x4b, 0xf3, 0x46, 0xa5, 0x45, 0xab, 0x34, 0x9a, 0x3a, 0xed, 0x5f, 0xa5, 0xcd, 0xe1,
	0x1e, 0x55, 0x91, 0x57, 0xdb, 0x83, 0x41, 0x8b, 0xa2, 0x69, 0x8d, 0x35, 0x6c, 0x36, 0x18, 0xd6,
	0xd1, 0xde, 0x98, 0x7d, 0x25, 0x53, 0xa2, 0x77, 0xdd, 0x5d, 0x7a, 0xa7, 0x64, 0x55, 0x6e, 0x75,
	0x8e, 0x47, 0x6f, 0x5d, 0xbf, 0xfd, 0xab, 0x7e, 0x46, 0x6b, 0xdf, 0x0e, 0x6d, 0x6e, 0xe5, 0xd0,
	0x26, 0x7e, 0x18, 0xc1, 0x7f, 0x1f, 0x87, 0xfe, 0x37, 0x06, 0x2d, 0x63, 0x30, 0xae, 0x73, 0x2d,
	0x79, 0x10, 0x05, 0xc9, 0x22, 0xa3, 0xda, 0x71, 0x7d, 0x95, 0xd7, 0x7c, 0x14, 0x05, 0x49, 0x98,
	0x51, 0xcd, 0x38, 0xcc, 0x86, 0x0e, 0x3c, 0x24, 0xeb, 0x09, 0xb2, 0x0b, 0x18, 0x19, 0xe4, 0x63,
	0x22, 0x47, 0x06, 0xd9, 0x0a, 0xe6, 0xbd, 0xde, 0x62, 0x65, 0x2c, 0xf2, 0x49, 0x14, 0x24, 0x93,
	0x6c, 0xd6, 0xeb, 0x5b, 0x07, 0x59, 0x04, 0xcb, 0x52, 0x62, 0xd1, 0xaa, 0xc6, 0x2a, 0x53, 0xf3,
	0x29, 0x7d, 0x73, 0x4e, 0xb1, 0x4b, 0x78, 0x5c, 0xca, 0xa6, 0x32, 0xf7, 0x5a, 0xd6, 0x76, 0x6b,
	0x55, 0x71, 0x94, 0x96, 0xcf, 0xc8, 0xf7, 0xe8, 0x87, 0xf0, 0x89, 0x78, 0x37, 0xa7, 0x6a, 0xfa,
	0x37, 0x7c, 0xee, 0x67, 0x77, 0x35, 0x7b, 0x06, 0x13, 0x5a, 0x98, 0x2f, 0xa2, 0x20, 0xb9, 0xd8,
	0xfc, 0x2f, 0x7c, 0x10, 0xe2, 0xd6, 0x91, 0x99, 0xd7, 0xe2, 0x6b, 0x58, 0x5d, 0xb5, 0x32, 0xb7,
	0xf2, 0x3c, 0x8a, 0x4c, 0x7e, 0xe9, 0x24, 0x5a, 0xf6, 0x02, 0xc6, 0xee, 0x60, 0x28, 0x91, 0xe5,
	0xe6, 0xa9, 0x18, 0x0e, 0x46, 0xfc, 0xe4, 0x25, 0x4b, 0xfc, 0x35, 0x00, 0xfe, 0x5e, 0xa1, 0x3d,
	0x97, 0xf0, 0xf4, 0x9f, 0x27, 0x30, 0x71, 0x69, 0x22, 0x0f, 0xa2, 0x30, 0x59, 0x64, 0x1e, 0x38,
	0xd6, 0xe5, 0x89, 0x7c, 0x14, 0x85, 0x49, 0x98, 0x79, 0xe0, 0x58, 0x37, 0x3d, 0xf2, 0xd0, 0x7b,
	0x09, 0xb0, 0x35, 0xcc, 0x87, 0x90, 0x5d, 0xbe, 0x4e, 0xf8, 0x8e, 0xdd, 0xee, 0x06, 0xa5, 0x4b,
	0xd8, 0xf1, 0x54, 0xb3, 0xe7, 0x30, 0xf5, 0x87, 0xcd, 0xa7, 0x51, 0xf8, 0xeb, 0xf2, 0x83, 0x18,
	0xdf, 0xc0, 0xea, 0x37, 0x43, 0x63, 0x63, 0x6a, 0x94, 0xec, 0x12, 0x26, 0x74, 0x2d, 0x69, 0xea,
	0x3f, 0xae, 0xef, 0x3d, 0xf1, 0x43, 0x00, 0xab, 0xcf, 0x4d, 0xf9, 0xcf, 0x41, 0xb2, 0x77, 0xb0,
	0xec, 0xe8, 0x3f, 0x74, 0xcf, 0xe9, 0xe2, 0x2d, 0x37, 0x6b, 0xe1, 0x9f, 0x82, 0x38, 0x3d, 0x05,
	0x71, 0xed, 0x9e, 0xc2, 0x87, 0x1c, 0x8f, 0x19, 0x78, 0xbb, 0xab, 0x77, 0x53, 0xd2, 0x5f, 0x7f,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0x52, 0x20, 0x7e, 0x0f, 0x88, 0x03, 0x00, 0x00,
}
