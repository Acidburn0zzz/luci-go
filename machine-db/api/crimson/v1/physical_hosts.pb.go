// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go.chromium.org/luci/machine-db/api/crimson/v1/physical_hosts.proto

package crimson

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import v1 "go.chromium.org/luci/machine-db/api/common/v1"
import field_mask "google.golang.org/genproto/protobuf/field_mask"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A physical host in the database.
type PhysicalHost struct {
	// The name of this host on the network. With VLAN ID, uniquely identifies this host.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The VLAN this host belongs to. With hostname, uniquely identifies this host.
	// When creating a host, omit this field. It will be inferred from the IPv4 address.
	Vlan int64 `protobuf:"varint,2,opt,name=vlan" json:"vlan,omitempty"`
	// The machine backing this host.
	Machine string `protobuf:"bytes,3,opt,name=machine" json:"machine,omitempty"`
	// The operating system backing this host.
	Os string `protobuf:"bytes,4,opt,name=os" json:"os,omitempty"`
	// The number of VMs which can be deployed on this host.
	VmSlots int32 `protobuf:"varint,5,opt,name=vm_slots,json=vmSlots" json:"vm_slots,omitempty"`
	// A description of this host.
	Description string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	// The deployment ticket associated with this host.
	DeploymentTicket string `protobuf:"bytes,7,opt,name=deployment_ticket,json=deploymentTicket" json:"deployment_ticket,omitempty"`
	// The IPv4 address associated with this host.
	Ipv4 string `protobuf:"bytes,8,opt,name=ipv4" json:"ipv4,omitempty"`
	// The state of the machine backing this host.
	State v1.State `protobuf:"varint,9,opt,name=state,enum=common.State" json:"state,omitempty"`
	// The virtual datacenter VMs deployed on this host belong to.
	VirtualDatacenter    string   `protobuf:"bytes,10,opt,name=virtual_datacenter,json=virtualDatacenter" json:"virtual_datacenter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhysicalHost) Reset()         { *m = PhysicalHost{} }
func (m *PhysicalHost) String() string { return proto.CompactTextString(m) }
func (*PhysicalHost) ProtoMessage()    {}
func (*PhysicalHost) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_hosts_2b90a5c9e86ddbd1, []int{0}
}
func (m *PhysicalHost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalHost.Unmarshal(m, b)
}
func (m *PhysicalHost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalHost.Marshal(b, m, deterministic)
}
func (dst *PhysicalHost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalHost.Merge(dst, src)
}
func (m *PhysicalHost) XXX_Size() int {
	return xxx_messageInfo_PhysicalHost.Size(m)
}
func (m *PhysicalHost) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalHost.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalHost proto.InternalMessageInfo

func (m *PhysicalHost) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PhysicalHost) GetVlan() int64 {
	if m != nil {
		return m.Vlan
	}
	return 0
}

func (m *PhysicalHost) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

func (m *PhysicalHost) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *PhysicalHost) GetVmSlots() int32 {
	if m != nil {
		return m.VmSlots
	}
	return 0
}

func (m *PhysicalHost) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PhysicalHost) GetDeploymentTicket() string {
	if m != nil {
		return m.DeploymentTicket
	}
	return ""
}

func (m *PhysicalHost) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *PhysicalHost) GetState() v1.State {
	if m != nil {
		return m.State
	}
	return v1.State_STATE_UNSPECIFIED
}

func (m *PhysicalHost) GetVirtualDatacenter() string {
	if m != nil {
		return m.VirtualDatacenter
	}
	return ""
}

// A request to create a new physical host in the database.
type CreatePhysicalHostRequest struct {
	// The host to create in the database.
	Host                 *PhysicalHost `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CreatePhysicalHostRequest) Reset()         { *m = CreatePhysicalHostRequest{} }
func (m *CreatePhysicalHostRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePhysicalHostRequest) ProtoMessage()    {}
func (*CreatePhysicalHostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_hosts_2b90a5c9e86ddbd1, []int{1}
}
func (m *CreatePhysicalHostRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePhysicalHostRequest.Unmarshal(m, b)
}
func (m *CreatePhysicalHostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePhysicalHostRequest.Marshal(b, m, deterministic)
}
func (dst *CreatePhysicalHostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePhysicalHostRequest.Merge(dst, src)
}
func (m *CreatePhysicalHostRequest) XXX_Size() int {
	return xxx_messageInfo_CreatePhysicalHostRequest.Size(m)
}
func (m *CreatePhysicalHostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePhysicalHostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePhysicalHostRequest proto.InternalMessageInfo

func (m *CreatePhysicalHostRequest) GetHost() *PhysicalHost {
	if m != nil {
		return m.Host
	}
	return nil
}

// A request to list physical hosts in the database.
type ListPhysicalHostsRequest struct {
	// The names of hosts to get.
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	// The VLANs to filter retrieved hosts on.
	Vlans []int64 `protobuf:"varint,2,rep,packed,name=vlans" json:"vlans,omitempty"`
	// The IPv4 addresses to filter retrieved hosts on.
	Ipv4S []string `protobuf:"bytes,3,rep,name=ipv4s" json:"ipv4s,omitempty"`
	// The machines to filter retrieved hosts on.
	Machines []string `protobuf:"bytes,4,rep,name=machines" json:"machines,omitempty"`
	// The operating systems to filter retrieved hosts on.
	Oses []string `protobuf:"bytes,5,rep,name=oses" json:"oses,omitempty"`
	// The states to filter retrieved hosts on.
	States []v1.State `protobuf:"varint,6,rep,packed,name=states,enum=common.State" json:"states,omitempty"`
	// The platforms to filter retrieved hosts on.
	Platforms []string `protobuf:"bytes,7,rep,name=platforms" json:"platforms,omitempty"`
	// The racks to filter retrieved hosts on.
	Racks []string `protobuf:"bytes,8,rep,name=racks" json:"racks,omitempty"`
	// The datacenters to filter retrieved hosts on.
	Datacenters []string `protobuf:"bytes,9,rep,name=datacenters" json:"datacenters,omitempty"`
	// The virtual datacenters to filter retrieved hosts on.
	VirtualDatacenters   []string `protobuf:"bytes,10,rep,name=virtual_datacenters,json=virtualDatacenters" json:"virtual_datacenters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPhysicalHostsRequest) Reset()         { *m = ListPhysicalHostsRequest{} }
func (m *ListPhysicalHostsRequest) String() string { return proto.CompactTextString(m) }
func (*ListPhysicalHostsRequest) ProtoMessage()    {}
func (*ListPhysicalHostsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_hosts_2b90a5c9e86ddbd1, []int{2}
}
func (m *ListPhysicalHostsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPhysicalHostsRequest.Unmarshal(m, b)
}
func (m *ListPhysicalHostsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPhysicalHostsRequest.Marshal(b, m, deterministic)
}
func (dst *ListPhysicalHostsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPhysicalHostsRequest.Merge(dst, src)
}
func (m *ListPhysicalHostsRequest) XXX_Size() int {
	return xxx_messageInfo_ListPhysicalHostsRequest.Size(m)
}
func (m *ListPhysicalHostsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPhysicalHostsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPhysicalHostsRequest proto.InternalMessageInfo

func (m *ListPhysicalHostsRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *ListPhysicalHostsRequest) GetVlans() []int64 {
	if m != nil {
		return m.Vlans
	}
	return nil
}

func (m *ListPhysicalHostsRequest) GetIpv4S() []string {
	if m != nil {
		return m.Ipv4S
	}
	return nil
}

func (m *ListPhysicalHostsRequest) GetMachines() []string {
	if m != nil {
		return m.Machines
	}
	return nil
}

func (m *ListPhysicalHostsRequest) GetOses() []string {
	if m != nil {
		return m.Oses
	}
	return nil
}

func (m *ListPhysicalHostsRequest) GetStates() []v1.State {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *ListPhysicalHostsRequest) GetPlatforms() []string {
	if m != nil {
		return m.Platforms
	}
	return nil
}

func (m *ListPhysicalHostsRequest) GetRacks() []string {
	if m != nil {
		return m.Racks
	}
	return nil
}

func (m *ListPhysicalHostsRequest) GetDatacenters() []string {
	if m != nil {
		return m.Datacenters
	}
	return nil
}

func (m *ListPhysicalHostsRequest) GetVirtualDatacenters() []string {
	if m != nil {
		return m.VirtualDatacenters
	}
	return nil
}

// A response containing a list of physical hosts in the database.
type ListPhysicalHostsResponse struct {
	// The hosts matching this request.
	Hosts                []*PhysicalHost `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListPhysicalHostsResponse) Reset()         { *m = ListPhysicalHostsResponse{} }
func (m *ListPhysicalHostsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPhysicalHostsResponse) ProtoMessage()    {}
func (*ListPhysicalHostsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_hosts_2b90a5c9e86ddbd1, []int{3}
}
func (m *ListPhysicalHostsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPhysicalHostsResponse.Unmarshal(m, b)
}
func (m *ListPhysicalHostsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPhysicalHostsResponse.Marshal(b, m, deterministic)
}
func (dst *ListPhysicalHostsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPhysicalHostsResponse.Merge(dst, src)
}
func (m *ListPhysicalHostsResponse) XXX_Size() int {
	return xxx_messageInfo_ListPhysicalHostsResponse.Size(m)
}
func (m *ListPhysicalHostsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPhysicalHostsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPhysicalHostsResponse proto.InternalMessageInfo

func (m *ListPhysicalHostsResponse) GetHosts() []*PhysicalHost {
	if m != nil {
		return m.Hosts
	}
	return nil
}

// A request to update a physical host in the database.
type UpdatePhysicalHostRequest struct {
	// The host to update in the database.
	Host *PhysicalHost `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	// The fields to update in the host.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdatePhysicalHostRequest) Reset()         { *m = UpdatePhysicalHostRequest{} }
func (m *UpdatePhysicalHostRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePhysicalHostRequest) ProtoMessage()    {}
func (*UpdatePhysicalHostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_hosts_2b90a5c9e86ddbd1, []int{4}
}
func (m *UpdatePhysicalHostRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePhysicalHostRequest.Unmarshal(m, b)
}
func (m *UpdatePhysicalHostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePhysicalHostRequest.Marshal(b, m, deterministic)
}
func (dst *UpdatePhysicalHostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePhysicalHostRequest.Merge(dst, src)
}
func (m *UpdatePhysicalHostRequest) XXX_Size() int {
	return xxx_messageInfo_UpdatePhysicalHostRequest.Size(m)
}
func (m *UpdatePhysicalHostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePhysicalHostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePhysicalHostRequest proto.InternalMessageInfo

func (m *UpdatePhysicalHostRequest) GetHost() *PhysicalHost {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *UpdatePhysicalHostRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func init() {
	proto.RegisterType((*PhysicalHost)(nil), "crimson.PhysicalHost")
	proto.RegisterType((*CreatePhysicalHostRequest)(nil), "crimson.CreatePhysicalHostRequest")
	proto.RegisterType((*ListPhysicalHostsRequest)(nil), "crimson.ListPhysicalHostsRequest")
	proto.RegisterType((*ListPhysicalHostsResponse)(nil), "crimson.ListPhysicalHostsResponse")
	proto.RegisterType((*UpdatePhysicalHostRequest)(nil), "crimson.UpdatePhysicalHostRequest")
}

func init() {
	proto.RegisterFile("go.chromium.org/luci/machine-db/api/crimson/v1/physical_hosts.proto", fileDescriptor_physical_hosts_2b90a5c9e86ddbd1)
}

var fileDescriptor_physical_hosts_2b90a5c9e86ddbd1 = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4f, 0x6f, 0xd4, 0x3e,
	0x10, 0x55, 0x92, 0xee, 0xbf, 0xd9, 0xdf, 0xaf, 0xa2, 0x06, 0x24, 0xef, 0x8a, 0x43, 0xb4, 0x08,
	0x29, 0xa8, 0x6a, 0x22, 0x0a, 0x27, 0x38, 0x16, 0x55, 0x3d, 0x80, 0x84, 0x52, 0x38, 0xaf, 0xdc,
	0xc4, 0xdd, 0xb5, 0x36, 0x8e, 0x43, 0xc6, 0x89, 0xd4, 0x33, 0xdf, 0x88, 0x23, 0x9f, 0x0e, 0x79,
	0x9c, 0xb6, 0x8b, 0x0a, 0x12, 0x12, 0xb7, 0x99, 0xf7, 0x5e, 0x3c, 0xf6, 0x7b, 0x19, 0x38, 0xdb,
	0x98, 0xb4, 0xd8, 0xb6, 0x46, 0xab, 0x4e, 0xa7, 0xa6, 0xdd, 0x64, 0x55, 0x57, 0xa8, 0x4c, 0x8b,
	0x62, 0xab, 0x6a, 0x79, 0x52, 0x5e, 0x65, 0xa2, 0x51, 0x59, 0xd1, 0x2a, 0x8d, 0xa6, 0xce, 0xfa,
	0x57, 0x59, 0xb3, 0xbd, 0x41, 0x55, 0x88, 0x6a, 0xbd, 0x35, 0x68, 0x31, 0x6d, 0x5a, 0x63, 0x0d,
	0x9b, 0x0c, 0x82, 0x65, 0xbc, 0x31, 0x66, 0x53, 0xc9, 0x8c, 0xe0, 0xab, 0xee, 0x3a, 0xbb, 0x56,
	0xb2, 0x2a, 0xd7, 0x5a, 0xe0, 0xce, 0x4b, 0x97, 0x6f, 0xff, 0x6a, 0x9e, 0xd1, 0xda, 0x8f, 0x43,
	0x2b, 0xac, 0x1c, 0xc6, 0xac, 0xbe, 0x87, 0xf0, 0xdf, 0xa7, 0x61, 0xfe, 0x85, 0x41, 0xcb, 0x18,
	0x1c, 0xd4, 0x42, 0x4b, 0x1e, 0xc4, 0x41, 0x32, 0xcb, 0xa9, 0x76, 0x58, 0x5f, 0x89, 0x9a, 0x87,
	0x71, 0x90, 0x44, 0x39, 0xd5, 0x8c, 0xc3, 0x64, 0x98, 0xc0, 0x23, 0x92, 0xde, 0xb6, 0xec, 0x10,
	0x42, 0x83, 0xfc, 0x80, 0xc0, 0xd0, 0x20, 0x5b, 0xc0, 0xb4, 0xd7, 0x6b, 0xac, 0x8c, 0x45, 0x3e,
	0x8a, 0x83, 0x64, 0x94, 0x4f, 0x7a, 0x7d, 0xe9, 0x5a, 0x16, 0xc3, 0xbc, 0x94, 0x58, 0xb4, 0xaa,
	0xb1, 0xca, 0xd4, 0x7c, 0x4c, 0xdf, 0xec, 0x43, 0xec, 0x18, 0x8e, 0x4a, 0xd9, 0x54, 0xe6, 0x46,
	0xcb, 0xda, 0xae, 0xad, 0x2a, 0x76, 0xd2, 0xf2, 0x09, 0xe9, 0x1e, 0xdd, 0x13, 0x9f, 0x09, 0x77,
	0xf7, 0x54, 0x4d, 0xff, 0x86, 0x4f, 0xfd, 0xdd, 0x5d, 0xcd, 0x9e, 0xc3, 0x88, 0x1e, 0xcc, 0x67,
	0x71, 0x90, 0x1c, 0x9e, 0xfe, 0x9f, 0x7a, 0x23, 0xd2, 0x4b, 0x07, 0xe6, 0x9e, 0x63, 0x27, 0xc0,
	0x7a, 0xd5, 0xda, 0x4e, 0x54, 0xeb, 0x52, 0x58, 0x51, 0xc8, 0xda, 0xca, 0x96, 0x03, 0x1d, 0x73,
	0x34, 0x30, 0xef, 0xef, 0x88, 0xd5, 0x39, 0x2c, 0xce, 0x5a, 0x29, 0xac, 0xdc, 0x77, 0x2e, 0x97,
	0x5f, 0x3b, 0x89, 0x96, 0xbd, 0x84, 0x03, 0x97, 0x23, 0x19, 0x38, 0x3f, 0x7d, 0x9a, 0x0e, 0x39,
	0xa6, 0xbf, 0x68, 0x49, 0xb2, 0xfa, 0x11, 0x02, 0xff, 0xa0, 0xd0, 0xee, 0x53, 0x78, 0x7b, 0xce,
	0x13, 0x18, 0x39, 0xf3, 0x91, 0x07, 0x71, 0x94, 0xcc, 0x72, 0xdf, 0x38, 0xd4, 0xd9, 0x8f, 0x3c,
	0x8c, 0xa3, 0x24, 0xca, 0x7d, 0xe3, 0x50, 0xf7, 0x58, 0xe4, 0x91, 0xd7, 0x52, 0xc3, 0x96, 0x30,
	0x1d, 0x32, 0x71, 0x71, 0x38, 0xe2, 0xae, 0x77, 0x56, 0x19, 0x94, 0x2e, 0x10, 0x87, 0x53, 0xcd,
	0x5e, 0xc0, 0xd8, 0xff, 0x1b, 0x7c, 0x1c, 0x47, 0x0f, 0xbd, 0x1a, 0x48, 0xf6, 0x0c, 0x66, 0x4d,
	0x25, 0xec, 0xb5, 0x69, 0x35, 0xf2, 0x09, 0x7d, 0x7f, 0x0f, 0xb8, 0xab, 0xb4, 0xa2, 0xd8, 0x21,
	0x9f, 0xfa, 0xab, 0x50, 0x43, 0x41, 0xdf, 0xf9, 0x87, 0x7c, 0x46, 0xdc, 0x3e, 0xc4, 0x32, 0x78,
	0xfc, 0x30, 0x02, 0xe4, 0x40, 0x4a, 0xf6, 0x20, 0x03, 0x5c, 0x5d, 0xc0, 0xe2, 0x37, 0xde, 0x61,
	0x63, 0x6a, 0x94, 0xec, 0x18, 0x46, 0xb4, 0x4c, 0x64, 0xde, 0x1f, 0x53, 0xf0, 0x9a, 0xd5, 0xb7,
	0x00, 0x16, 0x5f, 0x9a, 0xf2, 0x9f, 0xf3, 0x64, 0xef, 0x60, 0xde, 0xd1, 0x39, 0xb4, 0x9d, 0xb4,
	0x2e, 0xf3, 0xd3, 0x65, 0xea, 0x17, 0x38, 0xbd, 0x5d, 0xe0, 0xf4, 0xdc, 0x2d, 0xf0, 0x47, 0x81,
	0xbb, 0x1c, 0xbc, 0xdc, 0xd5, 0x57, 0x63, 0xe2, 0x5f, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x7e,
	0x6e, 0x8d, 0x6e, 0x3e, 0x04, 0x00, 0x00,
}
